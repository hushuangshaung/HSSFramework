// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equipV2.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from equipV2.proto</summary>
public static partial class EquipV2Reflection {

  #region Descriptor
  /// <summary>File descriptor for equipV2.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static EquipV2Reflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1lcXVpcFYyLnByb3RvGgpiZWFuLnByb3RvIhcKB0RyYXdSZXESDAoEcmF0",
          "ZRgBIAEoBSL/AQoIRHJhd1Jlc3ASGgoGZXF1aXBzGAEgAygLMgouRXF1aXBW",
          "MlBiEhwKCW5ld1RhbGVudBgCIAMoCzIJLlRhbGVudFBiEicKB2FkZEl0ZW0Y",
          "AyADKAsyFi5EcmF3UmVzcC5BZGRJdGVtRW50cnkSLQoKY2hhbmdlSXRlbRgE",
          "IAMoCzIZLkRyYXdSZXNwLkNoYW5nZUl0ZW1FbnRyeRouCgxBZGRJdGVtRW50",
          "cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARoxCg9DaGFuZ2VJ",
          "dGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIWCgdT",
          "YWxlUmVxEgsKA3NybBgBIAEoBSKcAQoIU2FsZVJlc3ASCwoDc3JsGAEgASgF",
          "EicKB2FkZEl0ZW0YAiADKAsyFi5TYWxlUmVzcC5BZGRJdGVtRW50cnkSDQoF",
          "bGV2ZWwYAyABKAUSCwoDZXhwGAQgASgFEg4KBmdldEV4cBgFIAEoBRouCgxB",
          "ZGRJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIZ",
          "CgpSZWNvdmVyUmVxEgsKA3NybBgBIAEoBSJSCgtSZWNvdmVyUmVzcBIKCgJp",
          "ZBgBIAEoBRILCgNzcmwYAiABKAUSFQoEYXR0chgDIAEoCzIHLkF0dHJQYhIT",
          "Cgtub0hhbmRsZVNybBgEIAEoBSI9CgxQdXRCYXR0bGVSZXESCwoDcG9zGAEg",
          "ASgFEg8KB29sZFR5cGUYAiABKAUSDwoHbmV3VHlwZRgDIAEoBSI+Cg1QdXRC",
          "YXR0bGVSZXNwEgsKA3BvcxgBIAEoBRIPCgdvbGRUeXBlGAIgASgFEg8KB25l",
          "d1R5cGUYAyABKAUiGQoLVXBUYWxlbnRSZXESCgoCaWQYASABKAUiKQoMVXBU",
          "YWxlbnRSZXNwEhkKBnRhbGVudBgBIAEoCzIJLlRhbGVudFBiIisKD0NoYW5n",
          "ZVRhbGVudFJlcRIMCgR0eXBlGAEgASgFEgoKAmlkGAIgASgFIjsKEENoYW5n",
          "ZVRhbGVudFJlc3ASDAoEdHlwZRgBIAEoBRIZCgZ0YWxlbnQYAiABKAsyCS5U",
          "YWxlbnRQYkIXCgpjb20uY2IubXNnQglQQkVxdWlwVjJiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::DrawReq), global::DrawReq.Parser, new[]{ "Rate" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DrawResp), global::DrawResp.Parser, new[]{ "Equips", "NewTalent", "AddItem", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::SaleReq), global::SaleReq.Parser, new[]{ "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SaleResp), global::SaleResp.Parser, new[]{ "Srl", "AddItem", "Level", "Exp", "GetExp" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::RecoverReq), global::RecoverReq.Parser, new[]{ "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RecoverResp), global::RecoverResp.Parser, new[]{ "Id", "Srl", "Attr", "NoHandleSrl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PutBattleReq), global::PutBattleReq.Parser, new[]{ "Pos", "OldType", "NewType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PutBattleResp), global::PutBattleResp.Parser, new[]{ "Pos", "OldType", "NewType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpTalentReq), global::UpTalentReq.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpTalentResp), global::UpTalentResp.Parser, new[]{ "Talent" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChangeTalentReq), global::ChangeTalentReq.Parser, new[]{ "Type", "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChangeTalentResp), global::ChangeTalentResp.Parser, new[]{ "Type", "Talent" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///抽卡 
/// </summary>
public sealed partial class DrawReq : pb::IMessage<DrawReq> {
  private static readonly pb::MessageParser<DrawReq> _parser = new pb::MessageParser<DrawReq>(() => new DrawReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DrawReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipV2Reflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawReq(DrawReq other) : this() {
    rate_ = other.rate_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawReq Clone() {
    return new DrawReq(this);
  }

  /// <summary>Field number for the "rate" field.</summary>
  public const int RateFieldNumber = 1;
  private int rate_;
  /// <summary>
  ///倍率 取值 1,2,3
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rate {
    get { return rate_; }
    set {
      rate_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DrawReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DrawReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Rate != other.Rate) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Rate != 0) hash ^= Rate.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Rate != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Rate);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Rate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DrawReq other) {
    if (other == null) {
      return;
    }
    if (other.Rate != 0) {
      Rate = other.Rate;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Rate = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DrawResp : pb::IMessage<DrawResp> {
  private static readonly pb::MessageParser<DrawResp> _parser = new pb::MessageParser<DrawResp>(() => new DrawResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DrawResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipV2Reflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawResp(DrawResp other) : this() {
    equips_ = other.equips_.Clone();
    newTalent_ = other.newTalent_.Clone();
    addItem_ = other.addItem_.Clone();
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawResp Clone() {
    return new DrawResp(this);
  }

  /// <summary>Field number for the "equips" field.</summary>
  public const int EquipsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EquipV2Pb> _repeated_equips_codec
      = pb::FieldCodec.ForMessage(10, global::EquipV2Pb.Parser);
  private readonly pbc::RepeatedField<global::EquipV2Pb> equips_ = new pbc::RepeatedField<global::EquipV2Pb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EquipV2Pb> Equips {
    get { return equips_; }
  }

  /// <summary>Field number for the "newTalent" field.</summary>
  public const int NewTalentFieldNumber = 2;
  private static readonly pb::FieldCodec<global::TalentPb> _repeated_newTalent_codec
      = pb::FieldCodec.ForMessage(18, global::TalentPb.Parser);
  private readonly pbc::RepeatedField<global::TalentPb> newTalent_ = new pbc::RepeatedField<global::TalentPb>();
  /// <summary>
  ///如果有新天赋 ，客户端自己加入所有天赋列表中
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TalentPb> NewTalent {
    get { return newTalent_; }
  }

  /// <summary>Field number for the "addItem" field.</summary>
  public const int AddItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_addItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> addItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///可能出道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> AddItem {
    get { return addItem_; }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具,客户端直接k,v覆盖掉道具原有的k,v
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DrawResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DrawResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!equips_.Equals(other.equips_)) return false;
    if(!newTalent_.Equals(other.newTalent_)) return false;
    if (!AddItem.Equals(other.AddItem)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= equips_.GetHashCode();
    hash ^= newTalent_.GetHashCode();
    hash ^= AddItem.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    equips_.WriteTo(output, _repeated_equips_codec);
    newTalent_.WriteTo(output, _repeated_newTalent_codec);
    addItem_.WriteTo(output, _map_addItem_codec);
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += equips_.CalculateSize(_repeated_equips_codec);
    size += newTalent_.CalculateSize(_repeated_newTalent_codec);
    size += addItem_.CalculateSize(_map_addItem_codec);
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DrawResp other) {
    if (other == null) {
      return;
    }
    equips_.Add(other.equips_);
    newTalent_.Add(other.newTalent_);
    addItem_.Add(other.addItem_);
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          equips_.AddEntriesFrom(input, _repeated_equips_codec);
          break;
        }
        case 18: {
          newTalent_.AddEntriesFrom(input, _repeated_newTalent_codec);
          break;
        }
        case 26: {
          addItem_.AddEntriesFrom(input, _map_addItem_codec);
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///出售
/// </summary>
public sealed partial class SaleReq : pb::IMessage<SaleReq> {
  private static readonly pb::MessageParser<SaleReq> _parser = new pb::MessageParser<SaleReq>(() => new SaleReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SaleReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipV2Reflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SaleReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SaleReq(SaleReq other) : this() {
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SaleReq Clone() {
    return new SaleReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SaleReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SaleReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SaleReq other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SaleResp : pb::IMessage<SaleResp> {
  private static readonly pb::MessageParser<SaleResp> _parser = new pb::MessageParser<SaleResp>(() => new SaleResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SaleResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipV2Reflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SaleResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SaleResp(SaleResp other) : this() {
    srl_ = other.srl_;
    addItem_ = other.addItem_.Clone();
    level_ = other.level_;
    exp_ = other.exp_;
    getExp_ = other.getExp_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SaleResp Clone() {
    return new SaleResp(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "addItem" field.</summary>
  public const int AddItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_addItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> addItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///获得道具  addItem-增量  changeItem-改变量 item-全量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> AddItem {
    get { return addItem_; }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  /// <summary>
  ///玩家等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 4;
  private int exp_;
  /// <summary>
  ///当前玩家经验
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "getExp" field.</summary>
  public const int GetExpFieldNumber = 5;
  private int getExp_;
  /// <summary>
  ///获得经验 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GetExp {
    get { return getExp_; }
    set {
      getExp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SaleResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SaleResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    if (!AddItem.Equals(other.AddItem)) return false;
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    if (GetExp != other.GetExp) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    hash ^= AddItem.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (GetExp != 0) hash ^= GetExp.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
    addItem_.WriteTo(output, _map_addItem_codec);
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Exp);
    }
    if (GetExp != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GetExp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    size += addItem_.CalculateSize(_map_addItem_codec);
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (GetExp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetExp);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SaleResp other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    addItem_.Add(other.addItem_);
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.GetExp != 0) {
      GetExp = other.GetExp;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
        case 18: {
          addItem_.AddEntriesFrom(input, _map_addItem_codec);
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
        case 32: {
          Exp = input.ReadInt32();
          break;
        }
        case 40: {
          GetExp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///收复
/// </summary>
public sealed partial class RecoverReq : pb::IMessage<RecoverReq> {
  private static readonly pb::MessageParser<RecoverReq> _parser = new pb::MessageParser<RecoverReq>(() => new RecoverReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RecoverReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipV2Reflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RecoverReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RecoverReq(RecoverReq other) : this() {
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RecoverReq Clone() {
    return new RecoverReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RecoverReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RecoverReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RecoverReq other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RecoverResp : pb::IMessage<RecoverResp> {
  private static readonly pb::MessageParser<RecoverResp> _parser = new pb::MessageParser<RecoverResp>(() => new RecoverResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RecoverResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipV2Reflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RecoverResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RecoverResp(RecoverResp other) : this() {
    id_ = other.id_;
    srl_ = other.srl_;
    Attr = other.attr_ != null ? other.Attr.Clone() : null;
    noHandleSrl_ = other.noHandleSrl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RecoverResp Clone() {
    return new RecoverResp(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 2;
  private int srl_;
  /// <summary>
  ///宠物列表中的序号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 3;
  private global::AttrPb attr_;
  /// <summary>
  ///变化的属性  客户端用key去比对，改变量，直接覆盖
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AttrPb Attr {
    get { return attr_; }
    set {
      attr_ = value;
    }
  }

  /// <summary>Field number for the "noHandleSrl" field.</summary>
  public const int NoHandleSrlFieldNumber = 4;
  private int noHandleSrl_;
  /// <summary>
  ///未处理宠物序号 ，这里可能为nil ,第一次收复的时候
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NoHandleSrl {
    get { return noHandleSrl_; }
    set {
      noHandleSrl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RecoverResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RecoverResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Srl != other.Srl) return false;
    if (!object.Equals(Attr, other.Attr)) return false;
    if (NoHandleSrl != other.NoHandleSrl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Srl != 0) hash ^= Srl.GetHashCode();
    if (attr_ != null) hash ^= Attr.GetHashCode();
    if (NoHandleSrl != 0) hash ^= NoHandleSrl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Srl != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Srl);
    }
    if (attr_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Attr);
    }
    if (NoHandleSrl != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(NoHandleSrl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    if (attr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
    }
    if (NoHandleSrl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NoHandleSrl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RecoverResp other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    if (other.attr_ != null) {
      if (attr_ == null) {
        attr_ = new global::AttrPb();
      }
      Attr.MergeFrom(other.Attr);
    }
    if (other.NoHandleSrl != 0) {
      NoHandleSrl = other.NoHandleSrl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Srl = input.ReadInt32();
          break;
        }
        case 26: {
          if (attr_ == null) {
            attr_ = new global::AttrPb();
          }
          input.ReadMessage(attr_);
          break;
        }
        case 32: {
          NoHandleSrl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///出战
/// </summary>
public sealed partial class PutBattleReq : pb::IMessage<PutBattleReq> {
  private static readonly pb::MessageParser<PutBattleReq> _parser = new pb::MessageParser<PutBattleReq>(() => new PutBattleReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PutBattleReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipV2Reflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PutBattleReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PutBattleReq(PutBattleReq other) : this() {
    pos_ = other.pos_;
    oldType_ = other.oldType_;
    newType_ = other.newType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PutBattleReq Clone() {
    return new PutBattleReq(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "oldType" field.</summary>
  public const int OldTypeFieldNumber = 2;
  private int oldType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OldType {
    get { return oldType_; }
    set {
      oldType_ = value;
    }
  }

  /// <summary>Field number for the "newType" field.</summary>
  public const int NewTypeFieldNumber = 3;
  private int newType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NewType {
    get { return newType_; }
    set {
      newType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PutBattleReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PutBattleReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    if (OldType != other.OldType) return false;
    if (NewType != other.NewType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (OldType != 0) hash ^= OldType.GetHashCode();
    if (NewType != 0) hash ^= NewType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pos != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
    if (OldType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OldType);
    }
    if (NewType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NewType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (OldType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldType);
    }
    if (NewType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PutBattleReq other) {
    if (other == null) {
      return;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.OldType != 0) {
      OldType = other.OldType;
    }
    if (other.NewType != 0) {
      NewType = other.NewType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
        case 16: {
          OldType = input.ReadInt32();
          break;
        }
        case 24: {
          NewType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PutBattleResp : pb::IMessage<PutBattleResp> {
  private static readonly pb::MessageParser<PutBattleResp> _parser = new pb::MessageParser<PutBattleResp>(() => new PutBattleResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PutBattleResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipV2Reflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PutBattleResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PutBattleResp(PutBattleResp other) : this() {
    pos_ = other.pos_;
    oldType_ = other.oldType_;
    newType_ = other.newType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PutBattleResp Clone() {
    return new PutBattleResp(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "oldType" field.</summary>
  public const int OldTypeFieldNumber = 2;
  private int oldType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OldType {
    get { return oldType_; }
    set {
      oldType_ = value;
    }
  }

  /// <summary>Field number for the "newType" field.</summary>
  public const int NewTypeFieldNumber = 3;
  private int newType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NewType {
    get { return newType_; }
    set {
      newType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PutBattleResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PutBattleResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    if (OldType != other.OldType) return false;
    if (NewType != other.NewType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (OldType != 0) hash ^= OldType.GetHashCode();
    if (NewType != 0) hash ^= NewType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pos != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
    if (OldType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OldType);
    }
    if (NewType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NewType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (OldType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldType);
    }
    if (NewType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PutBattleResp other) {
    if (other == null) {
      return;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.OldType != 0) {
      OldType = other.OldType;
    }
    if (other.NewType != 0) {
      NewType = other.NewType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
        case 16: {
          OldType = input.ReadInt32();
          break;
        }
        case 24: {
          NewType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///升级天赋
/// </summary>
public sealed partial class UpTalentReq : pb::IMessage<UpTalentReq> {
  private static readonly pb::MessageParser<UpTalentReq> _parser = new pb::MessageParser<UpTalentReq>(() => new UpTalentReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpTalentReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipV2Reflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpTalentReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpTalentReq(UpTalentReq other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpTalentReq Clone() {
    return new UpTalentReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///天赋id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpTalentReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpTalentReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpTalentReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class UpTalentResp : pb::IMessage<UpTalentResp> {
  private static readonly pb::MessageParser<UpTalentResp> _parser = new pb::MessageParser<UpTalentResp>(() => new UpTalentResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpTalentResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipV2Reflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpTalentResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpTalentResp(UpTalentResp other) : this() {
    Talent = other.talent_ != null ? other.Talent.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpTalentResp Clone() {
    return new UpTalentResp(this);
  }

  /// <summary>Field number for the "talent" field.</summary>
  public const int TalentFieldNumber = 1;
  private global::TalentPb talent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TalentPb Talent {
    get { return talent_; }
    set {
      talent_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpTalentResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpTalentResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Talent, other.Talent)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (talent_ != null) hash ^= Talent.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (talent_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Talent);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (talent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Talent);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpTalentResp other) {
    if (other == null) {
      return;
    }
    if (other.talent_ != null) {
      if (talent_ == null) {
        talent_ = new global::TalentPb();
      }
      Talent.MergeFrom(other.Talent);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (talent_ == null) {
            talent_ = new global::TalentPb();
          }
          input.ReadMessage(talent_);
          break;
        }
      }
    }
  }

}

/// <summary>
///更换天赋
/// </summary>
public sealed partial class ChangeTalentReq : pb::IMessage<ChangeTalentReq> {
  private static readonly pb::MessageParser<ChangeTalentReq> _parser = new pb::MessageParser<ChangeTalentReq>(() => new ChangeTalentReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChangeTalentReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipV2Reflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeTalentReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeTalentReq(ChangeTalentReq other) : this() {
    type_ = other.type_;
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeTalentReq Clone() {
    return new ChangeTalentReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///宠物类型 1-9
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private int id_;
  /// <summary>
  ///天赋id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChangeTalentReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChangeTalentReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (Id != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChangeTalentReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ChangeTalentResp : pb::IMessage<ChangeTalentResp> {
  private static readonly pb::MessageParser<ChangeTalentResp> _parser = new pb::MessageParser<ChangeTalentResp>(() => new ChangeTalentResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChangeTalentResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EquipV2Reflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeTalentResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeTalentResp(ChangeTalentResp other) : this() {
    type_ = other.type_;
    Talent = other.talent_ != null ? other.Talent.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeTalentResp Clone() {
    return new ChangeTalentResp(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///宠物类型 1-9
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "talent" field.</summary>
  public const int TalentFieldNumber = 2;
  private global::TalentPb talent_;
  /// <summary>
  ///天赋
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TalentPb Talent {
    get { return talent_; }
    set {
      talent_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChangeTalentResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChangeTalentResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (!object.Equals(Talent, other.Talent)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (talent_ != null) hash ^= Talent.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (talent_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Talent);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (talent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Talent);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChangeTalentResp other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.talent_ != null) {
      if (talent_ == null) {
        talent_ = new global::TalentPb();
      }
      Talent.MergeFrom(other.Talent);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 18: {
          if (talent_ == null) {
            talent_ = new global::TalentPb();
          }
          input.ReadMessage(talent_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
