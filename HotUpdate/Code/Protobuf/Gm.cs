// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gm.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from gm.proto</summary>
public static partial class GmReflection {

  #region Descriptor
  /// <summary>File descriptor for gm.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GmReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CghnbS5wcm90byJWCgVHTVJlcRINCgVnbUNtZBgBIAEoBRIOCgZwYXJtYTEY",
          "AiABKAkSDgoGcGFybWEyGAMgASgJEg4KBnBhcm1hMxgEIAEoCRIOCgZwYXJt",
          "YTQYBSABKAkigQEKBkdNUmVzcBIOCgZyZXN1bHQYASABKAUSMQoNY2hhbmdl",
          "SXRlbU1hcBgCIAMoCzIaLkdNUmVzcC5DaGFuZ2VJdGVtTWFwRW50cnkaNAoS",
          "Q2hhbmdlSXRlbU1hcEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEo",
          "BToCOAFCEgoKY29tLmNiLm1zZ0IEUEJHbWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::GMReq), global::GMReq.Parser, new[]{ "GmCmd", "Parma1", "Parma2", "Parma3", "Parma4" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GMResp), global::GMResp.Parser, new[]{ "Result", "ChangeItemMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
        }));
  }
  #endregion

}
#region Messages
public sealed partial class GMReq : pb::IMessage<GMReq> {
  private static readonly pb::MessageParser<GMReq> _parser = new pb::MessageParser<GMReq>(() => new GMReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GMReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GmReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GMReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GMReq(GMReq other) : this() {
    gmCmd_ = other.gmCmd_;
    parma1_ = other.parma1_;
    parma2_ = other.parma2_;
    parma3_ = other.parma3_;
    parma4_ = other.parma4_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GMReq Clone() {
    return new GMReq(this);
  }

  /// <summary>Field number for the "gmCmd" field.</summary>
  public const int GmCmdFieldNumber = 1;
  private int gmCmd_;
  /// <summary>
  /// gm 命令（1 增加道具）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GmCmd {
    get { return gmCmd_; }
    set {
      gmCmd_ = value;
    }
  }

  /// <summary>Field number for the "parma1" field.</summary>
  public const int Parma1FieldNumber = 2;
  private string parma1_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Parma1 {
    get { return parma1_; }
    set {
      parma1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "parma2" field.</summary>
  public const int Parma2FieldNumber = 3;
  private string parma2_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Parma2 {
    get { return parma2_; }
    set {
      parma2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "parma3" field.</summary>
  public const int Parma3FieldNumber = 4;
  private string parma3_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Parma3 {
    get { return parma3_; }
    set {
      parma3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "parma4" field.</summary>
  public const int Parma4FieldNumber = 5;
  private string parma4_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Parma4 {
    get { return parma4_; }
    set {
      parma4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GMReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GMReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GmCmd != other.GmCmd) return false;
    if (Parma1 != other.Parma1) return false;
    if (Parma2 != other.Parma2) return false;
    if (Parma3 != other.Parma3) return false;
    if (Parma4 != other.Parma4) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GmCmd != 0) hash ^= GmCmd.GetHashCode();
    if (Parma1.Length != 0) hash ^= Parma1.GetHashCode();
    if (Parma2.Length != 0) hash ^= Parma2.GetHashCode();
    if (Parma3.Length != 0) hash ^= Parma3.GetHashCode();
    if (Parma4.Length != 0) hash ^= Parma4.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GmCmd != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GmCmd);
    }
    if (Parma1.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Parma1);
    }
    if (Parma2.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Parma2);
    }
    if (Parma3.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Parma3);
    }
    if (Parma4.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Parma4);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GmCmd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GmCmd);
    }
    if (Parma1.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Parma1);
    }
    if (Parma2.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Parma2);
    }
    if (Parma3.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Parma3);
    }
    if (Parma4.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Parma4);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GMReq other) {
    if (other == null) {
      return;
    }
    if (other.GmCmd != 0) {
      GmCmd = other.GmCmd;
    }
    if (other.Parma1.Length != 0) {
      Parma1 = other.Parma1;
    }
    if (other.Parma2.Length != 0) {
      Parma2 = other.Parma2;
    }
    if (other.Parma3.Length != 0) {
      Parma3 = other.Parma3;
    }
    if (other.Parma4.Length != 0) {
      Parma4 = other.Parma4;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GmCmd = input.ReadInt32();
          break;
        }
        case 18: {
          Parma1 = input.ReadString();
          break;
        }
        case 26: {
          Parma2 = input.ReadString();
          break;
        }
        case 34: {
          Parma3 = input.ReadString();
          break;
        }
        case 42: {
          Parma4 = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GMResp : pb::IMessage<GMResp> {
  private static readonly pb::MessageParser<GMResp> _parser = new pb::MessageParser<GMResp>(() => new GMResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GMResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GmReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GMResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GMResp(GMResp other) : this() {
    result_ = other.result_;
    changeItemMap_ = other.changeItemMap_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GMResp Clone() {
    return new GMResp(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  /// gm结果，1成功，0失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "changeItemMap" field.</summary>
  public const int ChangeItemMapFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItemMap_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItemMap_ = new pbc::MapField<int, int>();
  /// <summary>
  /// 变化的item对象，数量是最终的操作结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItemMap {
    get { return changeItemMap_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GMResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GMResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (!ChangeItemMap.Equals(other.ChangeItemMap)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= ChangeItemMap.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    changeItemMap_.WriteTo(output, _map_changeItemMap_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += changeItemMap_.CalculateSize(_map_changeItemMap_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GMResp other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    changeItemMap_.Add(other.changeItemMap_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          changeItemMap_.AddEntriesFrom(input, _map_changeItemMap_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
