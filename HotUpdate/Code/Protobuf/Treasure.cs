// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: treasure.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from treasure.proto</summary>
public static partial class TreasureReflection {

  #region Descriptor
  /// <summary>File descriptor for treasure.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TreasureReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg50cmVhc3VyZS5wcm90bxoKYmVhbi5wcm90byIoCg1Sb3VnaExpc3RSZXNw",
          "EhcKBXJvdWdoGAEgAygLMgguUm91Z2hQYiIfCg9Sb3VnaFJlZnJlc2hSZXES",
          "DAoEdHlwZRgBIAEoBSKPAQoQUm91Z2hSZWZyZXNoUmVzcBIXCgVyb3VnaBgB",
          "IAMoCzIILlJvdWdoUGISFgoOcm91Z2hGcmVlVGltZXMYAiABKAUSGAoQcm91",
          "Z2hOb3JtYWxUaW1lcxgDIAEoBRIZChFyb3VnaFNwZWNpYWxUaW1lcxgEIAEo",
          "BRIVCgRpdGVtGAUgASgLMgcuSXRlbVBiIhoKC1JvdWdoSGl0UmVxEgsKA3Ny",
          "bBgCIAEoBSKsAQoMUm91Z2hIaXRSZXNwEhcKBXJvdWdoGAEgASgLMgguUm91",
          "Z2hQYhIdCgh0cmVhc3VyZRgCIAEoCzILLlRyZWFzdXJlUGISMQoKY2hhbmdl",
          "SXRlbRgDIAMoCzIdLlJvdWdoSGl0UmVzcC5DaGFuZ2VJdGVtRW50cnkaMQoP",
          "Q2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToC",
          "OAEiEQoPVHJlYXN1cmVMaXN0UmVxIjEKEFRyZWFzdXJlTGlzdFJlc3ASHQoI",
          "dHJlYXN1cmUYASADKAsyCy5UcmVhc3VyZVBiIhwKDVRyZWFzdXJlVXBSZXES",
          "CwoDc3JsGAEgASgFIpcBCg5UcmVhc3VyZVVwUmVzcBIdCgh0cmVhc3VyZRgB",
          "IAEoCzILLlRyZWFzdXJlUGISMwoKY2hhbmdlSXRlbRgCIAMoCzIfLlRyZWFz",
          "dXJlVXBSZXNwLkNoYW5nZUl0ZW1FbnRyeRoxCg9DaGFuZ2VJdGVtRW50cnkS",
          "CwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIVChNUcmVhc3VyZUJv",
          "b2tMaXN0UmVxIioKFFRyZWFzdXJlQm9va0xpc3RSZXNwEhIKCnRyZWFzdXJl",
          "aWQYASADKAUiIwoUVHJlYXN1cmVEZWNvbXBvc2VSZXESCwoDc3JsGAEgASgF",
          "IooBChVUcmVhc3VyZURlY29tcG9zZVJlc3ASCwoDc3JsGAEgASgFEjQKB2Fk",
          "ZEl0ZW0YAiADKAsyIy5UcmVhc3VyZURlY29tcG9zZVJlc3AuQWRkSXRlbUVu",
          "dHJ5Gi4KDEFkZEl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiAB",
          "KAM6AjgBIh8KEFRyZWFzdXJlRXF1aXBSZXESCwoDc3JsGAEgASgFIiAKEVRy",
          "ZWFzdXJlRXF1aXBSZXNwEgsKA3NybBgBIAEoBSKaAQoPVHJlYXN1cmVTdGVw",
          "UmVxEgsKA3NybBgBIAEoBRIwCghjb3N0SXRlbRgCIAMoCzIeLlRyZWFzdXJl",
          "U3RlcFJlcS5Db3N0SXRlbUVudHJ5EhcKD2Nvc3RUcmVhc3VyZVNybBgDIAMo",
          "BRovCg1Db3N0SXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEo",
          "BToCOAEiawoQVHJlYXN1cmVTdGVwUmVzcBIdCgh0cmVhc3VyZRgBIAEoCzIL",
          "LlRyZWFzdXJlUGISFQoEaXRlbRgCIAEoCzIHLkl0ZW1QYhIhCgx0cmVhc3Vy",
          "ZUxpc3QYAyADKAsyCy5UcmVhc3VyZVBiIiUKDE1pbmVMaXN0UmVzcBIVCgRt",
          "aW5lGAEgASgLMgcuTWluZVBiIn4KEU1pbmVSZXdhcmRHZXRSZXNwEjYKCmNo",
          "YW5nZUl0ZW0YASADKAsyIi5NaW5lUmV3YXJkR2V0UmVzcC5DaGFuZ2VJdGVt",
          "RW50cnkaMQoPQ2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1",
          "ZRgCIAEoBToCOAEiLgoSTWluZVB1dFRyZWFzdXJlUmVxEgsKA3BvcxgBIAEo",
          "BRILCgNzcmwYAiABKAUiLwoTTWluZVB1dFRyZWFzdXJlUmVzcBILCgNwb3MY",
          "ASABKAUSCwoDc3JsGAIgASgFIh4KD01pbmVSb3VnaEhpdFJlcRILCgNzcmwY",
          "AiABKAUitAEKEE1pbmVSb3VnaEhpdFJlc3ASFwoFcm91Z2gYASABKAsyCC5S",
          "b3VnaFBiEh0KCHRyZWFzdXJlGAIgASgLMgsuVHJlYXN1cmVQYhI1CgpjaGFu",
          "Z2VJdGVtGAMgAygLMiEuTWluZVJvdWdoSGl0UmVzcC5DaGFuZ2VJdGVtRW50",
          "cnkaMQoPQ2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgC",
          "IAEoBToCOAFCGAoKY29tLmNiLm1zZ0IKUEJUcmVhc3VyZWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::RoughListResp), global::RoughListResp.Parser, new[]{ "Rough" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoughRefreshReq), global::RoughRefreshReq.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoughRefreshResp), global::RoughRefreshResp.Parser, new[]{ "Rough", "RoughFreeTimes", "RoughNormalTimes", "RoughSpecialTimes", "Item" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoughHitReq), global::RoughHitReq.Parser, new[]{ "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoughHitResp), global::RoughHitResp.Parser, new[]{ "Rough", "Treasure", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasureListReq), global::TreasureListReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasureListResp), global::TreasureListResp.Parser, new[]{ "Treasure" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasureUpReq), global::TreasureUpReq.Parser, new[]{ "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasureUpResp), global::TreasureUpResp.Parser, new[]{ "Treasure", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasureBookListReq), global::TreasureBookListReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasureBookListResp), global::TreasureBookListResp.Parser, new[]{ "Treasureid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasureDecomposeReq), global::TreasureDecomposeReq.Parser, new[]{ "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasureDecomposeResp), global::TreasureDecomposeResp.Parser, new[]{ "Srl", "AddItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasureEquipReq), global::TreasureEquipReq.Parser, new[]{ "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasureEquipResp), global::TreasureEquipResp.Parser, new[]{ "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasureStepReq), global::TreasureStepReq.Parser, new[]{ "Srl", "CostItem", "CostTreasureSrl" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasureStepResp), global::TreasureStepResp.Parser, new[]{ "Treasure", "Item", "TreasureList" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MineListResp), global::MineListResp.Parser, new[]{ "Mine" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MineRewardGetResp), global::MineRewardGetResp.Parser, new[]{ "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::MinePutTreasureReq), global::MinePutTreasureReq.Parser, new[]{ "Pos", "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MinePutTreasureResp), global::MinePutTreasureResp.Parser, new[]{ "Pos", "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MineRoughHitReq), global::MineRoughHitReq.Parser, new[]{ "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MineRoughHitResp), global::MineRoughHitResp.Parser, new[]{ "Rough", "Treasure", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///原石列表 --req nil
/// </summary>
public sealed partial class RoughListResp : pb::IMessage<RoughListResp> {
  private static readonly pb::MessageParser<RoughListResp> _parser = new pb::MessageParser<RoughListResp>(() => new RoughListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoughListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughListResp(RoughListResp other) : this() {
    rough_ = other.rough_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughListResp Clone() {
    return new RoughListResp(this);
  }

  /// <summary>Field number for the "rough" field.</summary>
  public const int RoughFieldNumber = 1;
  private static readonly pb::FieldCodec<global::RoughPb> _repeated_rough_codec
      = pb::FieldCodec.ForMessage(10, global::RoughPb.Parser);
  private readonly pbc::RepeatedField<global::RoughPb> rough_ = new pbc::RepeatedField<global::RoughPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RoughPb> Rough {
    get { return rough_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoughListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoughListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!rough_.Equals(other.rough_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= rough_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    rough_.WriteTo(output, _repeated_rough_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += rough_.CalculateSize(_repeated_rough_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoughListResp other) {
    if (other == null) {
      return;
    }
    rough_.Add(other.rough_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          rough_.AddEntriesFrom(input, _repeated_rough_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///原石进货
/// </summary>
public sealed partial class RoughRefreshReq : pb::IMessage<RoughRefreshReq> {
  private static readonly pb::MessageParser<RoughRefreshReq> _parser = new pb::MessageParser<RoughRefreshReq>(() => new RoughRefreshReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoughRefreshReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughRefreshReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughRefreshReq(RoughRefreshReq other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughRefreshReq Clone() {
    return new RoughRefreshReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///1-普通进货 2-特殊进货 3-免费进货
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoughRefreshReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoughRefreshReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoughRefreshReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RoughRefreshResp : pb::IMessage<RoughRefreshResp> {
  private static readonly pb::MessageParser<RoughRefreshResp> _parser = new pb::MessageParser<RoughRefreshResp>(() => new RoughRefreshResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoughRefreshResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughRefreshResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughRefreshResp(RoughRefreshResp other) : this() {
    rough_ = other.rough_.Clone();
    roughFreeTimes_ = other.roughFreeTimes_;
    roughNormalTimes_ = other.roughNormalTimes_;
    roughSpecialTimes_ = other.roughSpecialTimes_;
    Item = other.item_ != null ? other.Item.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughRefreshResp Clone() {
    return new RoughRefreshResp(this);
  }

  /// <summary>Field number for the "rough" field.</summary>
  public const int RoughFieldNumber = 1;
  private static readonly pb::FieldCodec<global::RoughPb> _repeated_rough_codec
      = pb::FieldCodec.ForMessage(10, global::RoughPb.Parser);
  private readonly pbc::RepeatedField<global::RoughPb> rough_ = new pbc::RepeatedField<global::RoughPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RoughPb> Rough {
    get { return rough_; }
  }

  /// <summary>Field number for the "roughFreeTimes" field.</summary>
  public const int RoughFreeTimesFieldNumber = 2;
  private int roughFreeTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoughFreeTimes {
    get { return roughFreeTimes_; }
    set {
      roughFreeTimes_ = value;
    }
  }

  /// <summary>Field number for the "roughNormalTimes" field.</summary>
  public const int RoughNormalTimesFieldNumber = 3;
  private int roughNormalTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoughNormalTimes {
    get { return roughNormalTimes_; }
    set {
      roughNormalTimes_ = value;
    }
  }

  /// <summary>Field number for the "roughSpecialTimes" field.</summary>
  public const int RoughSpecialTimesFieldNumber = 4;
  private int roughSpecialTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoughSpecialTimes {
    get { return roughSpecialTimes_; }
    set {
      roughSpecialTimes_ = value;
    }
  }

  /// <summary>Field number for the "item" field.</summary>
  public const int ItemFieldNumber = 5;
  private global::ItemPb item_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ItemPb Item {
    get { return item_; }
    set {
      item_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoughRefreshResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoughRefreshResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!rough_.Equals(other.rough_)) return false;
    if (RoughFreeTimes != other.RoughFreeTimes) return false;
    if (RoughNormalTimes != other.RoughNormalTimes) return false;
    if (RoughSpecialTimes != other.RoughSpecialTimes) return false;
    if (!object.Equals(Item, other.Item)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= rough_.GetHashCode();
    if (RoughFreeTimes != 0) hash ^= RoughFreeTimes.GetHashCode();
    if (RoughNormalTimes != 0) hash ^= RoughNormalTimes.GetHashCode();
    if (RoughSpecialTimes != 0) hash ^= RoughSpecialTimes.GetHashCode();
    if (item_ != null) hash ^= Item.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    rough_.WriteTo(output, _repeated_rough_codec);
    if (RoughFreeTimes != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RoughFreeTimes);
    }
    if (RoughNormalTimes != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RoughNormalTimes);
    }
    if (RoughSpecialTimes != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RoughSpecialTimes);
    }
    if (item_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Item);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += rough_.CalculateSize(_repeated_rough_codec);
    if (RoughFreeTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoughFreeTimes);
    }
    if (RoughNormalTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoughNormalTimes);
    }
    if (RoughSpecialTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoughSpecialTimes);
    }
    if (item_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoughRefreshResp other) {
    if (other == null) {
      return;
    }
    rough_.Add(other.rough_);
    if (other.RoughFreeTimes != 0) {
      RoughFreeTimes = other.RoughFreeTimes;
    }
    if (other.RoughNormalTimes != 0) {
      RoughNormalTimes = other.RoughNormalTimes;
    }
    if (other.RoughSpecialTimes != 0) {
      RoughSpecialTimes = other.RoughSpecialTimes;
    }
    if (other.item_ != null) {
      if (item_ == null) {
        item_ = new global::ItemPb();
      }
      Item.MergeFrom(other.Item);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          rough_.AddEntriesFrom(input, _repeated_rough_codec);
          break;
        }
        case 16: {
          RoughFreeTimes = input.ReadInt32();
          break;
        }
        case 24: {
          RoughNormalTimes = input.ReadInt32();
          break;
        }
        case 32: {
          RoughSpecialTimes = input.ReadInt32();
          break;
        }
        case 42: {
          if (item_ == null) {
            item_ = new global::ItemPb();
          }
          input.ReadMessage(item_);
          break;
        }
      }
    }
  }

}

/// <summary>
///原石敲击
/// </summary>
public sealed partial class RoughHitReq : pb::IMessage<RoughHitReq> {
  private static readonly pb::MessageParser<RoughHitReq> _parser = new pb::MessageParser<RoughHitReq>(() => new RoughHitReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoughHitReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughHitReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughHitReq(RoughHitReq other) : this() {
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughHitReq Clone() {
    return new RoughHitReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 2;
  private int srl_;
  /// <summary>
  ///int32 times=1; //敲击次数 1 5 10
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoughHitReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoughHitReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoughHitReq other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 16: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RoughHitResp : pb::IMessage<RoughHitResp> {
  private static readonly pb::MessageParser<RoughHitResp> _parser = new pb::MessageParser<RoughHitResp>(() => new RoughHitResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoughHitResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughHitResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughHitResp(RoughHitResp other) : this() {
    Rough = other.rough_ != null ? other.Rough.Clone() : null;
    Treasure = other.treasure_ != null ? other.Treasure.Clone() : null;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughHitResp Clone() {
    return new RoughHitResp(this);
  }

  /// <summary>Field number for the "rough" field.</summary>
  public const int RoughFieldNumber = 1;
  private global::RoughPb rough_;
  /// <summary>
  ///当前原石最新数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoughPb Rough {
    get { return rough_; }
    set {
      rough_ = value;
    }
  }

  /// <summary>Field number for the "treasure" field.</summary>
  public const int TreasureFieldNumber = 2;
  private global::TreasurePb treasure_;
  /// <summary>
  ///获得的法宝
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TreasurePb Treasure {
    get { return treasure_; }
    set {
      treasure_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoughHitResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoughHitResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Rough, other.Rough)) return false;
    if (!object.Equals(Treasure, other.Treasure)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (rough_ != null) hash ^= Rough.GetHashCode();
    if (treasure_ != null) hash ^= Treasure.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (rough_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Rough);
    }
    if (treasure_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Treasure);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (rough_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rough);
    }
    if (treasure_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Treasure);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoughHitResp other) {
    if (other == null) {
      return;
    }
    if (other.rough_ != null) {
      if (rough_ == null) {
        rough_ = new global::RoughPb();
      }
      Rough.MergeFrom(other.Rough);
    }
    if (other.treasure_ != null) {
      if (treasure_ == null) {
        treasure_ = new global::TreasurePb();
      }
      Treasure.MergeFrom(other.Treasure);
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (rough_ == null) {
            rough_ = new global::RoughPb();
          }
          input.ReadMessage(rough_);
          break;
        }
        case 18: {
          if (treasure_ == null) {
            treasure_ = new global::TreasurePb();
          }
          input.ReadMessage(treasure_);
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///法宝列表
/// </summary>
public sealed partial class TreasureListReq : pb::IMessage<TreasureListReq> {
  private static readonly pb::MessageParser<TreasureListReq> _parser = new pb::MessageParser<TreasureListReq>(() => new TreasureListReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasureListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureListReq(TreasureListReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureListReq Clone() {
    return new TreasureListReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasureListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasureListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasureListReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class TreasureListResp : pb::IMessage<TreasureListResp> {
  private static readonly pb::MessageParser<TreasureListResp> _parser = new pb::MessageParser<TreasureListResp>(() => new TreasureListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasureListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureListResp(TreasureListResp other) : this() {
    treasure_ = other.treasure_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureListResp Clone() {
    return new TreasureListResp(this);
  }

  /// <summary>Field number for the "treasure" field.</summary>
  public const int TreasureFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TreasurePb> _repeated_treasure_codec
      = pb::FieldCodec.ForMessage(10, global::TreasurePb.Parser);
  private readonly pbc::RepeatedField<global::TreasurePb> treasure_ = new pbc::RepeatedField<global::TreasurePb>();
  /// <summary>
  ///获得的法宝
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TreasurePb> Treasure {
    get { return treasure_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasureListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasureListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!treasure_.Equals(other.treasure_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= treasure_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    treasure_.WriteTo(output, _repeated_treasure_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += treasure_.CalculateSize(_repeated_treasure_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasureListResp other) {
    if (other == null) {
      return;
    }
    treasure_.Add(other.treasure_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          treasure_.AddEntriesFrom(input, _repeated_treasure_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///法宝升级
/// </summary>
public sealed partial class TreasureUpReq : pb::IMessage<TreasureUpReq> {
  private static readonly pb::MessageParser<TreasureUpReq> _parser = new pb::MessageParser<TreasureUpReq>(() => new TreasureUpReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasureUpReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureUpReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureUpReq(TreasureUpReq other) : this() {
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureUpReq Clone() {
    return new TreasureUpReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasureUpReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasureUpReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasureUpReq other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TreasureUpResp : pb::IMessage<TreasureUpResp> {
  private static readonly pb::MessageParser<TreasureUpResp> _parser = new pb::MessageParser<TreasureUpResp>(() => new TreasureUpResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasureUpResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureUpResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureUpResp(TreasureUpResp other) : this() {
    Treasure = other.treasure_ != null ? other.Treasure.Clone() : null;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureUpResp Clone() {
    return new TreasureUpResp(this);
  }

  /// <summary>Field number for the "treasure" field.</summary>
  public const int TreasureFieldNumber = 1;
  private global::TreasurePb treasure_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TreasurePb Treasure {
    get { return treasure_; }
    set {
      treasure_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasureUpResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasureUpResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Treasure, other.Treasure)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (treasure_ != null) hash ^= Treasure.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (treasure_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Treasure);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (treasure_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Treasure);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasureUpResp other) {
    if (other == null) {
      return;
    }
    if (other.treasure_ != null) {
      if (treasure_ == null) {
        treasure_ = new global::TreasurePb();
      }
      Treasure.MergeFrom(other.Treasure);
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (treasure_ == null) {
            treasure_ = new global::TreasurePb();
          }
          input.ReadMessage(treasure_);
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///图鉴列表
/// </summary>
public sealed partial class TreasureBookListReq : pb::IMessage<TreasureBookListReq> {
  private static readonly pb::MessageParser<TreasureBookListReq> _parser = new pb::MessageParser<TreasureBookListReq>(() => new TreasureBookListReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasureBookListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureBookListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureBookListReq(TreasureBookListReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureBookListReq Clone() {
    return new TreasureBookListReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasureBookListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasureBookListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasureBookListReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class TreasureBookListResp : pb::IMessage<TreasureBookListResp> {
  private static readonly pb::MessageParser<TreasureBookListResp> _parser = new pb::MessageParser<TreasureBookListResp>(() => new TreasureBookListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasureBookListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureBookListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureBookListResp(TreasureBookListResp other) : this() {
    treasureid_ = other.treasureid_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureBookListResp Clone() {
    return new TreasureBookListResp(this);
  }

  /// <summary>Field number for the "treasureid" field.</summary>
  public const int TreasureidFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_treasureid_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> treasureid_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Treasureid {
    get { return treasureid_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasureBookListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasureBookListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!treasureid_.Equals(other.treasureid_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= treasureid_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    treasureid_.WriteTo(output, _repeated_treasureid_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += treasureid_.CalculateSize(_repeated_treasureid_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasureBookListResp other) {
    if (other == null) {
      return;
    }
    treasureid_.Add(other.treasureid_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          treasureid_.AddEntriesFrom(input, _repeated_treasureid_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///法宝分解
/// </summary>
public sealed partial class TreasureDecomposeReq : pb::IMessage<TreasureDecomposeReq> {
  private static readonly pb::MessageParser<TreasureDecomposeReq> _parser = new pb::MessageParser<TreasureDecomposeReq>(() => new TreasureDecomposeReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasureDecomposeReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureDecomposeReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureDecomposeReq(TreasureDecomposeReq other) : this() {
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureDecomposeReq Clone() {
    return new TreasureDecomposeReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasureDecomposeReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasureDecomposeReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasureDecomposeReq other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TreasureDecomposeResp : pb::IMessage<TreasureDecomposeResp> {
  private static readonly pb::MessageParser<TreasureDecomposeResp> _parser = new pb::MessageParser<TreasureDecomposeResp>(() => new TreasureDecomposeResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasureDecomposeResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureDecomposeResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureDecomposeResp(TreasureDecomposeResp other) : this() {
    srl_ = other.srl_;
    addItem_ = other.addItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureDecomposeResp Clone() {
    return new TreasureDecomposeResp(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "addItem" field.</summary>
  public const int AddItemFieldNumber = 2;
  private static readonly pbc::MapField<int, long>.Codec _map_addItem_codec
      = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt64(16), 18);
  private readonly pbc::MapField<int, long> addItem_ = new pbc::MapField<int, long>();
  /// <summary>
  ///增加的道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, long> AddItem {
    get { return addItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasureDecomposeResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasureDecomposeResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    if (!AddItem.Equals(other.AddItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    hash ^= AddItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
    addItem_.WriteTo(output, _map_addItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    size += addItem_.CalculateSize(_map_addItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasureDecomposeResp other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    addItem_.Add(other.addItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
        case 18: {
          addItem_.AddEntriesFrom(input, _map_addItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///法宝装备
/// </summary>
public sealed partial class TreasureEquipReq : pb::IMessage<TreasureEquipReq> {
  private static readonly pb::MessageParser<TreasureEquipReq> _parser = new pb::MessageParser<TreasureEquipReq>(() => new TreasureEquipReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasureEquipReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureEquipReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureEquipReq(TreasureEquipReq other) : this() {
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureEquipReq Clone() {
    return new TreasureEquipReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasureEquipReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasureEquipReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasureEquipReq other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TreasureEquipResp : pb::IMessage<TreasureEquipResp> {
  private static readonly pb::MessageParser<TreasureEquipResp> _parser = new pb::MessageParser<TreasureEquipResp>(() => new TreasureEquipResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasureEquipResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureEquipResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureEquipResp(TreasureEquipResp other) : this() {
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureEquipResp Clone() {
    return new TreasureEquipResp(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasureEquipResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasureEquipResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasureEquipResp other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///法宝升阶
/// </summary>
public sealed partial class TreasureStepReq : pb::IMessage<TreasureStepReq> {
  private static readonly pb::MessageParser<TreasureStepReq> _parser = new pb::MessageParser<TreasureStepReq>(() => new TreasureStepReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasureStepReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureStepReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureStepReq(TreasureStepReq other) : this() {
    srl_ = other.srl_;
    costItem_ = other.costItem_.Clone();
    costTreasureSrl_ = other.costTreasureSrl_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureStepReq Clone() {
    return new TreasureStepReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "costItem" field.</summary>
  public const int CostItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_costItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> costItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///消耗的道具 itemid,num
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> CostItem {
    get { return costItem_; }
  }

  /// <summary>Field number for the "costTreasureSrl" field.</summary>
  public const int CostTreasureSrlFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_costTreasureSrl_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> costTreasureSrl_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///消耗的法宝srl ,不重复的
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CostTreasureSrl {
    get { return costTreasureSrl_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasureStepReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasureStepReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    if (!CostItem.Equals(other.CostItem)) return false;
    if(!costTreasureSrl_.Equals(other.costTreasureSrl_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    hash ^= CostItem.GetHashCode();
    hash ^= costTreasureSrl_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
    costItem_.WriteTo(output, _map_costItem_codec);
    costTreasureSrl_.WriteTo(output, _repeated_costTreasureSrl_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    size += costItem_.CalculateSize(_map_costItem_codec);
    size += costTreasureSrl_.CalculateSize(_repeated_costTreasureSrl_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasureStepReq other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    costItem_.Add(other.costItem_);
    costTreasureSrl_.Add(other.costTreasureSrl_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
        case 18: {
          costItem_.AddEntriesFrom(input, _map_costItem_codec);
          break;
        }
        case 26:
        case 24: {
          costTreasureSrl_.AddEntriesFrom(input, _repeated_costTreasureSrl_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TreasureStepResp : pb::IMessage<TreasureStepResp> {
  private static readonly pb::MessageParser<TreasureStepResp> _parser = new pb::MessageParser<TreasureStepResp>(() => new TreasureStepResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasureStepResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureStepResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureStepResp(TreasureStepResp other) : this() {
    Treasure = other.treasure_ != null ? other.Treasure.Clone() : null;
    Item = other.item_ != null ? other.Item.Clone() : null;
    treasureList_ = other.treasureList_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasureStepResp Clone() {
    return new TreasureStepResp(this);
  }

  /// <summary>Field number for the "treasure" field.</summary>
  public const int TreasureFieldNumber = 1;
  private global::TreasurePb treasure_;
  /// <summary>
  ///升阶后的法宝
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TreasurePb Treasure {
    get { return treasure_; }
    set {
      treasure_ = value;
    }
  }

  /// <summary>Field number for the "item" field.</summary>
  public const int ItemFieldNumber = 2;
  private global::ItemPb item_;
  /// <summary>
  ///当前所有道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ItemPb Item {
    get { return item_; }
    set {
      item_ = value;
    }
  }

  /// <summary>Field number for the "treasureList" field.</summary>
  public const int TreasureListFieldNumber = 3;
  private static readonly pb::FieldCodec<global::TreasurePb> _repeated_treasureList_codec
      = pb::FieldCodec.ForMessage(26, global::TreasurePb.Parser);
  private readonly pbc::RepeatedField<global::TreasurePb> treasureList_ = new pbc::RepeatedField<global::TreasurePb>();
  /// <summary>
  ///当前所有法宝
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TreasurePb> TreasureList {
    get { return treasureList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasureStepResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasureStepResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Treasure, other.Treasure)) return false;
    if (!object.Equals(Item, other.Item)) return false;
    if(!treasureList_.Equals(other.treasureList_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (treasure_ != null) hash ^= Treasure.GetHashCode();
    if (item_ != null) hash ^= Item.GetHashCode();
    hash ^= treasureList_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (treasure_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Treasure);
    }
    if (item_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Item);
    }
    treasureList_.WriteTo(output, _repeated_treasureList_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (treasure_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Treasure);
    }
    if (item_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
    }
    size += treasureList_.CalculateSize(_repeated_treasureList_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasureStepResp other) {
    if (other == null) {
      return;
    }
    if (other.treasure_ != null) {
      if (treasure_ == null) {
        treasure_ = new global::TreasurePb();
      }
      Treasure.MergeFrom(other.Treasure);
    }
    if (other.item_ != null) {
      if (item_ == null) {
        item_ = new global::ItemPb();
      }
      Item.MergeFrom(other.Item);
    }
    treasureList_.Add(other.treasureList_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (treasure_ == null) {
            treasure_ = new global::TreasurePb();
          }
          input.ReadMessage(treasure_);
          break;
        }
        case 18: {
          if (item_ == null) {
            item_ = new global::ItemPb();
          }
          input.ReadMessage(item_);
          break;
        }
        case 26: {
          treasureList_.AddEntriesFrom(input, _repeated_treasureList_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///矿脉列表 --req nil
/// </summary>
public sealed partial class MineListResp : pb::IMessage<MineListResp> {
  private static readonly pb::MessageParser<MineListResp> _parser = new pb::MessageParser<MineListResp>(() => new MineListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MineListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MineListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MineListResp(MineListResp other) : this() {
    Mine = other.mine_ != null ? other.Mine.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MineListResp Clone() {
    return new MineListResp(this);
  }

  /// <summary>Field number for the "mine" field.</summary>
  public const int MineFieldNumber = 1;
  private global::MinePb mine_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MinePb Mine {
    get { return mine_; }
    set {
      mine_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MineListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MineListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Mine, other.Mine)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (mine_ != null) hash ^= Mine.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (mine_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Mine);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (mine_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mine);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MineListResp other) {
    if (other == null) {
      return;
    }
    if (other.mine_ != null) {
      if (mine_ == null) {
        mine_ = new global::MinePb();
      }
      Mine.MergeFrom(other.Mine);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (mine_ == null) {
            mine_ = new global::MinePb();
          }
          input.ReadMessage(mine_);
          break;
        }
      }
    }
  }

}

/// <summary>
///矿脉奖励领取 --req nil
/// </summary>
public sealed partial class MineRewardGetResp : pb::IMessage<MineRewardGetResp> {
  private static readonly pb::MessageParser<MineRewardGetResp> _parser = new pb::MessageParser<MineRewardGetResp>(() => new MineRewardGetResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MineRewardGetResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MineRewardGetResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MineRewardGetResp(MineRewardGetResp other) : this() {
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MineRewardGetResp Clone() {
    return new MineRewardGetResp(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///ItemPb reward=1; 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MineRewardGetResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MineRewardGetResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MineRewardGetResp other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///矿脉放置法宝
/// </summary>
public sealed partial class MinePutTreasureReq : pb::IMessage<MinePutTreasureReq> {
  private static readonly pb::MessageParser<MinePutTreasureReq> _parser = new pb::MessageParser<MinePutTreasureReq>(() => new MinePutTreasureReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MinePutTreasureReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MinePutTreasureReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MinePutTreasureReq(MinePutTreasureReq other) : this() {
    pos_ = other.pos_;
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MinePutTreasureReq Clone() {
    return new MinePutTreasureReq(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private int pos_;
  /// <summary>
  /// 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 2;
  private int srl_;
  /// <summary>
  ///法宝srl
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MinePutTreasureReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MinePutTreasureReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pos != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
    if (Srl != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MinePutTreasureReq other) {
    if (other == null) {
      return;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
        case 16: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MinePutTreasureResp : pb::IMessage<MinePutTreasureResp> {
  private static readonly pb::MessageParser<MinePutTreasureResp> _parser = new pb::MessageParser<MinePutTreasureResp>(() => new MinePutTreasureResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MinePutTreasureResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MinePutTreasureResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MinePutTreasureResp(MinePutTreasureResp other) : this() {
    pos_ = other.pos_;
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MinePutTreasureResp Clone() {
    return new MinePutTreasureResp(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private int pos_;
  /// <summary>
  /// 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 2;
  private int srl_;
  /// <summary>
  ///法宝srl
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MinePutTreasureResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MinePutTreasureResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pos != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
    if (Srl != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MinePutTreasureResp other) {
    if (other == null) {
      return;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
        case 16: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///矿脉原石敲击
/// </summary>
public sealed partial class MineRoughHitReq : pb::IMessage<MineRoughHitReq> {
  private static readonly pb::MessageParser<MineRoughHitReq> _parser = new pb::MessageParser<MineRoughHitReq>(() => new MineRoughHitReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MineRoughHitReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MineRoughHitReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MineRoughHitReq(MineRoughHitReq other) : this() {
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MineRoughHitReq Clone() {
    return new MineRoughHitReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 2;
  private int srl_;
  /// <summary>
  ///int32 times=1; //敲击次数 1 5 10
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MineRoughHitReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MineRoughHitReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MineRoughHitReq other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 16: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MineRoughHitResp : pb::IMessage<MineRoughHitResp> {
  private static readonly pb::MessageParser<MineRoughHitResp> _parser = new pb::MessageParser<MineRoughHitResp>(() => new MineRoughHitResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MineRoughHitResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TreasureReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MineRoughHitResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MineRoughHitResp(MineRoughHitResp other) : this() {
    Rough = other.rough_ != null ? other.Rough.Clone() : null;
    Treasure = other.treasure_ != null ? other.Treasure.Clone() : null;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MineRoughHitResp Clone() {
    return new MineRoughHitResp(this);
  }

  /// <summary>Field number for the "rough" field.</summary>
  public const int RoughFieldNumber = 1;
  private global::RoughPb rough_;
  /// <summary>
  ///当前原石最新数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoughPb Rough {
    get { return rough_; }
    set {
      rough_ = value;
    }
  }

  /// <summary>Field number for the "treasure" field.</summary>
  public const int TreasureFieldNumber = 2;
  private global::TreasurePb treasure_;
  /// <summary>
  ///获得的法宝
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TreasurePb Treasure {
    get { return treasure_; }
    set {
      treasure_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MineRoughHitResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MineRoughHitResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Rough, other.Rough)) return false;
    if (!object.Equals(Treasure, other.Treasure)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (rough_ != null) hash ^= Rough.GetHashCode();
    if (treasure_ != null) hash ^= Treasure.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (rough_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Rough);
    }
    if (treasure_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Treasure);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (rough_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rough);
    }
    if (treasure_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Treasure);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MineRoughHitResp other) {
    if (other == null) {
      return;
    }
    if (other.rough_ != null) {
      if (rough_ == null) {
        rough_ = new global::RoughPb();
      }
      Rough.MergeFrom(other.Rough);
    }
    if (other.treasure_ != null) {
      if (treasure_ == null) {
        treasure_ = new global::TreasurePb();
      }
      Treasure.MergeFrom(other.Treasure);
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (rough_ == null) {
            rough_ = new global::RoughPb();
          }
          input.ReadMessage(rough_);
          break;
        }
        case 18: {
          if (treasure_ == null) {
            treasure_ = new global::TreasurePb();
          }
          input.ReadMessage(treasure_);
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
