// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guild.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from guild.proto</summary>
public static partial class GuildReflection {

  #region Descriptor
  /// <summary>File descriptor for guild.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GuildReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtndWlsZC5wcm90bxoKYmVhbi5wcm90byIOCgxHdWlsZEluZm9SZXEixgEK",
          "DUd1aWxkSW5mb1Jlc3ASEQoJbGVhdmVUaW1lGAEgASgDEhcKBWd1aWxkGAIg",
          "ASgLMgguR3VpbGRQYhIkCgdhcHBsaWVzGAMgASgLMhMuR3VpbGRBcHBseVBs",
          "YXllclBiEigKBXRhc2tzGAQgAygLMhkuR3VpbGRJbmZvUmVzcC5UYXNrc0Vu",
          "dHJ5GjkKClRhc2tzRW50cnkSCwoDa2V5GAEgASgFEhoKBXZhbHVlGAIgASgL",
          "MgsuTWFpblRhc2tQYjoCOAEiFAoSR3VpbGRTZWFyY2hMaXN0UmVxIi8KE0d1",
          "aWxkU2VhcmNoTGlzdFJlc3ASGAoGZ3VpbGRzGAEgAygLMgguR3VpbGRQYiIn",
          "ChdHdWlsZEZ1enp5U2VhcmNoTGlzdFJlcRIMCgRuYW1lGAEgASgJIjQKGEd1",
          "aWxkRnV6enlTZWFyY2hMaXN0UmVzcBIYCgZndWlsZHMYASADKAsyCC5HdWls",
          "ZFBiIlYKDkd1aWxkQ3JlYXRlUmVxEgwKBG5hbWUYASABKAkSDwoHYmFkZ2VJ",
          "ZBgCIAEoBRIOCgZub3RpY2UYAyABKAkSFQoNYWxsb3dBdXRvSm9pbhgEIAEo",
          "BSKTAQoPR3VpbGRDcmVhdGVSZXNwEhcKBWd1aWxkGAEgASgLMgguR3VpbGRQ",
          "YhI0CgpjaGFuZ2VJdGVtGAIgAygLMiAuR3VpbGRDcmVhdGVSZXNwLkNoYW5n",
          "ZUl0ZW1FbnRyeRoxCg9DaGFuZ2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0K",
          "BXZhbHVlGAIgASgFOgI4ASIRCg9HdWlsZE1lbWJlcnNSZXEigwEKEEd1aWxk",
          "TWVtYmVyc1Jlc3ASLwoHbWVtYmVycxgBIAMoCzIeLkd1aWxkTWVtYmVyc1Jl",
          "c3AuTWVtYmVyc0VudHJ5Gj4KDE1lbWJlcnNFbnRyeRILCgNrZXkYASABKAUS",
          "HQoFdmFsdWUYAiABKAsyDi5HdWlsZE1lbWJlclBiOgI4ASIUChJHdWlsZFJh",
          "bmRvbUpvaW5SZXEiLgoTR3VpbGRSYW5kb21Kb2luUmVzcBIXCgVndWlsZBgB",
          "IAEoCzIILkd1aWxkUGIiIQoTR3VpbGREaXNzb2x1dGlvblJlcRIKCgJpZBgB",
          "IAEoBSI1ChRHdWlsZERpc3NvbHV0aW9uUmVzcBIKCgJpZBgBIAEoBRIRCgls",
          "ZWF2ZVRpbWUYAiABKAMiGwoNR3VpbGRMZWF2ZVJlcRIKCgJpZBgBIAEoBSKL",
          "AQoOR3VpbGRMZWF2ZVJlc3ASEQoJbGVhdmVUaW1lGAEgASgDEjMKCmNoYW5n",
          "ZUl0ZW0YAiADKAsyHy5HdWlsZExlYXZlUmVzcC5DaGFuZ2VJdGVtRW50cnka",
          "MQoPQ2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEo",
          "BToCOAEiLwoPR3VpbGRLaWNrT3V0UmVxEgoKAmlkGAEgASgFEhAKCG1lbWJl",
          "cklkGAIgASgFIj0KEEd1aWxkS2lja091dFJlc3ASEAoIbWVtYmVySWQYASAB",
          "KAUSFwoFZ3VpbGQYAiABKAsyCC5HdWlsZFBiIhoKDEd1aWxkSm9pblJlcRIK",
          "CgJpZBgBIAEoBSIvCg1HdWlsZEpvaW5SZXNwEh4KB2FwcGxpZXMYASADKAsy",
          "DS5HdWlsZEFwcGx5UGIiEgoQR3VpbGRKb2luTGlzdFJlcSIzChFHdWlsZEpv",
          "aW5MaXN0UmVzcBIeCgdhcHBsaWVzGAEgAygLMg0uR3VpbGRBcHBseVBiIkUK",
          "E0d1aWxkQXBwbHlSZWZ1c2VSZXESCwoDb3B0GAEgASgFEhAKCG1lbWJlcklk",
          "GAIgASgFEg8KB2FwcGx5SWQYAyABKAMiRgoUR3VpbGRBcHBseVJlZnVzZVJl",
          "c3ASCwoDb3B0GAEgASgFEhAKCG1lbWJlcklkGAIgASgFEg8KB2FwcGx5SWQY",
          "AyABKAMiMwoTR3VpbGRBcHBseUFjY2VwdFJlcRILCgNnaWQYASABKAUSDwoH",
          "YXBwbHlJZBgCIAEoAyJlChRHdWlsZEFwcGx5QWNjZXB0UmVzcBIjCgtndWls",
          "ZE1lbWJlchgBIAMoCzIOLkd1aWxkTWVtYmVyUGISFwoFZ3VpbGQYAiABKAsy",
          "CC5HdWlsZFBiEg8KB2FwcGx5SWQYAyABKAMiWQoPR3VpbGRTZXR0aW5nUmVx",
          "EgoKAmlkGAEgASgFEhQKDGpvaW5NaW5MZXZlbBgCIAEoBRINCgVvcmRlchgD",
          "IAEoBRIVCg1hbGxvd0F1dG9Kb2luGAQgASgFIisKEEd1aWxkU2V0dGluZ1Jl",
          "c3ASFwoFZ3VpbGQYASABKAsyCC5HdWlsZFBiIkYKFEd1aWxkQ2hhbmdlRHV0",
          "aWVzUmVxEhAKCG1lbWJlcklkGAEgASgFEhAKCGR1dGllc0lkGAIgASgFEgoK",
          "AmlkGAMgASgFIj0KFUd1aWxkQ2hhbmdlRHV0aWVzUmVzcBIkCgxndWlsZE1l",
          "bWJlcnMYASADKAsyDi5HdWlsZE1lbWJlclBiIg4KDEd1aWxkUmFua1JlcSIp",
          "Cg1HdWlsZFJhbmtSZXNwEhgKBmd1aWxkcxgBIAMoCzIILkd1aWxkUGIiGQoX",
          "R3VpbGRBc3Npc3RhbmNlU3RhcnRSZXEilgEKGEd1aWxkQXNzaXN0YW5jZVN0",
          "YXJ0UmVzcBI5Cghhc3Npc01hcBgBIAMoCzInLkd1aWxkQXNzaXN0YW5jZVN0",
          "YXJ0UmVzcC5Bc3Npc01hcEVudHJ5Gj8KDUFzc2lzTWFwRW50cnkSCwoDa2V5",
          "GAEgASgFEh0KBXZhbHVlGAIgASgLMg4uR3VpbGRBc3Npc3RQYjoCOAEiFAoS",
          "R3VpbGRBc3Npc3RMaXN0UmVxIowBChNHdWlsZEFzc2lzdExpc3RSZXNwEjQK",
          "CGFzc2lzTWFwGAEgAygLMiIuR3VpbGRBc3Npc3RMaXN0UmVzcC5Bc3Npc01h",
          "cEVudHJ5Gj8KDUFzc2lzTWFwRW50cnkSCwoDa2V5GAEgASgFEh0KBXZhbHVl",
          "GAIgASgLMg4uR3VpbGRBc3Npc3RQYjoCOAEiHQoOR3VpbGRBc3Npc3RSZXES",
          "CwoDcElkGAEgASgFIoQBCg9HdWlsZEFzc2lzdFJlc3ASMAoIYXNzaXNNYXAY",
          "ASADKAsyHi5HdWlsZEFzc2lzdFJlc3AuQXNzaXNNYXBFbnRyeRo/Cg1Bc3Np",
          "c01hcEVudHJ5EgsKA2tleRgBIAEoBRIdCgV2YWx1ZRgCIAEoCzIOLkd1aWxk",
          "QXNzaXN0UGI6AjgBIhgKFkd1aWxkQm9zc0luaXRpYWxpemVSZXEi/QEKF0d1",
          "aWxkQm9zc0luaXRpYWxpemVSZXNwEg4KBmJvc3NIcBgBIAEoAxIYChBib3Nz",
          "QmF0dGxlTnVtYmVyGAIgASgFEjwKCmNoYW5nZUl0ZW0YAyADKAsyKC5HdWls",
          "ZEJvc3NJbml0aWFsaXplUmVzcC5DaGFuZ2VJdGVtRW50cnkSEgoKYm9zc0Rh",
          "bWFnZRgEIAEoAxIXCg9Jc1JlY2VpdmVQcml6ZXMYBSABKAUSGgoSZ3VpbGRD",
          "cnVzYWRlQm9zc0lkGAYgASgFGjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNrZXkY",
          "ASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIjUKF0d1aWxkQm9zc0JhdHRsZVN0",
          "YXJ0UmVxEhoKEmd1aWxkQ3J1c2FkZUJvc3NJZBgBIAEoBSJEChhHdWlsZEJv",
          "c3NCYXR0bGVTdGFydFJlc3ASGgoSZ3VpbGRDcnVzYWRlQm9zc0lkGAEgASgF",
          "EgwKBHNlZWQYAiABKAUiZQoVR3VpbGRCb3NzQmF0dGxlRW5kUmVxEg4KBnJl",
          "c3VsdBgBIAEoBRIaChJndWlsZENydXNhZGVCb3NzSWQYAiABKAUSDAoEc2Vl",
          "ZBgDIAEoBRISCgpib3NzRGFtYWdlGAQgASgDIt4BChZHdWlsZEJvc3NCYXR0",
          "bGVFbmRSZXNwEjsKCmNoYW5nZUl0ZW0YASADKAsyJy5HdWlsZEJvc3NCYXR0",
          "bGVFbmRSZXNwLkNoYW5nZUl0ZW1FbnRyeRIaChJndWlsZENydXNhZGVCb3Nz",
          "SWQYAiABKAUSHAoEc2VsZhgDIAEoCzIOLkd1aWxkTWVtYmVyUGISGgoEYm9z",
          "cxgEIAEoCzIMLkd1aWxkQm9zc1BiGjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNr",
          "ZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIikKJ0d1aWxkQm9zc0FjY3Vt",
          "dWxhdGVkRGFtYWdlUmV3YXJkTGlzdFJlcSKaAQooR3VpbGRCb3NzQWNjdW11",
          "bGF0ZWREYW1hZ2VSZXdhcmRMaXN0UmVzcBJBCgR0YXNrGAEgAygLMjMuR3Vp",
          "bGRCb3NzQWNjdW11bGF0ZWREYW1hZ2VSZXdhcmRMaXN0UmVzcC5UYXNrRW50",
          "cnkaKwoJVGFza0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToC",
          "OAEiOgoqR3VpbGRCb3NzQWNjdW11bGF0ZWREYW1hZ2VSZXdhcmRSZWNlaXZl",
          "UmVxEgwKBHRhc2sYASABKAUi0AEKK0d1aWxkQm9zc0FjY3VtdWxhdGVkRGFt",
          "YWdlUmV3YXJkUmVjZWl2ZVJlc3ASUAoKY2hhbmdlSXRlbRgBIAMoCzI8Lkd1",
          "aWxkQm9zc0FjY3VtdWxhdGVkRGFtYWdlUmV3YXJkUmVjZWl2ZVJlc3AuQ2hh",
          "bmdlSXRlbUVudHJ5EhwKBHNlbGYYAiABKAsyDi5HdWlsZE1lbWJlclBiGjEK",
          "D0NoYW5nZUl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6",
          "AjgBIh8KHUd1aWxkQm9zc0NydXNhZGVSZXdhcmRMaXN0UmVxIpgCCh5HdWls",
          "ZEJvc3NDcnVzYWRlUmV3YXJkTGlzdFJlc3ASPQoHUmVjb3JkcxgBIAMoCzIs",
          "Lkd1aWxkQm9zc0NydXNhZGVSZXdhcmRMaXN0UmVzcC5SZWNvcmRzRW50cnkS",
          "QwoKY2hhbmdlSXRlbRgCIAMoCzIvLkd1aWxkQm9zc0NydXNhZGVSZXdhcmRM",
          "aXN0UmVzcC5DaGFuZ2VJdGVtRW50cnkaPwoMUmVjb3Jkc0VudHJ5EgsKA2tl",
          "eRgBIAEoBRIeCgV2YWx1ZRgCIAEoCzIPLkd1aWxkUmVjb3Jkc1BiOgI4ARox",
          "Cg9DaGFuZ2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgF",
          "OgI4ASIiCiBHdWlsZEJvc3NDcnVzYWRlUmV3YXJkUmVjZWl2ZVJlcSK8AQoh",
          "R3VpbGRCb3NzQ3J1c2FkZVJld2FyZFJlY2VpdmVSZXNwEkYKCmNoYW5nZUl0",
          "ZW0YASADKAsyMi5HdWlsZEJvc3NDcnVzYWRlUmV3YXJkUmVjZWl2ZVJlc3Au",
          "Q2hhbmdlSXRlbUVudHJ5EhwKBHNlbGYYAiABKAsyDi5HdWlsZE1lbWJlclBi",
          "GjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiAB",
          "KAU6AjgBIiMKDkd1aWxkUmVuYW1lUmVxEhEKCWd1aWxkTmFtZRgBIAEoCSKN",
          "AQoPR3VpbGRSZW5hbWVSZXNwEhEKCWd1aWxkTmFtZRgBIAEoCRI0CgpjaGFu",
          "Z2VJdGVtGAIgAygLMiAuR3VpbGRSZW5hbWVSZXNwLkNoYW5nZUl0ZW1FbnRy",
          "eRoxCg9DaGFuZ2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
          "ASgFOgI4ASIlCg5HdWlsZE5vdGljZVJlcRITCgtndWlsZE5vdGljZRgBIAEo",
          "CSImCg9HdWlsZE5vdGljZVJlc3ASEwoLZ3VpbGROb3RpY2UYASABKAkiIAoN",
          "R3VpbGRCYWRnZVJlcRIPCgdiYWRnZUlkGAEgASgFIiEKDkd1aWxkQmFkZ2VS",
          "ZXNwEg8KB2JhZGdlSWQYASABKAVCFQoKY29tLmNiLm1zZ0IHUEJHdWlsZGIG",
          "cHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildInfoReq), global::GuildInfoReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildInfoResp), global::GuildInfoResp.Parser, new[]{ "LeaveTime", "Guild", "Applies", "Tasks" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildSearchListReq), global::GuildSearchListReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildSearchListResp), global::GuildSearchListResp.Parser, new[]{ "Guilds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildFuzzySearchListReq), global::GuildFuzzySearchListReq.Parser, new[]{ "Name" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildFuzzySearchListResp), global::GuildFuzzySearchListResp.Parser, new[]{ "Guilds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildCreateReq), global::GuildCreateReq.Parser, new[]{ "Name", "BadgeId", "Notice", "AllowAutoJoin" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildCreateResp), global::GuildCreateResp.Parser, new[]{ "Guild", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildMembersReq), global::GuildMembersReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildMembersResp), global::GuildMembersResp.Parser, new[]{ "Members" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildRandomJoinReq), global::GuildRandomJoinReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildRandomJoinResp), global::GuildRandomJoinResp.Parser, new[]{ "Guild" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildDissolutionReq), global::GuildDissolutionReq.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildDissolutionResp), global::GuildDissolutionResp.Parser, new[]{ "Id", "LeaveTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildLeaveReq), global::GuildLeaveReq.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildLeaveResp), global::GuildLeaveResp.Parser, new[]{ "LeaveTime", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildKickOutReq), global::GuildKickOutReq.Parser, new[]{ "Id", "MemberId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildKickOutResp), global::GuildKickOutResp.Parser, new[]{ "MemberId", "Guild" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildJoinReq), global::GuildJoinReq.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildJoinResp), global::GuildJoinResp.Parser, new[]{ "Applies" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildJoinListReq), global::GuildJoinListReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildJoinListResp), global::GuildJoinListResp.Parser, new[]{ "Applies" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildApplyRefuseReq), global::GuildApplyRefuseReq.Parser, new[]{ "Opt", "MemberId", "ApplyId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildApplyRefuseResp), global::GuildApplyRefuseResp.Parser, new[]{ "Opt", "MemberId", "ApplyId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildApplyAcceptReq), global::GuildApplyAcceptReq.Parser, new[]{ "Gid", "ApplyId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildApplyAcceptResp), global::GuildApplyAcceptResp.Parser, new[]{ "GuildMember", "Guild", "ApplyId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildSettingReq), global::GuildSettingReq.Parser, new[]{ "Id", "JoinMinLevel", "Order", "AllowAutoJoin" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildSettingResp), global::GuildSettingResp.Parser, new[]{ "Guild" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildChangeDutiesReq), global::GuildChangeDutiesReq.Parser, new[]{ "MemberId", "DutiesId", "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildChangeDutiesResp), global::GuildChangeDutiesResp.Parser, new[]{ "GuildMembers" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildRankReq), global::GuildRankReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildRankResp), global::GuildRankResp.Parser, new[]{ "Guilds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildAssistanceStartReq), global::GuildAssistanceStartReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildAssistanceStartResp), global::GuildAssistanceStartResp.Parser, new[]{ "AssisMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildAssistListReq), global::GuildAssistListReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildAssistListResp), global::GuildAssistListResp.Parser, new[]{ "AssisMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildAssistReq), global::GuildAssistReq.Parser, new[]{ "PId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildAssistResp), global::GuildAssistResp.Parser, new[]{ "AssisMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossInitializeReq), global::GuildBossInitializeReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossInitializeResp), global::GuildBossInitializeResp.Parser, new[]{ "BossHp", "BossBattleNumber", "ChangeItem", "BossDamage", "IsReceivePrizes", "GuildCrusadeBossId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossBattleStartReq), global::GuildBossBattleStartReq.Parser, new[]{ "GuildCrusadeBossId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossBattleStartResp), global::GuildBossBattleStartResp.Parser, new[]{ "GuildCrusadeBossId", "Seed" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossBattleEndReq), global::GuildBossBattleEndReq.Parser, new[]{ "Result", "GuildCrusadeBossId", "Seed", "BossDamage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossBattleEndResp), global::GuildBossBattleEndResp.Parser, new[]{ "ChangeItem", "GuildCrusadeBossId", "Self", "Boss" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossAccumulatedDamageRewardListReq), global::GuildBossAccumulatedDamageRewardListReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossAccumulatedDamageRewardListResp), global::GuildBossAccumulatedDamageRewardListResp.Parser, new[]{ "Task" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossAccumulatedDamageRewardReceiveReq), global::GuildBossAccumulatedDamageRewardReceiveReq.Parser, new[]{ "Task" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossAccumulatedDamageRewardReceiveResp), global::GuildBossAccumulatedDamageRewardReceiveResp.Parser, new[]{ "ChangeItem", "Self" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossCrusadeRewardListReq), global::GuildBossCrusadeRewardListReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossCrusadeRewardListResp), global::GuildBossCrusadeRewardListResp.Parser, new[]{ "Records", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossCrusadeRewardReceiveReq), global::GuildBossCrusadeRewardReceiveReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossCrusadeRewardReceiveResp), global::GuildBossCrusadeRewardReceiveResp.Parser, new[]{ "ChangeItem", "Self" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildRenameReq), global::GuildRenameReq.Parser, new[]{ "GuildName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildRenameResp), global::GuildRenameResp.Parser, new[]{ "GuildName", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildNoticeReq), global::GuildNoticeReq.Parser, new[]{ "GuildNotice" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildNoticeResp), global::GuildNoticeResp.Parser, new[]{ "GuildNotice" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBadgeReq), global::GuildBadgeReq.Parser, new[]{ "BadgeId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBadgeResp), global::GuildBadgeResp.Parser, new[]{ "BadgeId" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class GuildInfoReq : pb::IMessage<GuildInfoReq> {
  private static readonly pb::MessageParser<GuildInfoReq> _parser = new pb::MessageParser<GuildInfoReq>(() => new GuildInfoReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildInfoReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildInfoReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildInfoReq(GuildInfoReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildInfoReq Clone() {
    return new GuildInfoReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildInfoReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildInfoReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildInfoReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GuildInfoResp : pb::IMessage<GuildInfoResp> {
  private static readonly pb::MessageParser<GuildInfoResp> _parser = new pb::MessageParser<GuildInfoResp>(() => new GuildInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildInfoResp(GuildInfoResp other) : this() {
    leaveTime_ = other.leaveTime_;
    Guild = other.guild_ != null ? other.Guild.Clone() : null;
    Applies = other.applies_ != null ? other.Applies.Clone() : null;
    tasks_ = other.tasks_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildInfoResp Clone() {
    return new GuildInfoResp(this);
  }

  /// <summary>Field number for the "leaveTime" field.</summary>
  public const int LeaveTimeFieldNumber = 1;
  private long leaveTime_;
  /// <summary>
  ///退出时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LeaveTime {
    get { return leaveTime_; }
    set {
      leaveTime_ = value;
    }
  }

  /// <summary>Field number for the "guild" field.</summary>
  public const int GuildFieldNumber = 2;
  private global::GuildPb guild_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildPb Guild {
    get { return guild_; }
    set {
      guild_ = value;
    }
  }

  /// <summary>Field number for the "applies" field.</summary>
  public const int AppliesFieldNumber = 3;
  private global::GuildApplyPlayerPb applies_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildApplyPlayerPb Applies {
    get { return applies_; }
    set {
      applies_ = value;
    }
  }

  /// <summary>Field number for the "tasks" field.</summary>
  public const int TasksFieldNumber = 4;
  private static readonly pbc::MapField<int, global::MainTaskPb>.Codec _map_tasks_codec
      = new pbc::MapField<int, global::MainTaskPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::MainTaskPb.Parser), 34);
  private readonly pbc::MapField<int, global::MainTaskPb> tasks_ = new pbc::MapField<int, global::MainTaskPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::MainTaskPb> Tasks {
    get { return tasks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LeaveTime != other.LeaveTime) return false;
    if (!object.Equals(Guild, other.Guild)) return false;
    if (!object.Equals(Applies, other.Applies)) return false;
    if (!Tasks.Equals(other.Tasks)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LeaveTime != 0L) hash ^= LeaveTime.GetHashCode();
    if (guild_ != null) hash ^= Guild.GetHashCode();
    if (applies_ != null) hash ^= Applies.GetHashCode();
    hash ^= Tasks.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LeaveTime != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LeaveTime);
    }
    if (guild_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Guild);
    }
    if (applies_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Applies);
    }
    tasks_.WriteTo(output, _map_tasks_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LeaveTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeaveTime);
    }
    if (guild_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guild);
    }
    if (applies_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Applies);
    }
    size += tasks_.CalculateSize(_map_tasks_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.LeaveTime != 0L) {
      LeaveTime = other.LeaveTime;
    }
    if (other.guild_ != null) {
      if (guild_ == null) {
        guild_ = new global::GuildPb();
      }
      Guild.MergeFrom(other.Guild);
    }
    if (other.applies_ != null) {
      if (applies_ == null) {
        applies_ = new global::GuildApplyPlayerPb();
      }
      Applies.MergeFrom(other.Applies);
    }
    tasks_.Add(other.tasks_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LeaveTime = input.ReadInt64();
          break;
        }
        case 18: {
          if (guild_ == null) {
            guild_ = new global::GuildPb();
          }
          input.ReadMessage(guild_);
          break;
        }
        case 26: {
          if (applies_ == null) {
            applies_ = new global::GuildApplyPlayerPb();
          }
          input.ReadMessage(applies_);
          break;
        }
        case 34: {
          tasks_.AddEntriesFrom(input, _map_tasks_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///搜索列表--查询界面
/// </summary>
public sealed partial class GuildSearchListReq : pb::IMessage<GuildSearchListReq> {
  private static readonly pb::MessageParser<GuildSearchListReq> _parser = new pb::MessageParser<GuildSearchListReq>(() => new GuildSearchListReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildSearchListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildSearchListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildSearchListReq(GuildSearchListReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildSearchListReq Clone() {
    return new GuildSearchListReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildSearchListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildSearchListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildSearchListReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GuildSearchListResp : pb::IMessage<GuildSearchListResp> {
  private static readonly pb::MessageParser<GuildSearchListResp> _parser = new pb::MessageParser<GuildSearchListResp>(() => new GuildSearchListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildSearchListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildSearchListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildSearchListResp(GuildSearchListResp other) : this() {
    guilds_ = other.guilds_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildSearchListResp Clone() {
    return new GuildSearchListResp(this);
  }

  /// <summary>Field number for the "guilds" field.</summary>
  public const int GuildsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::GuildPb> _repeated_guilds_codec
      = pb::FieldCodec.ForMessage(10, global::GuildPb.Parser);
  private readonly pbc::RepeatedField<global::GuildPb> guilds_ = new pbc::RepeatedField<global::GuildPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GuildPb> Guilds {
    get { return guilds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildSearchListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildSearchListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!guilds_.Equals(other.guilds_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= guilds_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    guilds_.WriteTo(output, _repeated_guilds_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += guilds_.CalculateSize(_repeated_guilds_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildSearchListResp other) {
    if (other == null) {
      return;
    }
    guilds_.Add(other.guilds_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          guilds_.AddEntriesFrom(input, _repeated_guilds_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///名字模糊搜索
/// </summary>
public sealed partial class GuildFuzzySearchListReq : pb::IMessage<GuildFuzzySearchListReq> {
  private static readonly pb::MessageParser<GuildFuzzySearchListReq> _parser = new pb::MessageParser<GuildFuzzySearchListReq>(() => new GuildFuzzySearchListReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildFuzzySearchListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildFuzzySearchListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildFuzzySearchListReq(GuildFuzzySearchListReq other) : this() {
    name_ = other.name_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildFuzzySearchListReq Clone() {
    return new GuildFuzzySearchListReq(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildFuzzySearchListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildFuzzySearchListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildFuzzySearchListReq other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildFuzzySearchListResp : pb::IMessage<GuildFuzzySearchListResp> {
  private static readonly pb::MessageParser<GuildFuzzySearchListResp> _parser = new pb::MessageParser<GuildFuzzySearchListResp>(() => new GuildFuzzySearchListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildFuzzySearchListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildFuzzySearchListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildFuzzySearchListResp(GuildFuzzySearchListResp other) : this() {
    guilds_ = other.guilds_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildFuzzySearchListResp Clone() {
    return new GuildFuzzySearchListResp(this);
  }

  /// <summary>Field number for the "guilds" field.</summary>
  public const int GuildsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::GuildPb> _repeated_guilds_codec
      = pb::FieldCodec.ForMessage(10, global::GuildPb.Parser);
  private readonly pbc::RepeatedField<global::GuildPb> guilds_ = new pbc::RepeatedField<global::GuildPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GuildPb> Guilds {
    get { return guilds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildFuzzySearchListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildFuzzySearchListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!guilds_.Equals(other.guilds_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= guilds_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    guilds_.WriteTo(output, _repeated_guilds_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += guilds_.CalculateSize(_repeated_guilds_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildFuzzySearchListResp other) {
    if (other == null) {
      return;
    }
    guilds_.Add(other.guilds_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          guilds_.AddEntriesFrom(input, _repeated_guilds_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///创建
/// </summary>
public sealed partial class GuildCreateReq : pb::IMessage<GuildCreateReq> {
  private static readonly pb::MessageParser<GuildCreateReq> _parser = new pb::MessageParser<GuildCreateReq>(() => new GuildCreateReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildCreateReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildCreateReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildCreateReq(GuildCreateReq other) : this() {
    name_ = other.name_;
    badgeId_ = other.badgeId_;
    notice_ = other.notice_;
    allowAutoJoin_ = other.allowAutoJoin_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildCreateReq Clone() {
    return new GuildCreateReq(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  /// <summary>
  ///名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "badgeId" field.</summary>
  public const int BadgeIdFieldNumber = 2;
  private int badgeId_;
  /// <summary>
  ///徽章id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BadgeId {
    get { return badgeId_; }
    set {
      badgeId_ = value;
    }
  }

  /// <summary>Field number for the "notice" field.</summary>
  public const int NoticeFieldNumber = 3;
  private string notice_ = "";
  /// <summary>
  ///公告
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Notice {
    get { return notice_; }
    set {
      notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "allowAutoJoin" field.</summary>
  public const int AllowAutoJoinFieldNumber = 4;
  private int allowAutoJoin_;
  /// <summary>
  ///1允许自动加入
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AllowAutoJoin {
    get { return allowAutoJoin_; }
    set {
      allowAutoJoin_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildCreateReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildCreateReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (BadgeId != other.BadgeId) return false;
    if (Notice != other.Notice) return false;
    if (AllowAutoJoin != other.AllowAutoJoin) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (BadgeId != 0) hash ^= BadgeId.GetHashCode();
    if (Notice.Length != 0) hash ^= Notice.GetHashCode();
    if (AllowAutoJoin != 0) hash ^= AllowAutoJoin.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (BadgeId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BadgeId);
    }
    if (Notice.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Notice);
    }
    if (AllowAutoJoin != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AllowAutoJoin);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (BadgeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BadgeId);
    }
    if (Notice.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
    }
    if (AllowAutoJoin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllowAutoJoin);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildCreateReq other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.BadgeId != 0) {
      BadgeId = other.BadgeId;
    }
    if (other.Notice.Length != 0) {
      Notice = other.Notice;
    }
    if (other.AllowAutoJoin != 0) {
      AllowAutoJoin = other.AllowAutoJoin;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          BadgeId = input.ReadInt32();
          break;
        }
        case 26: {
          Notice = input.ReadString();
          break;
        }
        case 32: {
          AllowAutoJoin = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildCreateResp : pb::IMessage<GuildCreateResp> {
  private static readonly pb::MessageParser<GuildCreateResp> _parser = new pb::MessageParser<GuildCreateResp>(() => new GuildCreateResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildCreateResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildCreateResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildCreateResp(GuildCreateResp other) : this() {
    Guild = other.guild_ != null ? other.Guild.Clone() : null;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildCreateResp Clone() {
    return new GuildCreateResp(this);
  }

  /// <summary>Field number for the "guild" field.</summary>
  public const int GuildFieldNumber = 1;
  private global::GuildPb guild_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildPb Guild {
    get { return guild_; }
    set {
      guild_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildCreateResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildCreateResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Guild, other.Guild)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (guild_ != null) hash ^= Guild.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (guild_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Guild);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (guild_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guild);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildCreateResp other) {
    if (other == null) {
      return;
    }
    if (other.guild_ != null) {
      if (guild_ == null) {
        guild_ = new global::GuildPb();
      }
      Guild.MergeFrom(other.Guild);
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (guild_ == null) {
            guild_ = new global::GuildPb();
          }
          input.ReadMessage(guild_);
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GuildMembersReq : pb::IMessage<GuildMembersReq> {
  private static readonly pb::MessageParser<GuildMembersReq> _parser = new pb::MessageParser<GuildMembersReq>(() => new GuildMembersReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildMembersReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildMembersReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildMembersReq(GuildMembersReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildMembersReq Clone() {
    return new GuildMembersReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildMembersReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildMembersReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildMembersReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GuildMembersResp : pb::IMessage<GuildMembersResp> {
  private static readonly pb::MessageParser<GuildMembersResp> _parser = new pb::MessageParser<GuildMembersResp>(() => new GuildMembersResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildMembersResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildMembersResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildMembersResp(GuildMembersResp other) : this() {
    members_ = other.members_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildMembersResp Clone() {
    return new GuildMembersResp(this);
  }

  /// <summary>Field number for the "members" field.</summary>
  public const int MembersFieldNumber = 1;
  private static readonly pbc::MapField<int, global::GuildMemberPb>.Codec _map_members_codec
      = new pbc::MapField<int, global::GuildMemberPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::GuildMemberPb.Parser), 10);
  private readonly pbc::MapField<int, global::GuildMemberPb> members_ = new pbc::MapField<int, global::GuildMemberPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::GuildMemberPb> Members {
    get { return members_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildMembersResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildMembersResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Members.Equals(other.Members)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Members.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    members_.WriteTo(output, _map_members_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += members_.CalculateSize(_map_members_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildMembersResp other) {
    if (other == null) {
      return;
    }
    members_.Add(other.members_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          members_.AddEntriesFrom(input, _map_members_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///随机加入
/// </summary>
public sealed partial class GuildRandomJoinReq : pb::IMessage<GuildRandomJoinReq> {
  private static readonly pb::MessageParser<GuildRandomJoinReq> _parser = new pb::MessageParser<GuildRandomJoinReq>(() => new GuildRandomJoinReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildRandomJoinReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRandomJoinReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRandomJoinReq(GuildRandomJoinReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRandomJoinReq Clone() {
    return new GuildRandomJoinReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildRandomJoinReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildRandomJoinReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildRandomJoinReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GuildRandomJoinResp : pb::IMessage<GuildRandomJoinResp> {
  private static readonly pb::MessageParser<GuildRandomJoinResp> _parser = new pb::MessageParser<GuildRandomJoinResp>(() => new GuildRandomJoinResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildRandomJoinResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRandomJoinResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRandomJoinResp(GuildRandomJoinResp other) : this() {
    Guild = other.guild_ != null ? other.Guild.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRandomJoinResp Clone() {
    return new GuildRandomJoinResp(this);
  }

  /// <summary>Field number for the "guild" field.</summary>
  public const int GuildFieldNumber = 1;
  private global::GuildPb guild_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildPb Guild {
    get { return guild_; }
    set {
      guild_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildRandomJoinResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildRandomJoinResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Guild, other.Guild)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (guild_ != null) hash ^= Guild.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (guild_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Guild);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (guild_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guild);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildRandomJoinResp other) {
    if (other == null) {
      return;
    }
    if (other.guild_ != null) {
      if (guild_ == null) {
        guild_ = new global::GuildPb();
      }
      Guild.MergeFrom(other.Guild);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (guild_ == null) {
            guild_ = new global::GuildPb();
          }
          input.ReadMessage(guild_);
          break;
        }
      }
    }
  }

}

/// <summary>
///解散
/// </summary>
public sealed partial class GuildDissolutionReq : pb::IMessage<GuildDissolutionReq> {
  private static readonly pb::MessageParser<GuildDissolutionReq> _parser = new pb::MessageParser<GuildDissolutionReq>(() => new GuildDissolutionReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildDissolutionReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildDissolutionReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildDissolutionReq(GuildDissolutionReq other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildDissolutionReq Clone() {
    return new GuildDissolutionReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildDissolutionReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildDissolutionReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildDissolutionReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildDissolutionResp : pb::IMessage<GuildDissolutionResp> {
  private static readonly pb::MessageParser<GuildDissolutionResp> _parser = new pb::MessageParser<GuildDissolutionResp>(() => new GuildDissolutionResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildDissolutionResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildDissolutionResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildDissolutionResp(GuildDissolutionResp other) : this() {
    id_ = other.id_;
    leaveTime_ = other.leaveTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildDissolutionResp Clone() {
    return new GuildDissolutionResp(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "leaveTime" field.</summary>
  public const int LeaveTimeFieldNumber = 2;
  private long leaveTime_;
  /// <summary>
  ///退出时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LeaveTime {
    get { return leaveTime_; }
    set {
      leaveTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildDissolutionResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildDissolutionResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (LeaveTime != other.LeaveTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (LeaveTime != 0L) hash ^= LeaveTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (LeaveTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(LeaveTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (LeaveTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeaveTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildDissolutionResp other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.LeaveTime != 0L) {
      LeaveTime = other.LeaveTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          LeaveTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///退出
/// </summary>
public sealed partial class GuildLeaveReq : pb::IMessage<GuildLeaveReq> {
  private static readonly pb::MessageParser<GuildLeaveReq> _parser = new pb::MessageParser<GuildLeaveReq>(() => new GuildLeaveReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildLeaveReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildLeaveReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildLeaveReq(GuildLeaveReq other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildLeaveReq Clone() {
    return new GuildLeaveReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildLeaveReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildLeaveReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildLeaveReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildLeaveResp : pb::IMessage<GuildLeaveResp> {
  private static readonly pb::MessageParser<GuildLeaveResp> _parser = new pb::MessageParser<GuildLeaveResp>(() => new GuildLeaveResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildLeaveResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildLeaveResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildLeaveResp(GuildLeaveResp other) : this() {
    leaveTime_ = other.leaveTime_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildLeaveResp Clone() {
    return new GuildLeaveResp(this);
  }

  /// <summary>Field number for the "leaveTime" field.</summary>
  public const int LeaveTimeFieldNumber = 1;
  private long leaveTime_;
  /// <summary>
  ///退出时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LeaveTime {
    get { return leaveTime_; }
    set {
      leaveTime_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildLeaveResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildLeaveResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LeaveTime != other.LeaveTime) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LeaveTime != 0L) hash ^= LeaveTime.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LeaveTime != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LeaveTime);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LeaveTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeaveTime);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildLeaveResp other) {
    if (other == null) {
      return;
    }
    if (other.LeaveTime != 0L) {
      LeaveTime = other.LeaveTime;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LeaveTime = input.ReadInt64();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///踢人
/// </summary>
public sealed partial class GuildKickOutReq : pb::IMessage<GuildKickOutReq> {
  private static readonly pb::MessageParser<GuildKickOutReq> _parser = new pb::MessageParser<GuildKickOutReq>(() => new GuildKickOutReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildKickOutReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildKickOutReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildKickOutReq(GuildKickOutReq other) : this() {
    id_ = other.id_;
    memberId_ = other.memberId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildKickOutReq Clone() {
    return new GuildKickOutReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "memberId" field.</summary>
  public const int MemberIdFieldNumber = 2;
  private int memberId_;
  /// <summary>
  ///成员id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MemberId {
    get { return memberId_; }
    set {
      memberId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildKickOutReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildKickOutReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (MemberId != other.MemberId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (MemberId != 0) hash ^= MemberId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (MemberId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MemberId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (MemberId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildKickOutReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.MemberId != 0) {
      MemberId = other.MemberId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          MemberId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildKickOutResp : pb::IMessage<GuildKickOutResp> {
  private static readonly pb::MessageParser<GuildKickOutResp> _parser = new pb::MessageParser<GuildKickOutResp>(() => new GuildKickOutResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildKickOutResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildKickOutResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildKickOutResp(GuildKickOutResp other) : this() {
    memberId_ = other.memberId_;
    Guild = other.guild_ != null ? other.Guild.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildKickOutResp Clone() {
    return new GuildKickOutResp(this);
  }

  /// <summary>Field number for the "memberId" field.</summary>
  public const int MemberIdFieldNumber = 1;
  private int memberId_;
  /// <summary>
  ///成员id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MemberId {
    get { return memberId_; }
    set {
      memberId_ = value;
    }
  }

  /// <summary>Field number for the "guild" field.</summary>
  public const int GuildFieldNumber = 2;
  private global::GuildPb guild_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildPb Guild {
    get { return guild_; }
    set {
      guild_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildKickOutResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildKickOutResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MemberId != other.MemberId) return false;
    if (!object.Equals(Guild, other.Guild)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MemberId != 0) hash ^= MemberId.GetHashCode();
    if (guild_ != null) hash ^= Guild.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MemberId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MemberId);
    }
    if (guild_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Guild);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MemberId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberId);
    }
    if (guild_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guild);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildKickOutResp other) {
    if (other == null) {
      return;
    }
    if (other.MemberId != 0) {
      MemberId = other.MemberId;
    }
    if (other.guild_ != null) {
      if (guild_ == null) {
        guild_ = new global::GuildPb();
      }
      Guild.MergeFrom(other.Guild);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          MemberId = input.ReadInt32();
          break;
        }
        case 18: {
          if (guild_ == null) {
            guild_ = new global::GuildPb();
          }
          input.ReadMessage(guild_);
          break;
        }
      }
    }
  }

}

/// <summary>
///申请加入
/// </summary>
public sealed partial class GuildJoinReq : pb::IMessage<GuildJoinReq> {
  private static readonly pb::MessageParser<GuildJoinReq> _parser = new pb::MessageParser<GuildJoinReq>(() => new GuildJoinReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildJoinReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildJoinReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildJoinReq(GuildJoinReq other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildJoinReq Clone() {
    return new GuildJoinReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///公会id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildJoinReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildJoinReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildJoinReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildJoinResp : pb::IMessage<GuildJoinResp> {
  private static readonly pb::MessageParser<GuildJoinResp> _parser = new pb::MessageParser<GuildJoinResp>(() => new GuildJoinResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildJoinResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildJoinResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildJoinResp(GuildJoinResp other) : this() {
    applies_ = other.applies_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildJoinResp Clone() {
    return new GuildJoinResp(this);
  }

  /// <summary>Field number for the "applies" field.</summary>
  public const int AppliesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::GuildApplyPb> _repeated_applies_codec
      = pb::FieldCodec.ForMessage(10, global::GuildApplyPb.Parser);
  private readonly pbc::RepeatedField<global::GuildApplyPb> applies_ = new pbc::RepeatedField<global::GuildApplyPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GuildApplyPb> Applies {
    get { return applies_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildJoinResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildJoinResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!applies_.Equals(other.applies_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= applies_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    applies_.WriteTo(output, _repeated_applies_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += applies_.CalculateSize(_repeated_applies_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildJoinResp other) {
    if (other == null) {
      return;
    }
    applies_.Add(other.applies_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          applies_.AddEntriesFrom(input, _repeated_applies_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///申请加入列表
/// </summary>
public sealed partial class GuildJoinListReq : pb::IMessage<GuildJoinListReq> {
  private static readonly pb::MessageParser<GuildJoinListReq> _parser = new pb::MessageParser<GuildJoinListReq>(() => new GuildJoinListReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildJoinListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildJoinListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildJoinListReq(GuildJoinListReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildJoinListReq Clone() {
    return new GuildJoinListReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildJoinListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildJoinListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildJoinListReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GuildJoinListResp : pb::IMessage<GuildJoinListResp> {
  private static readonly pb::MessageParser<GuildJoinListResp> _parser = new pb::MessageParser<GuildJoinListResp>(() => new GuildJoinListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildJoinListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildJoinListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildJoinListResp(GuildJoinListResp other) : this() {
    applies_ = other.applies_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildJoinListResp Clone() {
    return new GuildJoinListResp(this);
  }

  /// <summary>Field number for the "applies" field.</summary>
  public const int AppliesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::GuildApplyPb> _repeated_applies_codec
      = pb::FieldCodec.ForMessage(10, global::GuildApplyPb.Parser);
  private readonly pbc::RepeatedField<global::GuildApplyPb> applies_ = new pbc::RepeatedField<global::GuildApplyPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GuildApplyPb> Applies {
    get { return applies_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildJoinListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildJoinListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!applies_.Equals(other.applies_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= applies_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    applies_.WriteTo(output, _repeated_applies_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += applies_.CalculateSize(_repeated_applies_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildJoinListResp other) {
    if (other == null) {
      return;
    }
    applies_.Add(other.applies_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          applies_.AddEntriesFrom(input, _repeated_applies_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///拒绝
/// </summary>
public sealed partial class GuildApplyRefuseReq : pb::IMessage<GuildApplyRefuseReq> {
  private static readonly pb::MessageParser<GuildApplyRefuseReq> _parser = new pb::MessageParser<GuildApplyRefuseReq>(() => new GuildApplyRefuseReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildApplyRefuseReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyRefuseReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyRefuseReq(GuildApplyRefuseReq other) : this() {
    opt_ = other.opt_;
    memberId_ = other.memberId_;
    applyId_ = other.applyId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyRefuseReq Clone() {
    return new GuildApplyRefuseReq(this);
  }

  /// <summary>Field number for the "opt" field.</summary>
  public const int OptFieldNumber = 1;
  private int opt_;
  /// <summary>
  ///0:拒绝单个人，1：一键决绝
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Opt {
    get { return opt_; }
    set {
      opt_ = value;
    }
  }

  /// <summary>Field number for the "memberId" field.</summary>
  public const int MemberIdFieldNumber = 2;
  private int memberId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MemberId {
    get { return memberId_; }
    set {
      memberId_ = value;
    }
  }

  /// <summary>Field number for the "applyId" field.</summary>
  public const int ApplyIdFieldNumber = 3;
  private long applyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ApplyId {
    get { return applyId_; }
    set {
      applyId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildApplyRefuseReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildApplyRefuseReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Opt != other.Opt) return false;
    if (MemberId != other.MemberId) return false;
    if (ApplyId != other.ApplyId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Opt != 0) hash ^= Opt.GetHashCode();
    if (MemberId != 0) hash ^= MemberId.GetHashCode();
    if (ApplyId != 0L) hash ^= ApplyId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Opt != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Opt);
    }
    if (MemberId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MemberId);
    }
    if (ApplyId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(ApplyId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Opt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opt);
    }
    if (MemberId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberId);
    }
    if (ApplyId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplyId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildApplyRefuseReq other) {
    if (other == null) {
      return;
    }
    if (other.Opt != 0) {
      Opt = other.Opt;
    }
    if (other.MemberId != 0) {
      MemberId = other.MemberId;
    }
    if (other.ApplyId != 0L) {
      ApplyId = other.ApplyId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Opt = input.ReadInt32();
          break;
        }
        case 16: {
          MemberId = input.ReadInt32();
          break;
        }
        case 24: {
          ApplyId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildApplyRefuseResp : pb::IMessage<GuildApplyRefuseResp> {
  private static readonly pb::MessageParser<GuildApplyRefuseResp> _parser = new pb::MessageParser<GuildApplyRefuseResp>(() => new GuildApplyRefuseResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildApplyRefuseResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyRefuseResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyRefuseResp(GuildApplyRefuseResp other) : this() {
    opt_ = other.opt_;
    memberId_ = other.memberId_;
    applyId_ = other.applyId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyRefuseResp Clone() {
    return new GuildApplyRefuseResp(this);
  }

  /// <summary>Field number for the "opt" field.</summary>
  public const int OptFieldNumber = 1;
  private int opt_;
  /// <summary>
  ///0:拒绝单个人，1：一键决绝
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Opt {
    get { return opt_; }
    set {
      opt_ = value;
    }
  }

  /// <summary>Field number for the "memberId" field.</summary>
  public const int MemberIdFieldNumber = 2;
  private int memberId_;
  /// <summary>
  ///拒绝的id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MemberId {
    get { return memberId_; }
    set {
      memberId_ = value;
    }
  }

  /// <summary>Field number for the "applyId" field.</summary>
  public const int ApplyIdFieldNumber = 3;
  private long applyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ApplyId {
    get { return applyId_; }
    set {
      applyId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildApplyRefuseResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildApplyRefuseResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Opt != other.Opt) return false;
    if (MemberId != other.MemberId) return false;
    if (ApplyId != other.ApplyId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Opt != 0) hash ^= Opt.GetHashCode();
    if (MemberId != 0) hash ^= MemberId.GetHashCode();
    if (ApplyId != 0L) hash ^= ApplyId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Opt != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Opt);
    }
    if (MemberId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MemberId);
    }
    if (ApplyId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(ApplyId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Opt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opt);
    }
    if (MemberId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberId);
    }
    if (ApplyId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplyId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildApplyRefuseResp other) {
    if (other == null) {
      return;
    }
    if (other.Opt != 0) {
      Opt = other.Opt;
    }
    if (other.MemberId != 0) {
      MemberId = other.MemberId;
    }
    if (other.ApplyId != 0L) {
      ApplyId = other.ApplyId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Opt = input.ReadInt32();
          break;
        }
        case 16: {
          MemberId = input.ReadInt32();
          break;
        }
        case 24: {
          ApplyId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///接受
/// </summary>
public sealed partial class GuildApplyAcceptReq : pb::IMessage<GuildApplyAcceptReq> {
  private static readonly pb::MessageParser<GuildApplyAcceptReq> _parser = new pb::MessageParser<GuildApplyAcceptReq>(() => new GuildApplyAcceptReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildApplyAcceptReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyAcceptReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyAcceptReq(GuildApplyAcceptReq other) : this() {
    gid_ = other.gid_;
    applyId_ = other.applyId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyAcceptReq Clone() {
    return new GuildApplyAcceptReq(this);
  }

  /// <summary>Field number for the "gid" field.</summary>
  public const int GidFieldNumber = 1;
  private int gid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gid {
    get { return gid_; }
    set {
      gid_ = value;
    }
  }

  /// <summary>Field number for the "applyId" field.</summary>
  public const int ApplyIdFieldNumber = 2;
  private long applyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ApplyId {
    get { return applyId_; }
    set {
      applyId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildApplyAcceptReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildApplyAcceptReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Gid != other.Gid) return false;
    if (ApplyId != other.ApplyId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Gid != 0) hash ^= Gid.GetHashCode();
    if (ApplyId != 0L) hash ^= ApplyId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Gid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Gid);
    }
    if (ApplyId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(ApplyId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Gid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gid);
    }
    if (ApplyId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplyId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildApplyAcceptReq other) {
    if (other == null) {
      return;
    }
    if (other.Gid != 0) {
      Gid = other.Gid;
    }
    if (other.ApplyId != 0L) {
      ApplyId = other.ApplyId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Gid = input.ReadInt32();
          break;
        }
        case 16: {
          ApplyId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildApplyAcceptResp : pb::IMessage<GuildApplyAcceptResp> {
  private static readonly pb::MessageParser<GuildApplyAcceptResp> _parser = new pb::MessageParser<GuildApplyAcceptResp>(() => new GuildApplyAcceptResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildApplyAcceptResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyAcceptResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyAcceptResp(GuildApplyAcceptResp other) : this() {
    guildMember_ = other.guildMember_.Clone();
    Guild = other.guild_ != null ? other.Guild.Clone() : null;
    applyId_ = other.applyId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyAcceptResp Clone() {
    return new GuildApplyAcceptResp(this);
  }

  /// <summary>Field number for the "guildMember" field.</summary>
  public const int GuildMemberFieldNumber = 1;
  private static readonly pb::FieldCodec<global::GuildMemberPb> _repeated_guildMember_codec
      = pb::FieldCodec.ForMessage(10, global::GuildMemberPb.Parser);
  private readonly pbc::RepeatedField<global::GuildMemberPb> guildMember_ = new pbc::RepeatedField<global::GuildMemberPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GuildMemberPb> GuildMember {
    get { return guildMember_; }
  }

  /// <summary>Field number for the "guild" field.</summary>
  public const int GuildFieldNumber = 2;
  private global::GuildPb guild_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildPb Guild {
    get { return guild_; }
    set {
      guild_ = value;
    }
  }

  /// <summary>Field number for the "applyId" field.</summary>
  public const int ApplyIdFieldNumber = 3;
  private long applyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ApplyId {
    get { return applyId_; }
    set {
      applyId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildApplyAcceptResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildApplyAcceptResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!guildMember_.Equals(other.guildMember_)) return false;
    if (!object.Equals(Guild, other.Guild)) return false;
    if (ApplyId != other.ApplyId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= guildMember_.GetHashCode();
    if (guild_ != null) hash ^= Guild.GetHashCode();
    if (ApplyId != 0L) hash ^= ApplyId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    guildMember_.WriteTo(output, _repeated_guildMember_codec);
    if (guild_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Guild);
    }
    if (ApplyId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(ApplyId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += guildMember_.CalculateSize(_repeated_guildMember_codec);
    if (guild_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guild);
    }
    if (ApplyId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplyId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildApplyAcceptResp other) {
    if (other == null) {
      return;
    }
    guildMember_.Add(other.guildMember_);
    if (other.guild_ != null) {
      if (guild_ == null) {
        guild_ = new global::GuildPb();
      }
      Guild.MergeFrom(other.Guild);
    }
    if (other.ApplyId != 0L) {
      ApplyId = other.ApplyId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          guildMember_.AddEntriesFrom(input, _repeated_guildMember_codec);
          break;
        }
        case 18: {
          if (guild_ == null) {
            guild_ = new global::GuildPb();
          }
          input.ReadMessage(guild_);
          break;
        }
        case 24: {
          ApplyId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// setting
/// </summary>
public sealed partial class GuildSettingReq : pb::IMessage<GuildSettingReq> {
  private static readonly pb::MessageParser<GuildSettingReq> _parser = new pb::MessageParser<GuildSettingReq>(() => new GuildSettingReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildSettingReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildSettingReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildSettingReq(GuildSettingReq other) : this() {
    id_ = other.id_;
    joinMinLevel_ = other.joinMinLevel_;
    order_ = other.order_;
    allowAutoJoin_ = other.allowAutoJoin_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildSettingReq Clone() {
    return new GuildSettingReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "joinMinLevel" field.</summary>
  public const int JoinMinLevelFieldNumber = 2;
  private int joinMinLevel_;
  /// <summary>
  ///入会最低等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int JoinMinLevel {
    get { return joinMinLevel_; }
    set {
      joinMinLevel_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 3;
  private int order_;
  /// <summary>
  /// 排序
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "allowAutoJoin" field.</summary>
  public const int AllowAutoJoinFieldNumber = 4;
  private int allowAutoJoin_;
  /// <summary>
  ///1允许自动加入 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AllowAutoJoin {
    get { return allowAutoJoin_; }
    set {
      allowAutoJoin_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildSettingReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildSettingReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (JoinMinLevel != other.JoinMinLevel) return false;
    if (Order != other.Order) return false;
    if (AllowAutoJoin != other.AllowAutoJoin) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (JoinMinLevel != 0) hash ^= JoinMinLevel.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (AllowAutoJoin != 0) hash ^= AllowAutoJoin.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (JoinMinLevel != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(JoinMinLevel);
    }
    if (Order != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Order);
    }
    if (AllowAutoJoin != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AllowAutoJoin);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (JoinMinLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinMinLevel);
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Order);
    }
    if (AllowAutoJoin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllowAutoJoin);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildSettingReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.JoinMinLevel != 0) {
      JoinMinLevel = other.JoinMinLevel;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.AllowAutoJoin != 0) {
      AllowAutoJoin = other.AllowAutoJoin;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          JoinMinLevel = input.ReadInt32();
          break;
        }
        case 24: {
          Order = input.ReadInt32();
          break;
        }
        case 32: {
          AllowAutoJoin = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildSettingResp : pb::IMessage<GuildSettingResp> {
  private static readonly pb::MessageParser<GuildSettingResp> _parser = new pb::MessageParser<GuildSettingResp>(() => new GuildSettingResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildSettingResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildSettingResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildSettingResp(GuildSettingResp other) : this() {
    Guild = other.guild_ != null ? other.Guild.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildSettingResp Clone() {
    return new GuildSettingResp(this);
  }

  /// <summary>Field number for the "guild" field.</summary>
  public const int GuildFieldNumber = 1;
  private global::GuildPb guild_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildPb Guild {
    get { return guild_; }
    set {
      guild_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildSettingResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildSettingResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Guild, other.Guild)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (guild_ != null) hash ^= Guild.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (guild_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Guild);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (guild_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guild);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildSettingResp other) {
    if (other == null) {
      return;
    }
    if (other.guild_ != null) {
      if (guild_ == null) {
        guild_ = new global::GuildPb();
      }
      Guild.MergeFrom(other.Guild);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (guild_ == null) {
            guild_ = new global::GuildPb();
          }
          input.ReadMessage(guild_);
          break;
        }
      }
    }
  }

}

/// <summary>
///职务更改
/// </summary>
public sealed partial class GuildChangeDutiesReq : pb::IMessage<GuildChangeDutiesReq> {
  private static readonly pb::MessageParser<GuildChangeDutiesReq> _parser = new pb::MessageParser<GuildChangeDutiesReq>(() => new GuildChangeDutiesReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildChangeDutiesReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildChangeDutiesReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildChangeDutiesReq(GuildChangeDutiesReq other) : this() {
    memberId_ = other.memberId_;
    dutiesId_ = other.dutiesId_;
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildChangeDutiesReq Clone() {
    return new GuildChangeDutiesReq(this);
  }

  /// <summary>Field number for the "memberId" field.</summary>
  public const int MemberIdFieldNumber = 1;
  private int memberId_;
  /// <summary>
  ///成员id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MemberId {
    get { return memberId_; }
    set {
      memberId_ = value;
    }
  }

  /// <summary>Field number for the "dutiesId" field.</summary>
  public const int DutiesIdFieldNumber = 2;
  private int dutiesId_;
  /// <summary>
  ///职务id （1会长，2副会长，3精英，4成员）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DutiesId {
    get { return dutiesId_; }
    set {
      dutiesId_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 3;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildChangeDutiesReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildChangeDutiesReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MemberId != other.MemberId) return false;
    if (DutiesId != other.DutiesId) return false;
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MemberId != 0) hash ^= MemberId.GetHashCode();
    if (DutiesId != 0) hash ^= DutiesId.GetHashCode();
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MemberId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MemberId);
    }
    if (DutiesId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DutiesId);
    }
    if (Id != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MemberId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberId);
    }
    if (DutiesId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DutiesId);
    }
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildChangeDutiesReq other) {
    if (other == null) {
      return;
    }
    if (other.MemberId != 0) {
      MemberId = other.MemberId;
    }
    if (other.DutiesId != 0) {
      DutiesId = other.DutiesId;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          MemberId = input.ReadInt32();
          break;
        }
        case 16: {
          DutiesId = input.ReadInt32();
          break;
        }
        case 24: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildChangeDutiesResp : pb::IMessage<GuildChangeDutiesResp> {
  private static readonly pb::MessageParser<GuildChangeDutiesResp> _parser = new pb::MessageParser<GuildChangeDutiesResp>(() => new GuildChangeDutiesResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildChangeDutiesResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildChangeDutiesResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildChangeDutiesResp(GuildChangeDutiesResp other) : this() {
    guildMembers_ = other.guildMembers_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildChangeDutiesResp Clone() {
    return new GuildChangeDutiesResp(this);
  }

  /// <summary>Field number for the "guildMembers" field.</summary>
  public const int GuildMembersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::GuildMemberPb> _repeated_guildMembers_codec
      = pb::FieldCodec.ForMessage(10, global::GuildMemberPb.Parser);
  private readonly pbc::RepeatedField<global::GuildMemberPb> guildMembers_ = new pbc::RepeatedField<global::GuildMemberPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GuildMemberPb> GuildMembers {
    get { return guildMembers_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildChangeDutiesResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildChangeDutiesResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!guildMembers_.Equals(other.guildMembers_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= guildMembers_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    guildMembers_.WriteTo(output, _repeated_guildMembers_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += guildMembers_.CalculateSize(_repeated_guildMembers_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildChangeDutiesResp other) {
    if (other == null) {
      return;
    }
    guildMembers_.Add(other.guildMembers_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          guildMembers_.AddEntriesFrom(input, _repeated_guildMembers_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///排行
/// </summary>
public sealed partial class GuildRankReq : pb::IMessage<GuildRankReq> {
  private static readonly pb::MessageParser<GuildRankReq> _parser = new pb::MessageParser<GuildRankReq>(() => new GuildRankReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildRankReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRankReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRankReq(GuildRankReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRankReq Clone() {
    return new GuildRankReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildRankReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildRankReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildRankReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GuildRankResp : pb::IMessage<GuildRankResp> {
  private static readonly pb::MessageParser<GuildRankResp> _parser = new pb::MessageParser<GuildRankResp>(() => new GuildRankResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildRankResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRankResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRankResp(GuildRankResp other) : this() {
    guilds_ = other.guilds_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRankResp Clone() {
    return new GuildRankResp(this);
  }

  /// <summary>Field number for the "guilds" field.</summary>
  public const int GuildsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::GuildPb> _repeated_guilds_codec
      = pb::FieldCodec.ForMessage(10, global::GuildPb.Parser);
  private readonly pbc::RepeatedField<global::GuildPb> guilds_ = new pbc::RepeatedField<global::GuildPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GuildPb> Guilds {
    get { return guilds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildRankResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildRankResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!guilds_.Equals(other.guilds_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= guilds_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    guilds_.WriteTo(output, _repeated_guilds_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += guilds_.CalculateSize(_repeated_guilds_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildRankResp other) {
    if (other == null) {
      return;
    }
    guilds_.Add(other.guilds_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          guilds_.AddEntriesFrom(input, _repeated_guilds_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///发起协助
/// </summary>
public sealed partial class GuildAssistanceStartReq : pb::IMessage<GuildAssistanceStartReq> {
  private static readonly pb::MessageParser<GuildAssistanceStartReq> _parser = new pb::MessageParser<GuildAssistanceStartReq>(() => new GuildAssistanceStartReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildAssistanceStartReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistanceStartReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistanceStartReq(GuildAssistanceStartReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistanceStartReq Clone() {
    return new GuildAssistanceStartReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildAssistanceStartReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildAssistanceStartReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildAssistanceStartReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GuildAssistanceStartResp : pb::IMessage<GuildAssistanceStartResp> {
  private static readonly pb::MessageParser<GuildAssistanceStartResp> _parser = new pb::MessageParser<GuildAssistanceStartResp>(() => new GuildAssistanceStartResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildAssistanceStartResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistanceStartResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistanceStartResp(GuildAssistanceStartResp other) : this() {
    assisMap_ = other.assisMap_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistanceStartResp Clone() {
    return new GuildAssistanceStartResp(this);
  }

  /// <summary>Field number for the "assisMap" field.</summary>
  public const int AssisMapFieldNumber = 1;
  private static readonly pbc::MapField<int, global::GuildAssistPb>.Codec _map_assisMap_codec
      = new pbc::MapField<int, global::GuildAssistPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::GuildAssistPb.Parser), 10);
  private readonly pbc::MapField<int, global::GuildAssistPb> assisMap_ = new pbc::MapField<int, global::GuildAssistPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::GuildAssistPb> AssisMap {
    get { return assisMap_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildAssistanceStartResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildAssistanceStartResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!AssisMap.Equals(other.AssisMap)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= AssisMap.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    assisMap_.WriteTo(output, _map_assisMap_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += assisMap_.CalculateSize(_map_assisMap_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildAssistanceStartResp other) {
    if (other == null) {
      return;
    }
    assisMap_.Add(other.assisMap_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          assisMap_.AddEntriesFrom(input, _map_assisMap_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GuildAssistListReq : pb::IMessage<GuildAssistListReq> {
  private static readonly pb::MessageParser<GuildAssistListReq> _parser = new pb::MessageParser<GuildAssistListReq>(() => new GuildAssistListReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildAssistListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistListReq(GuildAssistListReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistListReq Clone() {
    return new GuildAssistListReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildAssistListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildAssistListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildAssistListReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GuildAssistListResp : pb::IMessage<GuildAssistListResp> {
  private static readonly pb::MessageParser<GuildAssistListResp> _parser = new pb::MessageParser<GuildAssistListResp>(() => new GuildAssistListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildAssistListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistListResp(GuildAssistListResp other) : this() {
    assisMap_ = other.assisMap_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistListResp Clone() {
    return new GuildAssistListResp(this);
  }

  /// <summary>Field number for the "assisMap" field.</summary>
  public const int AssisMapFieldNumber = 1;
  private static readonly pbc::MapField<int, global::GuildAssistPb>.Codec _map_assisMap_codec
      = new pbc::MapField<int, global::GuildAssistPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::GuildAssistPb.Parser), 10);
  private readonly pbc::MapField<int, global::GuildAssistPb> assisMap_ = new pbc::MapField<int, global::GuildAssistPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::GuildAssistPb> AssisMap {
    get { return assisMap_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildAssistListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildAssistListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!AssisMap.Equals(other.AssisMap)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= AssisMap.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    assisMap_.WriteTo(output, _map_assisMap_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += assisMap_.CalculateSize(_map_assisMap_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildAssistListResp other) {
    if (other == null) {
      return;
    }
    assisMap_.Add(other.assisMap_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          assisMap_.AddEntriesFrom(input, _map_assisMap_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///协助
/// </summary>
public sealed partial class GuildAssistReq : pb::IMessage<GuildAssistReq> {
  private static readonly pb::MessageParser<GuildAssistReq> _parser = new pb::MessageParser<GuildAssistReq>(() => new GuildAssistReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildAssistReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistReq(GuildAssistReq other) : this() {
    pId_ = other.pId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistReq Clone() {
    return new GuildAssistReq(this);
  }

  /// <summary>Field number for the "pId" field.</summary>
  public const int PIdFieldNumber = 1;
  private int pId_;
  /// <summary>
  ///成员id 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PId {
    get { return pId_; }
    set {
      pId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildAssistReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildAssistReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PId != other.PId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PId != 0) hash ^= PId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildAssistReq other) {
    if (other == null) {
      return;
    }
    if (other.PId != 0) {
      PId = other.PId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildAssistResp : pb::IMessage<GuildAssistResp> {
  private static readonly pb::MessageParser<GuildAssistResp> _parser = new pb::MessageParser<GuildAssistResp>(() => new GuildAssistResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildAssistResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistResp(GuildAssistResp other) : this() {
    assisMap_ = other.assisMap_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistResp Clone() {
    return new GuildAssistResp(this);
  }

  /// <summary>Field number for the "assisMap" field.</summary>
  public const int AssisMapFieldNumber = 1;
  private static readonly pbc::MapField<int, global::GuildAssistPb>.Codec _map_assisMap_codec
      = new pbc::MapField<int, global::GuildAssistPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::GuildAssistPb.Parser), 10);
  private readonly pbc::MapField<int, global::GuildAssistPb> assisMap_ = new pbc::MapField<int, global::GuildAssistPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::GuildAssistPb> AssisMap {
    get { return assisMap_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildAssistResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildAssistResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!AssisMap.Equals(other.AssisMap)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= AssisMap.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    assisMap_.WriteTo(output, _map_assisMap_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += assisMap_.CalculateSize(_map_assisMap_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildAssistResp other) {
    if (other == null) {
      return;
    }
    assisMap_.Add(other.assisMap_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          assisMap_.AddEntriesFrom(input, _map_assisMap_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///Boss挑战初始化
/// </summary>
public sealed partial class GuildBossInitializeReq : pb::IMessage<GuildBossInitializeReq> {
  private static readonly pb::MessageParser<GuildBossInitializeReq> _parser = new pb::MessageParser<GuildBossInitializeReq>(() => new GuildBossInitializeReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossInitializeReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossInitializeReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossInitializeReq(GuildBossInitializeReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossInitializeReq Clone() {
    return new GuildBossInitializeReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossInitializeReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossInitializeReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossInitializeReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GuildBossInitializeResp : pb::IMessage<GuildBossInitializeResp> {
  private static readonly pb::MessageParser<GuildBossInitializeResp> _parser = new pb::MessageParser<GuildBossInitializeResp>(() => new GuildBossInitializeResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossInitializeResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossInitializeResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossInitializeResp(GuildBossInitializeResp other) : this() {
    bossHp_ = other.bossHp_;
    bossBattleNumber_ = other.bossBattleNumber_;
    changeItem_ = other.changeItem_.Clone();
    bossDamage_ = other.bossDamage_;
    isReceivePrizes_ = other.isReceivePrizes_;
    guildCrusadeBossId_ = other.guildCrusadeBossId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossInitializeResp Clone() {
    return new GuildBossInitializeResp(this);
  }

  /// <summary>Field number for the "bossHp" field.</summary>
  public const int BossHpFieldNumber = 1;
  private long bossHp_;
  /// <summary>
  ///boss血量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BossHp {
    get { return bossHp_; }
    set {
      bossHp_ = value;
    }
  }

  /// <summary>Field number for the "bossBattleNumber" field.</summary>
  public const int BossBattleNumberFieldNumber = 2;
  private int bossBattleNumber_;
  /// <summary>
  ///公会全体挑战Boss的总数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossBattleNumber {
    get { return bossBattleNumber_; }
    set {
      bossBattleNumber_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  /// 可以领取的讨伐奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "bossDamage" field.</summary>
  public const int BossDamageFieldNumber = 4;
  private long bossDamage_;
  /// <summary>
  ///自己的对boss造成值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BossDamage {
    get { return bossDamage_; }
    set {
      bossDamage_ = value;
    }
  }

  /// <summary>Field number for the "IsReceivePrizes" field.</summary>
  public const int IsReceivePrizesFieldNumber = 5;
  private int isReceivePrizes_;
  /// <summary>
  ///是否有可以领取的伤害奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsReceivePrizes {
    get { return isReceivePrizes_; }
    set {
      isReceivePrizes_ = value;
    }
  }

  /// <summary>Field number for the "guildCrusadeBossId" field.</summary>
  public const int GuildCrusadeBossIdFieldNumber = 6;
  private int guildCrusadeBossId_;
  /// <summary>
  ///配置表GuildCrusadeBoss id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuildCrusadeBossId {
    get { return guildCrusadeBossId_; }
    set {
      guildCrusadeBossId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossInitializeResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossInitializeResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BossHp != other.BossHp) return false;
    if (BossBattleNumber != other.BossBattleNumber) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (BossDamage != other.BossDamage) return false;
    if (IsReceivePrizes != other.IsReceivePrizes) return false;
    if (GuildCrusadeBossId != other.GuildCrusadeBossId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BossHp != 0L) hash ^= BossHp.GetHashCode();
    if (BossBattleNumber != 0) hash ^= BossBattleNumber.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    if (BossDamage != 0L) hash ^= BossDamage.GetHashCode();
    if (IsReceivePrizes != 0) hash ^= IsReceivePrizes.GetHashCode();
    if (GuildCrusadeBossId != 0) hash ^= GuildCrusadeBossId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BossHp != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(BossHp);
    }
    if (BossBattleNumber != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BossBattleNumber);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (BossDamage != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(BossDamage);
    }
    if (IsReceivePrizes != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(IsReceivePrizes);
    }
    if (GuildCrusadeBossId != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(GuildCrusadeBossId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BossHp != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BossHp);
    }
    if (BossBattleNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossBattleNumber);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (BossDamage != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BossDamage);
    }
    if (IsReceivePrizes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsReceivePrizes);
    }
    if (GuildCrusadeBossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildCrusadeBossId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossInitializeResp other) {
    if (other == null) {
      return;
    }
    if (other.BossHp != 0L) {
      BossHp = other.BossHp;
    }
    if (other.BossBattleNumber != 0) {
      BossBattleNumber = other.BossBattleNumber;
    }
    changeItem_.Add(other.changeItem_);
    if (other.BossDamage != 0L) {
      BossDamage = other.BossDamage;
    }
    if (other.IsReceivePrizes != 0) {
      IsReceivePrizes = other.IsReceivePrizes;
    }
    if (other.GuildCrusadeBossId != 0) {
      GuildCrusadeBossId = other.GuildCrusadeBossId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BossHp = input.ReadInt64();
          break;
        }
        case 16: {
          BossBattleNumber = input.ReadInt32();
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 32: {
          BossDamage = input.ReadInt64();
          break;
        }
        case 40: {
          IsReceivePrizes = input.ReadInt32();
          break;
        }
        case 48: {
          GuildCrusadeBossId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///boss挑战开始
/// </summary>
public sealed partial class GuildBossBattleStartReq : pb::IMessage<GuildBossBattleStartReq> {
  private static readonly pb::MessageParser<GuildBossBattleStartReq> _parser = new pb::MessageParser<GuildBossBattleStartReq>(() => new GuildBossBattleStartReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossBattleStartReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossBattleStartReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossBattleStartReq(GuildBossBattleStartReq other) : this() {
    guildCrusadeBossId_ = other.guildCrusadeBossId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossBattleStartReq Clone() {
    return new GuildBossBattleStartReq(this);
  }

  /// <summary>Field number for the "guildCrusadeBossId" field.</summary>
  public const int GuildCrusadeBossIdFieldNumber = 1;
  private int guildCrusadeBossId_;
  /// <summary>
  ///配置表GuildCrusadeBoss id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuildCrusadeBossId {
    get { return guildCrusadeBossId_; }
    set {
      guildCrusadeBossId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossBattleStartReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossBattleStartReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GuildCrusadeBossId != other.GuildCrusadeBossId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GuildCrusadeBossId != 0) hash ^= GuildCrusadeBossId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GuildCrusadeBossId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GuildCrusadeBossId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GuildCrusadeBossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildCrusadeBossId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossBattleStartReq other) {
    if (other == null) {
      return;
    }
    if (other.GuildCrusadeBossId != 0) {
      GuildCrusadeBossId = other.GuildCrusadeBossId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GuildCrusadeBossId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildBossBattleStartResp : pb::IMessage<GuildBossBattleStartResp> {
  private static readonly pb::MessageParser<GuildBossBattleStartResp> _parser = new pb::MessageParser<GuildBossBattleStartResp>(() => new GuildBossBattleStartResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossBattleStartResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossBattleStartResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossBattleStartResp(GuildBossBattleStartResp other) : this() {
    guildCrusadeBossId_ = other.guildCrusadeBossId_;
    seed_ = other.seed_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossBattleStartResp Clone() {
    return new GuildBossBattleStartResp(this);
  }

  /// <summary>Field number for the "guildCrusadeBossId" field.</summary>
  public const int GuildCrusadeBossIdFieldNumber = 1;
  private int guildCrusadeBossId_;
  /// <summary>
  ///配置表GuildCrusadeBoss id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuildCrusadeBossId {
    get { return guildCrusadeBossId_; }
    set {
      guildCrusadeBossId_ = value;
    }
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 2;
  private int seed_;
  /// <summary>
  ///种子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossBattleStartResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossBattleStartResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GuildCrusadeBossId != other.GuildCrusadeBossId) return false;
    if (Seed != other.Seed) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GuildCrusadeBossId != 0) hash ^= GuildCrusadeBossId.GetHashCode();
    if (Seed != 0) hash ^= Seed.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GuildCrusadeBossId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GuildCrusadeBossId);
    }
    if (Seed != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Seed);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GuildCrusadeBossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildCrusadeBossId);
    }
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossBattleStartResp other) {
    if (other == null) {
      return;
    }
    if (other.GuildCrusadeBossId != 0) {
      GuildCrusadeBossId = other.GuildCrusadeBossId;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GuildCrusadeBossId = input.ReadInt32();
          break;
        }
        case 16: {
          Seed = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///boss挑战结束
/// </summary>
public sealed partial class GuildBossBattleEndReq : pb::IMessage<GuildBossBattleEndReq> {
  private static readonly pb::MessageParser<GuildBossBattleEndReq> _parser = new pb::MessageParser<GuildBossBattleEndReq>(() => new GuildBossBattleEndReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossBattleEndReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossBattleEndReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossBattleEndReq(GuildBossBattleEndReq other) : this() {
    result_ = other.result_;
    guildCrusadeBossId_ = other.guildCrusadeBossId_;
    seed_ = other.seed_;
    bossDamage_ = other.bossDamage_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossBattleEndReq Clone() {
    return new GuildBossBattleEndReq(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///0-失败 1-胜利
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "guildCrusadeBossId" field.</summary>
  public const int GuildCrusadeBossIdFieldNumber = 2;
  private int guildCrusadeBossId_;
  /// <summary>
  ///配置表GuildCrusadeBoss id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuildCrusadeBossId {
    get { return guildCrusadeBossId_; }
    set {
      guildCrusadeBossId_ = value;
    }
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 3;
  private int seed_;
  /// <summary>
  ///种子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  /// <summary>Field number for the "bossDamage" field.</summary>
  public const int BossDamageFieldNumber = 4;
  private long bossDamage_;
  /// <summary>
  ///个人对boss造成值（单次）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BossDamage {
    get { return bossDamage_; }
    set {
      bossDamage_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossBattleEndReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossBattleEndReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (GuildCrusadeBossId != other.GuildCrusadeBossId) return false;
    if (Seed != other.Seed) return false;
    if (BossDamage != other.BossDamage) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (GuildCrusadeBossId != 0) hash ^= GuildCrusadeBossId.GetHashCode();
    if (Seed != 0) hash ^= Seed.GetHashCode();
    if (BossDamage != 0L) hash ^= BossDamage.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (GuildCrusadeBossId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GuildCrusadeBossId);
    }
    if (Seed != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Seed);
    }
    if (BossDamage != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(BossDamage);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (GuildCrusadeBossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildCrusadeBossId);
    }
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    if (BossDamage != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BossDamage);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossBattleEndReq other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.GuildCrusadeBossId != 0) {
      GuildCrusadeBossId = other.GuildCrusadeBossId;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
    if (other.BossDamage != 0L) {
      BossDamage = other.BossDamage;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          GuildCrusadeBossId = input.ReadInt32();
          break;
        }
        case 24: {
          Seed = input.ReadInt32();
          break;
        }
        case 32: {
          BossDamage = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildBossBattleEndResp : pb::IMessage<GuildBossBattleEndResp> {
  private static readonly pb::MessageParser<GuildBossBattleEndResp> _parser = new pb::MessageParser<GuildBossBattleEndResp>(() => new GuildBossBattleEndResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossBattleEndResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossBattleEndResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossBattleEndResp(GuildBossBattleEndResp other) : this() {
    changeItem_ = other.changeItem_.Clone();
    guildCrusadeBossId_ = other.guildCrusadeBossId_;
    Self = other.self_ != null ? other.Self.Clone() : null;
    Boss = other.boss_ != null ? other.Boss.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossBattleEndResp Clone() {
    return new GuildBossBattleEndResp(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "guildCrusadeBossId" field.</summary>
  public const int GuildCrusadeBossIdFieldNumber = 2;
  private int guildCrusadeBossId_;
  /// <summary>
  ///配置表GuildCrusadeBoss id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuildCrusadeBossId {
    get { return guildCrusadeBossId_; }
    set {
      guildCrusadeBossId_ = value;
    }
  }

  /// <summary>Field number for the "self" field.</summary>
  public const int SelfFieldNumber = 3;
  private global::GuildMemberPb self_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildMemberPb Self {
    get { return self_; }
    set {
      self_ = value;
    }
  }

  /// <summary>Field number for the "boss" field.</summary>
  public const int BossFieldNumber = 4;
  private global::GuildBossPb boss_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildBossPb Boss {
    get { return boss_; }
    set {
      boss_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossBattleEndResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossBattleEndResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (GuildCrusadeBossId != other.GuildCrusadeBossId) return false;
    if (!object.Equals(Self, other.Self)) return false;
    if (!object.Equals(Boss, other.Boss)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    if (GuildCrusadeBossId != 0) hash ^= GuildCrusadeBossId.GetHashCode();
    if (self_ != null) hash ^= Self.GetHashCode();
    if (boss_ != null) hash ^= Boss.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (GuildCrusadeBossId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GuildCrusadeBossId);
    }
    if (self_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Self);
    }
    if (boss_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Boss);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (GuildCrusadeBossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildCrusadeBossId);
    }
    if (self_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
    }
    if (boss_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Boss);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossBattleEndResp other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
    if (other.GuildCrusadeBossId != 0) {
      GuildCrusadeBossId = other.GuildCrusadeBossId;
    }
    if (other.self_ != null) {
      if (self_ == null) {
        self_ = new global::GuildMemberPb();
      }
      Self.MergeFrom(other.Self);
    }
    if (other.boss_ != null) {
      if (boss_ == null) {
        boss_ = new global::GuildBossPb();
      }
      Boss.MergeFrom(other.Boss);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 16: {
          GuildCrusadeBossId = input.ReadInt32();
          break;
        }
        case 26: {
          if (self_ == null) {
            self_ = new global::GuildMemberPb();
          }
          input.ReadMessage(self_);
          break;
        }
        case 34: {
          if (boss_ == null) {
            boss_ = new global::GuildBossPb();
          }
          input.ReadMessage(boss_);
          break;
        }
      }
    }
  }

}

/// <summary>
///boss累伤奖励列表
/// </summary>
public sealed partial class GuildBossAccumulatedDamageRewardListReq : pb::IMessage<GuildBossAccumulatedDamageRewardListReq> {
  private static readonly pb::MessageParser<GuildBossAccumulatedDamageRewardListReq> _parser = new pb::MessageParser<GuildBossAccumulatedDamageRewardListReq>(() => new GuildBossAccumulatedDamageRewardListReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossAccumulatedDamageRewardListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossAccumulatedDamageRewardListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossAccumulatedDamageRewardListReq(GuildBossAccumulatedDamageRewardListReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossAccumulatedDamageRewardListReq Clone() {
    return new GuildBossAccumulatedDamageRewardListReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossAccumulatedDamageRewardListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossAccumulatedDamageRewardListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossAccumulatedDamageRewardListReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GuildBossAccumulatedDamageRewardListResp : pb::IMessage<GuildBossAccumulatedDamageRewardListResp> {
  private static readonly pb::MessageParser<GuildBossAccumulatedDamageRewardListResp> _parser = new pb::MessageParser<GuildBossAccumulatedDamageRewardListResp>(() => new GuildBossAccumulatedDamageRewardListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossAccumulatedDamageRewardListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossAccumulatedDamageRewardListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossAccumulatedDamageRewardListResp(GuildBossAccumulatedDamageRewardListResp other) : this() {
    task_ = other.task_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossAccumulatedDamageRewardListResp Clone() {
    return new GuildBossAccumulatedDamageRewardListResp(this);
  }

  /// <summary>Field number for the "task" field.</summary>
  public const int TaskFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_task_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> task_ = new pbc::MapField<int, int>();
  /// <summary>
  ///Key完成阶段 = ID，void = 完成状态0未完成，1可领取，2已领取;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Task {
    get { return task_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossAccumulatedDamageRewardListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossAccumulatedDamageRewardListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Task.Equals(other.Task)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Task.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    task_.WriteTo(output, _map_task_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += task_.CalculateSize(_map_task_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossAccumulatedDamageRewardListResp other) {
    if (other == null) {
      return;
    }
    task_.Add(other.task_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          task_.AddEntriesFrom(input, _map_task_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///boss累伤奖励领取  count
/// </summary>
public sealed partial class GuildBossAccumulatedDamageRewardReceiveReq : pb::IMessage<GuildBossAccumulatedDamageRewardReceiveReq> {
  private static readonly pb::MessageParser<GuildBossAccumulatedDamageRewardReceiveReq> _parser = new pb::MessageParser<GuildBossAccumulatedDamageRewardReceiveReq>(() => new GuildBossAccumulatedDamageRewardReceiveReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossAccumulatedDamageRewardReceiveReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossAccumulatedDamageRewardReceiveReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossAccumulatedDamageRewardReceiveReq(GuildBossAccumulatedDamageRewardReceiveReq other) : this() {
    task_ = other.task_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossAccumulatedDamageRewardReceiveReq Clone() {
    return new GuildBossAccumulatedDamageRewardReceiveReq(this);
  }

  /// <summary>Field number for the "task" field.</summary>
  public const int TaskFieldNumber = 1;
  private int task_;
  /// <summary>
  ///领取ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Task {
    get { return task_; }
    set {
      task_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossAccumulatedDamageRewardReceiveReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossAccumulatedDamageRewardReceiveReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Task != other.Task) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Task != 0) hash ^= Task.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Task != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Task);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Task != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Task);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossAccumulatedDamageRewardReceiveReq other) {
    if (other == null) {
      return;
    }
    if (other.Task != 0) {
      Task = other.Task;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Task = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildBossAccumulatedDamageRewardReceiveResp : pb::IMessage<GuildBossAccumulatedDamageRewardReceiveResp> {
  private static readonly pb::MessageParser<GuildBossAccumulatedDamageRewardReceiveResp> _parser = new pb::MessageParser<GuildBossAccumulatedDamageRewardReceiveResp>(() => new GuildBossAccumulatedDamageRewardReceiveResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossAccumulatedDamageRewardReceiveResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossAccumulatedDamageRewardReceiveResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossAccumulatedDamageRewardReceiveResp(GuildBossAccumulatedDamageRewardReceiveResp other) : this() {
    changeItem_ = other.changeItem_.Clone();
    Self = other.self_ != null ? other.Self.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossAccumulatedDamageRewardReceiveResp Clone() {
    return new GuildBossAccumulatedDamageRewardReceiveResp(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "self" field.</summary>
  public const int SelfFieldNumber = 2;
  private global::GuildMemberPb self_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildMemberPb Self {
    get { return self_; }
    set {
      self_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossAccumulatedDamageRewardReceiveResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossAccumulatedDamageRewardReceiveResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (!object.Equals(Self, other.Self)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    if (self_ != null) hash ^= Self.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (self_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Self);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (self_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossAccumulatedDamageRewardReceiveResp other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
    if (other.self_ != null) {
      if (self_ == null) {
        self_ = new global::GuildMemberPb();
      }
      Self.MergeFrom(other.Self);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 18: {
          if (self_ == null) {
            self_ = new global::GuildMemberPb();
          }
          input.ReadMessage(self_);
          break;
        }
      }
    }
  }

}

/// <summary>
///boss讨伐奖励列表
/// </summary>
public sealed partial class GuildBossCrusadeRewardListReq : pb::IMessage<GuildBossCrusadeRewardListReq> {
  private static readonly pb::MessageParser<GuildBossCrusadeRewardListReq> _parser = new pb::MessageParser<GuildBossCrusadeRewardListReq>(() => new GuildBossCrusadeRewardListReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossCrusadeRewardListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossCrusadeRewardListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossCrusadeRewardListReq(GuildBossCrusadeRewardListReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossCrusadeRewardListReq Clone() {
    return new GuildBossCrusadeRewardListReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossCrusadeRewardListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossCrusadeRewardListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossCrusadeRewardListReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GuildBossCrusadeRewardListResp : pb::IMessage<GuildBossCrusadeRewardListResp> {
  private static readonly pb::MessageParser<GuildBossCrusadeRewardListResp> _parser = new pb::MessageParser<GuildBossCrusadeRewardListResp>(() => new GuildBossCrusadeRewardListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossCrusadeRewardListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossCrusadeRewardListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossCrusadeRewardListResp(GuildBossCrusadeRewardListResp other) : this() {
    records_ = other.records_.Clone();
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossCrusadeRewardListResp Clone() {
    return new GuildBossCrusadeRewardListResp(this);
  }

  /// <summary>Field number for the "Records" field.</summary>
  public const int RecordsFieldNumber = 1;
  private static readonly pbc::MapField<int, global::GuildRecordsPb>.Codec _map_records_codec
      = new pbc::MapField<int, global::GuildRecordsPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::GuildRecordsPb.Parser), 10);
  private readonly pbc::MapField<int, global::GuildRecordsPb> records_ = new pbc::MapField<int, global::GuildRecordsPb>();
  /// <summary>
  ///讨伐记录
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::GuildRecordsPb> Records {
    get { return records_; }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///可领取的全部道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossCrusadeRewardListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossCrusadeRewardListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Records.Equals(other.Records)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Records.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    records_.WriteTo(output, _map_records_codec);
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += records_.CalculateSize(_map_records_codec);
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossCrusadeRewardListResp other) {
    if (other == null) {
      return;
    }
    records_.Add(other.records_);
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          records_.AddEntriesFrom(input, _map_records_codec);
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///boss讨伐奖励领取（全部领取）
/// </summary>
public sealed partial class GuildBossCrusadeRewardReceiveReq : pb::IMessage<GuildBossCrusadeRewardReceiveReq> {
  private static readonly pb::MessageParser<GuildBossCrusadeRewardReceiveReq> _parser = new pb::MessageParser<GuildBossCrusadeRewardReceiveReq>(() => new GuildBossCrusadeRewardReceiveReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossCrusadeRewardReceiveReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossCrusadeRewardReceiveReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossCrusadeRewardReceiveReq(GuildBossCrusadeRewardReceiveReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossCrusadeRewardReceiveReq Clone() {
    return new GuildBossCrusadeRewardReceiveReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossCrusadeRewardReceiveReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossCrusadeRewardReceiveReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossCrusadeRewardReceiveReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GuildBossCrusadeRewardReceiveResp : pb::IMessage<GuildBossCrusadeRewardReceiveResp> {
  private static readonly pb::MessageParser<GuildBossCrusadeRewardReceiveResp> _parser = new pb::MessageParser<GuildBossCrusadeRewardReceiveResp>(() => new GuildBossCrusadeRewardReceiveResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossCrusadeRewardReceiveResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossCrusadeRewardReceiveResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossCrusadeRewardReceiveResp(GuildBossCrusadeRewardReceiveResp other) : this() {
    changeItem_ = other.changeItem_.Clone();
    Self = other.self_ != null ? other.Self.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossCrusadeRewardReceiveResp Clone() {
    return new GuildBossCrusadeRewardReceiveResp(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "self" field.</summary>
  public const int SelfFieldNumber = 2;
  private global::GuildMemberPb self_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildMemberPb Self {
    get { return self_; }
    set {
      self_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossCrusadeRewardReceiveResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossCrusadeRewardReceiveResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (!object.Equals(Self, other.Self)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    if (self_ != null) hash ^= Self.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (self_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Self);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (self_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossCrusadeRewardReceiveResp other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
    if (other.self_ != null) {
      if (self_ == null) {
        self_ = new global::GuildMemberPb();
      }
      Self.MergeFrom(other.Self);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 18: {
          if (self_ == null) {
            self_ = new global::GuildMemberPb();
          }
          input.ReadMessage(self_);
          break;
        }
      }
    }
  }

}

public sealed partial class GuildRenameReq : pb::IMessage<GuildRenameReq> {
  private static readonly pb::MessageParser<GuildRenameReq> _parser = new pb::MessageParser<GuildRenameReq>(() => new GuildRenameReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildRenameReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRenameReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRenameReq(GuildRenameReq other) : this() {
    guildName_ = other.guildName_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRenameReq Clone() {
    return new GuildRenameReq(this);
  }

  /// <summary>Field number for the "guildName" field.</summary>
  public const int GuildNameFieldNumber = 1;
  private string guildName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GuildName {
    get { return guildName_; }
    set {
      guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildRenameReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildRenameReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GuildName != other.GuildName) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GuildName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GuildName);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GuildName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildRenameReq other) {
    if (other == null) {
      return;
    }
    if (other.GuildName.Length != 0) {
      GuildName = other.GuildName;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          GuildName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildRenameResp : pb::IMessage<GuildRenameResp> {
  private static readonly pb::MessageParser<GuildRenameResp> _parser = new pb::MessageParser<GuildRenameResp>(() => new GuildRenameResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildRenameResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRenameResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRenameResp(GuildRenameResp other) : this() {
    guildName_ = other.guildName_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRenameResp Clone() {
    return new GuildRenameResp(this);
  }

  /// <summary>Field number for the "guildName" field.</summary>
  public const int GuildNameFieldNumber = 1;
  private string guildName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GuildName {
    get { return guildName_; }
    set {
      guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildRenameResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildRenameResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GuildName != other.GuildName) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GuildName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GuildName);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GuildName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildRenameResp other) {
    if (other == null) {
      return;
    }
    if (other.GuildName.Length != 0) {
      GuildName = other.GuildName;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          GuildName = input.ReadString();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GuildNoticeReq : pb::IMessage<GuildNoticeReq> {
  private static readonly pb::MessageParser<GuildNoticeReq> _parser = new pb::MessageParser<GuildNoticeReq>(() => new GuildNoticeReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildNoticeReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildNoticeReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildNoticeReq(GuildNoticeReq other) : this() {
    guildNotice_ = other.guildNotice_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildNoticeReq Clone() {
    return new GuildNoticeReq(this);
  }

  /// <summary>Field number for the "guildNotice" field.</summary>
  public const int GuildNoticeFieldNumber = 1;
  private string guildNotice_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GuildNotice {
    get { return guildNotice_; }
    set {
      guildNotice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildNoticeReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildNoticeReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GuildNotice != other.GuildNotice) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GuildNotice.Length != 0) hash ^= GuildNotice.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GuildNotice.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GuildNotice);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GuildNotice.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildNotice);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildNoticeReq other) {
    if (other == null) {
      return;
    }
    if (other.GuildNotice.Length != 0) {
      GuildNotice = other.GuildNotice;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          GuildNotice = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildNoticeResp : pb::IMessage<GuildNoticeResp> {
  private static readonly pb::MessageParser<GuildNoticeResp> _parser = new pb::MessageParser<GuildNoticeResp>(() => new GuildNoticeResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildNoticeResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildNoticeResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildNoticeResp(GuildNoticeResp other) : this() {
    guildNotice_ = other.guildNotice_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildNoticeResp Clone() {
    return new GuildNoticeResp(this);
  }

  /// <summary>Field number for the "guildNotice" field.</summary>
  public const int GuildNoticeFieldNumber = 1;
  private string guildNotice_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GuildNotice {
    get { return guildNotice_; }
    set {
      guildNotice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildNoticeResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildNoticeResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GuildNotice != other.GuildNotice) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GuildNotice.Length != 0) hash ^= GuildNotice.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GuildNotice.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GuildNotice);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GuildNotice.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildNotice);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildNoticeResp other) {
    if (other == null) {
      return;
    }
    if (other.GuildNotice.Length != 0) {
      GuildNotice = other.GuildNotice;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          GuildNotice = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///公会修改徽章
/// </summary>
public sealed partial class GuildBadgeReq : pb::IMessage<GuildBadgeReq> {
  private static readonly pb::MessageParser<GuildBadgeReq> _parser = new pb::MessageParser<GuildBadgeReq>(() => new GuildBadgeReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBadgeReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBadgeReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBadgeReq(GuildBadgeReq other) : this() {
    badgeId_ = other.badgeId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBadgeReq Clone() {
    return new GuildBadgeReq(this);
  }

  /// <summary>Field number for the "badgeId" field.</summary>
  public const int BadgeIdFieldNumber = 1;
  private int badgeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BadgeId {
    get { return badgeId_; }
    set {
      badgeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBadgeReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBadgeReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BadgeId != other.BadgeId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BadgeId != 0) hash ^= BadgeId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BadgeId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BadgeId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BadgeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BadgeId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBadgeReq other) {
    if (other == null) {
      return;
    }
    if (other.BadgeId != 0) {
      BadgeId = other.BadgeId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BadgeId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildBadgeResp : pb::IMessage<GuildBadgeResp> {
  private static readonly pb::MessageParser<GuildBadgeResp> _parser = new pb::MessageParser<GuildBadgeResp>(() => new GuildBadgeResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBadgeResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GuildReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBadgeResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBadgeResp(GuildBadgeResp other) : this() {
    badgeId_ = other.badgeId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBadgeResp Clone() {
    return new GuildBadgeResp(this);
  }

  /// <summary>Field number for the "badgeId" field.</summary>
  public const int BadgeIdFieldNumber = 1;
  private int badgeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BadgeId {
    get { return badgeId_; }
    set {
      badgeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBadgeResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBadgeResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BadgeId != other.BadgeId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BadgeId != 0) hash ^= BadgeId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BadgeId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BadgeId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BadgeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BadgeId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBadgeResp other) {
    if (other == null) {
      return;
    }
    if (other.BadgeId != 0) {
      BadgeId = other.BadgeId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BadgeId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
