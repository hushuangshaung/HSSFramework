// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from offer.proto</summary>
public static partial class OfferReflection {

  #region Descriptor
  /// <summary>File descriptor for offer.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static OfferReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtvZmZlci5wcm90bxoKYmVhbi5wcm90byI/Cg1PZmZlckluZm9SZXNwEhcK",
          "BW9mZmVyGAEgASgLMgguT2ZmZXJQYhIVCg1vZmZlckJ1eVRpbWVzGAIgASgF",
          "IiAKEE9mZmVyVGltZXNCdXlSZXESDAoEdHlwZRgBIAEoBSK6AQoRT2ZmZXJU",
          "aW1lc0J1eVJlc3ASNgoKY2hhbmdlSXRlbRgBIAMoCzIiLk9mZmVyVGltZXNC",
          "dXlSZXNwLkNoYW5nZUl0ZW1FbnRyeRISCgpjYXRjaFRpbWVzGAIgASgFEg8K",
          "B2NhdGNoQ2QYAyABKAUSFQoNb2ZmZXJCdXlUaW1lcxgEIAEoBRoxCg9DaGFu",
          "Z2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIf",
          "Cg9PZmZlclJlZnJlc2hSZXESDAoEdHlwZRgBIAEoBSKpAQoQT2ZmZXJSZWZy",
          "ZXNoUmVzcBIYCgNucGMYASADKAsyCy5PZmZlck5wY1BiEhEKCXJlZnJlc2hD",
          "ZBgCIAEoBRI1CgpjaGFuZ2VJdGVtGAMgAygLMiEuT2ZmZXJSZWZyZXNoUmVz",
          "cC5DaGFuZ2VJdGVtRW50cnkaMQoPQ2hhbmdlSXRlbUVudHJ5EgsKA2tleRgB",
          "IAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiHAoNT2ZmZXJDYXRjaFJlcRILCgNw",
          "b3MYASABKAUiWwoOT2ZmZXJDYXRjaFJlc3ASCwoDcG9zGAEgASgFEhcKBWVx",
          "dWlwGAIgAygLMgguRXF1aXBQYhISCgpjYXRjaFRpbWVzGAMgASgFEg8KB2Nh",
          "dGNoQ2QYBCABKAVCFQoKY29tLmNiLm1zZ0IHUEJPZmZlcmIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferInfoResp), global::OfferInfoResp.Parser, new[]{ "Offer", "OfferBuyTimes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferTimesBuyReq), global::OfferTimesBuyReq.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferTimesBuyResp), global::OfferTimesBuyResp.Parser, new[]{ "ChangeItem", "CatchTimes", "CatchCd", "OfferBuyTimes" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferRefreshReq), global::OfferRefreshReq.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferRefreshResp), global::OfferRefreshResp.Parser, new[]{ "Npc", "RefreshCd", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferCatchReq), global::OfferCatchReq.Parser, new[]{ "Pos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferCatchResp), global::OfferCatchResp.Parser, new[]{ "Pos", "Equip", "CatchTimes", "CatchCd" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///秘境悬赏信息
/// </summary>
public sealed partial class OfferInfoResp : pb::IMessage<OfferInfoResp> {
  private static readonly pb::MessageParser<OfferInfoResp> _parser = new pb::MessageParser<OfferInfoResp>(() => new OfferInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferInfoResp(OfferInfoResp other) : this() {
    Offer = other.offer_ != null ? other.Offer.Clone() : null;
    offerBuyTimes_ = other.offerBuyTimes_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferInfoResp Clone() {
    return new OfferInfoResp(this);
  }

  /// <summary>Field number for the "offer" field.</summary>
  public const int OfferFieldNumber = 1;
  private global::OfferPb offer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OfferPb Offer {
    get { return offer_; }
    set {
      offer_ = value;
    }
  }

  /// <summary>Field number for the "offerBuyTimes" field.</summary>
  public const int OfferBuyTimesFieldNumber = 2;
  private int offerBuyTimes_;
  /// <summary>
  ///每日悬赏购买次数 --花钱购买才计算
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OfferBuyTimes {
    get { return offerBuyTimes_; }
    set {
      offerBuyTimes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Offer, other.Offer)) return false;
    if (OfferBuyTimes != other.OfferBuyTimes) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (offer_ != null) hash ^= Offer.GetHashCode();
    if (OfferBuyTimes != 0) hash ^= OfferBuyTimes.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (offer_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Offer);
    }
    if (OfferBuyTimes != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OfferBuyTimes);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (offer_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offer);
    }
    if (OfferBuyTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfferBuyTimes);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.offer_ != null) {
      if (offer_ == null) {
        offer_ = new global::OfferPb();
      }
      Offer.MergeFrom(other.Offer);
    }
    if (other.OfferBuyTimes != 0) {
      OfferBuyTimes = other.OfferBuyTimes;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (offer_ == null) {
            offer_ = new global::OfferPb();
          }
          input.ReadMessage(offer_);
          break;
        }
        case 16: {
          OfferBuyTimes = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///秘境悬赏购买次数
/// </summary>
public sealed partial class OfferTimesBuyReq : pb::IMessage<OfferTimesBuyReq> {
  private static readonly pb::MessageParser<OfferTimesBuyReq> _parser = new pb::MessageParser<OfferTimesBuyReq>(() => new OfferTimesBuyReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferTimesBuyReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferTimesBuyReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferTimesBuyReq(OfferTimesBuyReq other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferTimesBuyReq Clone() {
    return new OfferTimesBuyReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///0-花钱购买 1-cd时间到
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferTimesBuyReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferTimesBuyReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferTimesBuyReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class OfferTimesBuyResp : pb::IMessage<OfferTimesBuyResp> {
  private static readonly pb::MessageParser<OfferTimesBuyResp> _parser = new pb::MessageParser<OfferTimesBuyResp>(() => new OfferTimesBuyResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferTimesBuyResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferTimesBuyResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferTimesBuyResp(OfferTimesBuyResp other) : this() {
    changeItem_ = other.changeItem_.Clone();
    catchTimes_ = other.catchTimes_;
    catchCd_ = other.catchCd_;
    offerBuyTimes_ = other.offerBuyTimes_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferTimesBuyResp Clone() {
    return new OfferTimesBuyResp(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///可能会为nil, cd时间购买的情况
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "catchTimes" field.</summary>
  public const int CatchTimesFieldNumber = 2;
  private int catchTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CatchTimes {
    get { return catchTimes_; }
    set {
      catchTimes_ = value;
    }
  }

  /// <summary>Field number for the "catchCd" field.</summary>
  public const int CatchCdFieldNumber = 3;
  private int catchCd_;
  /// <summary>
  ///抓捕cd,倒计时秒  如果等于0代表可以免费购买次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CatchCd {
    get { return catchCd_; }
    set {
      catchCd_ = value;
    }
  }

  /// <summary>Field number for the "offerBuyTimes" field.</summary>
  public const int OfferBuyTimesFieldNumber = 4;
  private int offerBuyTimes_;
  /// <summary>
  ///每日悬赏购买次数 --花钱购买才计算
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OfferBuyTimes {
    get { return offerBuyTimes_; }
    set {
      offerBuyTimes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferTimesBuyResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferTimesBuyResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (CatchTimes != other.CatchTimes) return false;
    if (CatchCd != other.CatchCd) return false;
    if (OfferBuyTimes != other.OfferBuyTimes) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    if (CatchTimes != 0) hash ^= CatchTimes.GetHashCode();
    if (CatchCd != 0) hash ^= CatchCd.GetHashCode();
    if (OfferBuyTimes != 0) hash ^= OfferBuyTimes.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (CatchTimes != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CatchTimes);
    }
    if (CatchCd != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CatchCd);
    }
    if (OfferBuyTimes != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(OfferBuyTimes);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (CatchTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CatchTimes);
    }
    if (CatchCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CatchCd);
    }
    if (OfferBuyTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfferBuyTimes);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferTimesBuyResp other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
    if (other.CatchTimes != 0) {
      CatchTimes = other.CatchTimes;
    }
    if (other.CatchCd != 0) {
      CatchCd = other.CatchCd;
    }
    if (other.OfferBuyTimes != 0) {
      OfferBuyTimes = other.OfferBuyTimes;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 16: {
          CatchTimes = input.ReadInt32();
          break;
        }
        case 24: {
          CatchCd = input.ReadInt32();
          break;
        }
        case 32: {
          OfferBuyTimes = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///刷新榜单
/// </summary>
public sealed partial class OfferRefreshReq : pb::IMessage<OfferRefreshReq> {
  private static readonly pb::MessageParser<OfferRefreshReq> _parser = new pb::MessageParser<OfferRefreshReq>(() => new OfferRefreshReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferRefreshReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRefreshReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRefreshReq(OfferRefreshReq other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRefreshReq Clone() {
    return new OfferRefreshReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///0-花钱刷新 1-cd时间到
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferRefreshReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferRefreshReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferRefreshReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class OfferRefreshResp : pb::IMessage<OfferRefreshResp> {
  private static readonly pb::MessageParser<OfferRefreshResp> _parser = new pb::MessageParser<OfferRefreshResp>(() => new OfferRefreshResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferRefreshResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRefreshResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRefreshResp(OfferRefreshResp other) : this() {
    npc_ = other.npc_.Clone();
    refreshCd_ = other.refreshCd_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferRefreshResp Clone() {
    return new OfferRefreshResp(this);
  }

  /// <summary>Field number for the "npc" field.</summary>
  public const int NpcFieldNumber = 1;
  private static readonly pb::FieldCodec<global::OfferNpcPb> _repeated_npc_codec
      = pb::FieldCodec.ForMessage(10, global::OfferNpcPb.Parser);
  private readonly pbc::RepeatedField<global::OfferNpcPb> npc_ = new pbc::RepeatedField<global::OfferNpcPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::OfferNpcPb> Npc {
    get { return npc_; }
  }

  /// <summary>Field number for the "refreshCd" field.</summary>
  public const int RefreshCdFieldNumber = 2;
  private int refreshCd_;
  /// <summary>
  ///刷新cd 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RefreshCd {
    get { return refreshCd_; }
    set {
      refreshCd_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变道具,可能会为nil, cd时间购买的情况
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferRefreshResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferRefreshResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!npc_.Equals(other.npc_)) return false;
    if (RefreshCd != other.RefreshCd) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= npc_.GetHashCode();
    if (RefreshCd != 0) hash ^= RefreshCd.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    npc_.WriteTo(output, _repeated_npc_codec);
    if (RefreshCd != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RefreshCd);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += npc_.CalculateSize(_repeated_npc_codec);
    if (RefreshCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshCd);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferRefreshResp other) {
    if (other == null) {
      return;
    }
    npc_.Add(other.npc_);
    if (other.RefreshCd != 0) {
      RefreshCd = other.RefreshCd;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          npc_.AddEntriesFrom(input, _repeated_npc_codec);
          break;
        }
        case 16: {
          RefreshCd = input.ReadInt32();
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///秘境悬赏 抓捕成功后发送，失败不发送
/// </summary>
public sealed partial class OfferCatchReq : pb::IMessage<OfferCatchReq> {
  private static readonly pb::MessageParser<OfferCatchReq> _parser = new pb::MessageParser<OfferCatchReq>(() => new OfferCatchReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferCatchReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferCatchReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferCatchReq(OfferCatchReq other) : this() {
    pos_ = other.pos_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferCatchReq Clone() {
    return new OfferCatchReq(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferCatchReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferCatchReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pos != 0) hash ^= Pos.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pos != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferCatchReq other) {
    if (other == null) {
      return;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class OfferCatchResp : pb::IMessage<OfferCatchResp> {
  private static readonly pb::MessageParser<OfferCatchResp> _parser = new pb::MessageParser<OfferCatchResp>(() => new OfferCatchResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferCatchResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OfferReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferCatchResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferCatchResp(OfferCatchResp other) : this() {
    pos_ = other.pos_;
    equip_ = other.equip_.Clone();
    catchTimes_ = other.catchTimes_;
    catchCd_ = other.catchCd_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferCatchResp Clone() {
    return new OfferCatchResp(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "equip" field.</summary>
  public const int EquipFieldNumber = 2;
  private static readonly pb::FieldCodec<global::EquipPb> _repeated_equip_codec
      = pb::FieldCodec.ForMessage(18, global::EquipPb.Parser);
  private readonly pbc::RepeatedField<global::EquipPb> equip_ = new pbc::RepeatedField<global::EquipPb>();
  /// <summary>
  ///掉落的装备
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EquipPb> Equip {
    get { return equip_; }
  }

  /// <summary>Field number for the "catchTimes" field.</summary>
  public const int CatchTimesFieldNumber = 3;
  private int catchTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CatchTimes {
    get { return catchTimes_; }
    set {
      catchTimes_ = value;
    }
  }

  /// <summary>Field number for the "catchCd" field.</summary>
  public const int CatchCdFieldNumber = 4;
  private int catchCd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CatchCd {
    get { return catchCd_; }
    set {
      catchCd_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferCatchResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferCatchResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    if(!equip_.Equals(other.equip_)) return false;
    if (CatchTimes != other.CatchTimes) return false;
    if (CatchCd != other.CatchCd) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pos != 0) hash ^= Pos.GetHashCode();
    hash ^= equip_.GetHashCode();
    if (CatchTimes != 0) hash ^= CatchTimes.GetHashCode();
    if (CatchCd != 0) hash ^= CatchCd.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pos != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
    equip_.WriteTo(output, _repeated_equip_codec);
    if (CatchTimes != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CatchTimes);
    }
    if (CatchCd != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CatchCd);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    size += equip_.CalculateSize(_repeated_equip_codec);
    if (CatchTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CatchTimes);
    }
    if (CatchCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CatchCd);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferCatchResp other) {
    if (other == null) {
      return;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    equip_.Add(other.equip_);
    if (other.CatchTimes != 0) {
      CatchTimes = other.CatchTimes;
    }
    if (other.CatchCd != 0) {
      CatchCd = other.CatchCd;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
        case 18: {
          equip_.AddEntriesFrom(input, _repeated_equip_codec);
          break;
        }
        case 24: {
          CatchTimes = input.ReadInt32();
          break;
        }
        case 32: {
          CatchCd = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
