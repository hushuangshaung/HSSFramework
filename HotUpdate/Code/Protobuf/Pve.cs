// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pve.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from pve.proto</summary>
public static partial class PveReflection {

  #region Descriptor
  /// <summary>File descriptor for pve.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PveReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CglwdmUucHJvdG8iKgoMUHZlUmVzdWx0UmVxEgoKAmlkGAEgASgFEg4KBnJl",
          "c3VsdBgCIAEoBSKCAQoNUHZlUmVzdWx0UmVzcBIKCgJpZBgBIAEoBRIyCgpj",
          "aGFuZ2VJdGVtGAIgAygLMh4uUHZlUmVzdWx0UmVzcC5DaGFuZ2VJdGVtRW50",
          "cnkaMQoPQ2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgC",
          "IAEoBToCOAEiPwoQUHZlUmVzdWx0Qm9zc1JlcRIKCgJpZBgBIAEoBRIOCgZy",
          "ZXN1bHQYAiABKAUSDwoHY2hhcHRlchgDIAEoBSKSAQoRUHZlUmVzdWx0Qm9z",
          "c1Jlc3ASMAoHYWRkSXRlbRgCIAMoCzIfLlB2ZVJlc3VsdEJvc3NSZXNwLkFk",
          "ZEl0ZW1FbnRyeRIKCgJpZBgDIAEoBRIPCgdjaGFwdGVyGAQgASgFGi4KDEFk",
          "ZEl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBInwK",
          "DE9wZXJhdGlvblJlcRIKCgJpZBgBIAEoBRIMCgR0eXBlGAIgASgFEiUKBGNv",
          "c3QYAyADKAsyFy5PcGVyYXRpb25SZXEuQ29zdEVudHJ5GisKCUNvc3RFbnRy",
          "eRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIusBCg1PcGVyYXRp",
          "b25SZXNwEgoKAmlkGAEgASgFEgwKBHR5cGUYAiABKAUSDQoFdGltZXMYAyAB",
          "KAUSJgoEaXRlbRgEIAMoCzIYLk9wZXJhdGlvblJlc3AuSXRlbUVudHJ5EiwK",
          "B2FkZEl0ZW0YBSADKAsyGy5PcGVyYXRpb25SZXNwLkFkZEl0ZW1FbnRyeRor",
          "CglJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARou",
          "CgxBZGRJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4",
          "ASIjChBDaGFwdGVyUmV3YXJkUmVxEg8KB2NoYXB0ZXIYASABKAUihgEKEUNo",
          "YXB0ZXJSZXdhcmRSZXNwEg8KB2NoYXB0ZXIYASABKAUSMAoHYWRkSXRlbRgC",
          "IAMoCzIfLkNoYXB0ZXJSZXdhcmRSZXNwLkFkZEl0ZW1FbnRyeRouCgxBZGRJ",
          "dGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4AUITCgpj",
          "b20uY2IubXNnQgVQQlB2ZWIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PveResultReq), global::PveResultReq.Parser, new[]{ "Id", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PveResultResp), global::PveResultResp.Parser, new[]{ "Id", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PveResultBossReq), global::PveResultBossReq.Parser, new[]{ "Id", "Result", "Chapter" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PveResultBossResp), global::PveResultBossResp.Parser, new[]{ "AddItem", "Id", "Chapter" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::OperationReq), global::OperationReq.Parser, new[]{ "Id", "Type", "Cost" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::OperationResp), global::OperationResp.Parser, new[]{ "Id", "Type", "Times", "Item", "AddItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChapterRewardReq), global::ChapterRewardReq.Parser, new[]{ "Chapter" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChapterRewardResp), global::ChapterRewardResp.Parser, new[]{ "Chapter", "AddItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///挑战结果 --默认主线
/// </summary>
public sealed partial class PveResultReq : pb::IMessage<PveResultReq> {
  private static readonly pb::MessageParser<PveResultReq> _parser = new pb::MessageParser<PveResultReq>(() => new PveResultReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PveResultReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PveReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PveResultReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PveResultReq(PveResultReq other) : this() {
    id_ = other.id_;
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PveResultReq Clone() {
    return new PveResultReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///主线关卡id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  ///0-失败 1-胜利  
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PveResultReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PveResultReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PveResultReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PveResultResp : pb::IMessage<PveResultResp> {
  private static readonly pb::MessageParser<PveResultResp> _parser = new pb::MessageParser<PveResultResp>(() => new PveResultResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PveResultResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PveReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PveResultResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PveResultResp(PveResultResp other) : this() {
    id_ = other.id_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PveResultResp Clone() {
    return new PveResultResp(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///主线关卡id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///增加的道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PveResultResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PveResultResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PveResultResp other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///挑战结果 --Boss关卡
/// </summary>
public sealed partial class PveResultBossReq : pb::IMessage<PveResultBossReq> {
  private static readonly pb::MessageParser<PveResultBossReq> _parser = new pb::MessageParser<PveResultBossReq>(() => new PveResultBossReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PveResultBossReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PveReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PveResultBossReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PveResultBossReq(PveResultBossReq other) : this() {
    id_ = other.id_;
    result_ = other.result_;
    chapter_ = other.chapter_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PveResultBossReq Clone() {
    return new PveResultBossReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///当前boss关卡id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  ///0-失败 1-胜利
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "chapter" field.</summary>
  public const int ChapterFieldNumber = 3;
  private int chapter_;
  /// <summary>
  ///章节  0-人界 1-仙界
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Chapter {
    get { return chapter_; }
    set {
      chapter_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PveResultBossReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PveResultBossReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Result != other.Result) return false;
    if (Chapter != other.Chapter) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Chapter != 0) hash ^= Chapter.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (Chapter != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Chapter);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Chapter != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PveResultBossReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Chapter != 0) {
      Chapter = other.Chapter;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 24: {
          Chapter = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PveResultBossResp : pb::IMessage<PveResultBossResp> {
  private static readonly pb::MessageParser<PveResultBossResp> _parser = new pb::MessageParser<PveResultBossResp>(() => new PveResultBossResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PveResultBossResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PveReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PveResultBossResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PveResultBossResp(PveResultBossResp other) : this() {
    addItem_ = other.addItem_.Clone();
    id_ = other.id_;
    chapter_ = other.chapter_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PveResultBossResp Clone() {
    return new PveResultBossResp(this);
  }

  /// <summary>Field number for the "addItem" field.</summary>
  public const int AddItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_addItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> addItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///增加的道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> AddItem {
    get { return addItem_; }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 3;
  private int id_;
  /// <summary>
  ///当前boss关卡id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "chapter" field.</summary>
  public const int ChapterFieldNumber = 4;
  private int chapter_;
  /// <summary>
  ///章节  0-人界 1-仙界
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Chapter {
    get { return chapter_; }
    set {
      chapter_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PveResultBossResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PveResultBossResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!AddItem.Equals(other.AddItem)) return false;
    if (Id != other.Id) return false;
    if (Chapter != other.Chapter) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= AddItem.GetHashCode();
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Chapter != 0) hash ^= Chapter.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    addItem_.WriteTo(output, _map_addItem_codec);
    if (Id != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Id);
    }
    if (Chapter != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Chapter);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += addItem_.CalculateSize(_map_addItem_codec);
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Chapter != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PveResultBossResp other) {
    if (other == null) {
      return;
    }
    addItem_.Add(other.addItem_);
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Chapter != 0) {
      Chapter = other.Chapter;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 18: {
          addItem_.AddEntriesFrom(input, _map_addItem_codec);
          break;
        }
        case 24: {
          Id = input.ReadInt32();
          break;
        }
        case 32: {
          Chapter = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class OperationReq : pb::IMessage<OperationReq> {
  private static readonly pb::MessageParser<OperationReq> _parser = new pb::MessageParser<OperationReq>(() => new OperationReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OperationReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PveReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OperationReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OperationReq(OperationReq other) : this() {
    id_ = other.id_;
    type_ = other.type_;
    cost_ = other.cost_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OperationReq Clone() {
    return new OperationReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  ///0人界 1仙界
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "cost" field.</summary>
  public const int CostFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_cost_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> cost_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Cost {
    get { return cost_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OperationReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OperationReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Type != other.Type) return false;
    if (!Cost.Equals(other.Cost)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    hash ^= Cost.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    cost_.WriteTo(output, _map_cost_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    size += cost_.CalculateSize(_map_cost_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OperationReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    cost_.Add(other.cost_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 26: {
          cost_.AddEntriesFrom(input, _map_cost_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class OperationResp : pb::IMessage<OperationResp> {
  private static readonly pb::MessageParser<OperationResp> _parser = new pb::MessageParser<OperationResp>(() => new OperationResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OperationResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PveReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OperationResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OperationResp(OperationResp other) : this() {
    id_ = other.id_;
    type_ = other.type_;
    times_ = other.times_;
    item_ = other.item_.Clone();
    addItem_ = other.addItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OperationResp Clone() {
    return new OperationResp(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "times" field.</summary>
  public const int TimesFieldNumber = 3;
  private int times_;
  /// <summary>
  ///扫荡次数  
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Times {
    get { return times_; }
    set {
      times_ = value;
    }
  }

  /// <summary>Field number for the "item" field.</summary>
  public const int ItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_item_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> item_ = new pbc::MapField<int, int>();
  /// <summary>
  ///当前所有道具 --客户端item 先清空后覆盖   
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Item {
    get { return item_; }
  }

  /// <summary>Field number for the "addItem" field.</summary>
  public const int AddItemFieldNumber = 5;
  private static readonly pbc::MapField<int, int>.Codec _map_addItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 42);
  private readonly pbc::MapField<int, int> addItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///增加的道具,客户端显示用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> AddItem {
    get { return addItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OperationResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OperationResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Type != other.Type) return false;
    if (Times != other.Times) return false;
    if (!Item.Equals(other.Item)) return false;
    if (!AddItem.Equals(other.AddItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Times != 0) hash ^= Times.GetHashCode();
    hash ^= Item.GetHashCode();
    hash ^= AddItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (Times != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Times);
    }
    item_.WriteTo(output, _map_item_codec);
    addItem_.WriteTo(output, _map_addItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Times != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
    }
    size += item_.CalculateSize(_map_item_codec);
    size += addItem_.CalculateSize(_map_addItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OperationResp other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Times != 0) {
      Times = other.Times;
    }
    item_.Add(other.item_);
    addItem_.Add(other.addItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 24: {
          Times = input.ReadInt32();
          break;
        }
        case 34: {
          item_.AddEntriesFrom(input, _map_item_codec);
          break;
        }
        case 42: {
          addItem_.AddEntriesFrom(input, _map_addItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///领取章节奖励 
/// </summary>
public sealed partial class ChapterRewardReq : pb::IMessage<ChapterRewardReq> {
  private static readonly pb::MessageParser<ChapterRewardReq> _parser = new pb::MessageParser<ChapterRewardReq>(() => new ChapterRewardReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChapterRewardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PveReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterRewardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterRewardReq(ChapterRewardReq other) : this() {
    chapter_ = other.chapter_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterRewardReq Clone() {
    return new ChapterRewardReq(this);
  }

  /// <summary>Field number for the "chapter" field.</summary>
  public const int ChapterFieldNumber = 1;
  private int chapter_;
  /// <summary>
  ///章节id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Chapter {
    get { return chapter_; }
    set {
      chapter_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChapterRewardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChapterRewardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Chapter != other.Chapter) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Chapter != 0) hash ^= Chapter.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Chapter != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Chapter);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Chapter != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChapterRewardReq other) {
    if (other == null) {
      return;
    }
    if (other.Chapter != 0) {
      Chapter = other.Chapter;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Chapter = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ChapterRewardResp : pb::IMessage<ChapterRewardResp> {
  private static readonly pb::MessageParser<ChapterRewardResp> _parser = new pb::MessageParser<ChapterRewardResp>(() => new ChapterRewardResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChapterRewardResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PveReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterRewardResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterRewardResp(ChapterRewardResp other) : this() {
    chapter_ = other.chapter_;
    addItem_ = other.addItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterRewardResp Clone() {
    return new ChapterRewardResp(this);
  }

  /// <summary>Field number for the "chapter" field.</summary>
  public const int ChapterFieldNumber = 1;
  private int chapter_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Chapter {
    get { return chapter_; }
    set {
      chapter_ = value;
    }
  }

  /// <summary>Field number for the "addItem" field.</summary>
  public const int AddItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_addItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> addItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> AddItem {
    get { return addItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChapterRewardResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChapterRewardResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Chapter != other.Chapter) return false;
    if (!AddItem.Equals(other.AddItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Chapter != 0) hash ^= Chapter.GetHashCode();
    hash ^= AddItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Chapter != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Chapter);
    }
    addItem_.WriteTo(output, _map_addItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Chapter != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
    }
    size += addItem_.CalculateSize(_map_addItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChapterRewardResp other) {
    if (other == null) {
      return;
    }
    if (other.Chapter != 0) {
      Chapter = other.Chapter;
    }
    addItem_.Add(other.addItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Chapter = input.ReadInt32();
          break;
        }
        case 18: {
          addItem_.AddEntriesFrom(input, _map_addItem_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
