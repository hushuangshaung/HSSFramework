// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: challengeboss.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from challengeboss.proto</summary>
public static partial class ChallengebossReflection {

  #region Descriptor
  /// <summary>File descriptor for challengeboss.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ChallengebossReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChNjaGFsbGVuZ2Vib3NzLnByb3RvGgpiZWFuLnByb3RvIhIKEENoYWxsZW5n",
          "ZUluZm9SZXEiPAoRQ2hhbGxlbmdlSW5mb1Jlc3ASJwoNY2hhbGxlbmdlSW5m",
          "bxgBIAEoCzIQLkNoYWxsZW5nZUluZm9QYiI7ChdDaGFsbGVuZ2VCYXR0bGVT",
          "dGFydFJlcRIQCghib3NzVHlwZRgBIAEoBRIOCgZib3NzSWQYAiABKAUiSgoY",
          "Q2hhbGxlbmdlQmF0dGxlU3RhcnRSZXNwEhAKCGJvc3NUeXBlGAEgASgFEg4K",
          "BmJvc3NJZBgCIAEoBRIMCgRzZWVkGAMgASgFInoKEkNoYWxsZW5nZVJlc3Vs",
          "dFJlcRIQCghib3NzVHlwZRgBIAEoBRIOCgZib3NzSWQYAiABKAUSDgoGcmVz",
          "dWx0GAMgASgFEhQKDGJvc3NIcFBhcmFtcxgEIAEoBRIMCgRzZWVkGAUgASgF",
          "Eg4KBmRhbWFnZRgGIAEoBSKrAQoTQ2hhbGxlbmdlUmVzdWx0UmVzcBI4Cgpj",
          "aGFuZ2VJdGVtGAEgAygLMiQuQ2hhbGxlbmdlUmVzdWx0UmVzcC5DaGFuZ2VJ",
          "dGVtRW50cnkSJwoNY2hhbGxlbmdlSW5mbxgCIAEoCzIQLkNoYWxsZW5nZUlu",
          "Zm9QYhoxCg9DaGFuZ2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVl",
          "GAIgASgFOgI4ASI5ChVDaGFsbGVuZ2VTd2VlcEJvc3NSZXESEAoIYm9zc1R5",
          "cGUYASABKAUSDgoGYm9zc0lkGAIgASgFIrEBChZDaGFsbGVuZ2VTd2VlcEJv",
          "c3NSZXNwEjsKCmNoYW5nZUl0ZW0YASADKAsyJy5DaGFsbGVuZ2VTd2VlcEJv",
          "c3NSZXNwLkNoYW5nZUl0ZW1FbnRyeRInCg1jaGFsbGVuZ2VJbmZvGAIgASgL",
          "MhAuQ2hhbGxlbmdlSW5mb1BiGjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNrZXkY",
          "ASABKAUSDQoFdmFsdWUYAiABKAU6AjgBQhkKCmNvbS5jYi5tc2dCC1BCQ2hh",
          "bGxlbmdlYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ChallengeInfoReq), global::ChallengeInfoReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChallengeInfoResp), global::ChallengeInfoResp.Parser, new[]{ "ChallengeInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChallengeBattleStartReq), global::ChallengeBattleStartReq.Parser, new[]{ "BossType", "BossId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChallengeBattleStartResp), global::ChallengeBattleStartResp.Parser, new[]{ "BossType", "BossId", "Seed" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChallengeResultReq), global::ChallengeResultReq.Parser, new[]{ "BossType", "BossId", "Result", "BossHpParams", "Seed", "Damage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChallengeResultResp), global::ChallengeResultResp.Parser, new[]{ "ChangeItem", "ChallengeInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChallengeSweepBossReq), global::ChallengeSweepBossReq.Parser, new[]{ "BossType", "BossId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChallengeSweepBossResp), global::ChallengeSweepBossResp.Parser, new[]{ "ChangeItem", "ChallengeInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ChallengeInfoReq : pb::IMessage<ChallengeInfoReq> {
  private static readonly pb::MessageParser<ChallengeInfoReq> _parser = new pb::MessageParser<ChallengeInfoReq>(() => new ChallengeInfoReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChallengeInfoReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChallengebossReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeInfoReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeInfoReq(ChallengeInfoReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeInfoReq Clone() {
    return new ChallengeInfoReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChallengeInfoReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChallengeInfoReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChallengeInfoReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class ChallengeInfoResp : pb::IMessage<ChallengeInfoResp> {
  private static readonly pb::MessageParser<ChallengeInfoResp> _parser = new pb::MessageParser<ChallengeInfoResp>(() => new ChallengeInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChallengeInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChallengebossReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeInfoResp(ChallengeInfoResp other) : this() {
    ChallengeInfo = other.challengeInfo_ != null ? other.ChallengeInfo.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeInfoResp Clone() {
    return new ChallengeInfoResp(this);
  }

  /// <summary>Field number for the "challengeInfo" field.</summary>
  public const int ChallengeInfoFieldNumber = 1;
  private global::ChallengeInfoPb challengeInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ChallengeInfoPb ChallengeInfo {
    get { return challengeInfo_; }
    set {
      challengeInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChallengeInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChallengeInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ChallengeInfo, other.ChallengeInfo)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (challengeInfo_ != null) hash ^= ChallengeInfo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (challengeInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ChallengeInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (challengeInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChallengeInfo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChallengeInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.challengeInfo_ != null) {
      if (challengeInfo_ == null) {
        challengeInfo_ = new global::ChallengeInfoPb();
      }
      ChallengeInfo.MergeFrom(other.ChallengeInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (challengeInfo_ == null) {
            challengeInfo_ = new global::ChallengeInfoPb();
          }
          input.ReadMessage(challengeInfo_);
          break;
        }
      }
    }
  }

}

/// <summary>
///挑战开始
/// </summary>
public sealed partial class ChallengeBattleStartReq : pb::IMessage<ChallengeBattleStartReq> {
  private static readonly pb::MessageParser<ChallengeBattleStartReq> _parser = new pb::MessageParser<ChallengeBattleStartReq>(() => new ChallengeBattleStartReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChallengeBattleStartReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChallengebossReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeBattleStartReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeBattleStartReq(ChallengeBattleStartReq other) : this() {
    bossType_ = other.bossType_;
    bossId_ = other.bossId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeBattleStartReq Clone() {
    return new ChallengeBattleStartReq(this);
  }

  /// <summary>Field number for the "bossType" field.</summary>
  public const int BossTypeFieldNumber = 1;
  private int bossType_;
  /// <summary>
  /// 1 野外boss；2悬赏boss
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossType {
    get { return bossType_; }
    set {
      bossType_ = value;
    }
  }

  /// <summary>Field number for the "bossId" field.</summary>
  public const int BossIdFieldNumber = 2;
  private int bossId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossId {
    get { return bossId_; }
    set {
      bossId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChallengeBattleStartReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChallengeBattleStartReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BossType != other.BossType) return false;
    if (BossId != other.BossId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BossType != 0) hash ^= BossType.GetHashCode();
    if (BossId != 0) hash ^= BossId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BossType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BossType);
    }
    if (BossId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BossId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BossType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossType);
    }
    if (BossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChallengeBattleStartReq other) {
    if (other == null) {
      return;
    }
    if (other.BossType != 0) {
      BossType = other.BossType;
    }
    if (other.BossId != 0) {
      BossId = other.BossId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BossType = input.ReadInt32();
          break;
        }
        case 16: {
          BossId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ChallengeBattleStartResp : pb::IMessage<ChallengeBattleStartResp> {
  private static readonly pb::MessageParser<ChallengeBattleStartResp> _parser = new pb::MessageParser<ChallengeBattleStartResp>(() => new ChallengeBattleStartResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChallengeBattleStartResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChallengebossReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeBattleStartResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeBattleStartResp(ChallengeBattleStartResp other) : this() {
    bossType_ = other.bossType_;
    bossId_ = other.bossId_;
    seed_ = other.seed_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeBattleStartResp Clone() {
    return new ChallengeBattleStartResp(this);
  }

  /// <summary>Field number for the "bossType" field.</summary>
  public const int BossTypeFieldNumber = 1;
  private int bossType_;
  /// <summary>
  /// 1 野外boss；2悬赏boss
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossType {
    get { return bossType_; }
    set {
      bossType_ = value;
    }
  }

  /// <summary>Field number for the "bossId" field.</summary>
  public const int BossIdFieldNumber = 2;
  private int bossId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossId {
    get { return bossId_; }
    set {
      bossId_ = value;
    }
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 3;
  private int seed_;
  /// <summary>
  /// 后端随机种子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChallengeBattleStartResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChallengeBattleStartResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BossType != other.BossType) return false;
    if (BossId != other.BossId) return false;
    if (Seed != other.Seed) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BossType != 0) hash ^= BossType.GetHashCode();
    if (BossId != 0) hash ^= BossId.GetHashCode();
    if (Seed != 0) hash ^= Seed.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BossType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BossType);
    }
    if (BossId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BossId);
    }
    if (Seed != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Seed);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BossType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossType);
    }
    if (BossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
    }
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChallengeBattleStartResp other) {
    if (other == null) {
      return;
    }
    if (other.BossType != 0) {
      BossType = other.BossType;
    }
    if (other.BossId != 0) {
      BossId = other.BossId;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BossType = input.ReadInt32();
          break;
        }
        case 16: {
          BossId = input.ReadInt32();
          break;
        }
        case 24: {
          Seed = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///挑战结果
/// </summary>
public sealed partial class ChallengeResultReq : pb::IMessage<ChallengeResultReq> {
  private static readonly pb::MessageParser<ChallengeResultReq> _parser = new pb::MessageParser<ChallengeResultReq>(() => new ChallengeResultReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChallengeResultReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChallengebossReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeResultReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeResultReq(ChallengeResultReq other) : this() {
    bossType_ = other.bossType_;
    bossId_ = other.bossId_;
    result_ = other.result_;
    bossHpParams_ = other.bossHpParams_;
    seed_ = other.seed_;
    damage_ = other.damage_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeResultReq Clone() {
    return new ChallengeResultReq(this);
  }

  /// <summary>Field number for the "bossType" field.</summary>
  public const int BossTypeFieldNumber = 1;
  private int bossType_;
  /// <summary>
  /// 1 野外boss；2悬赏boss
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossType {
    get { return bossType_; }
    set {
      bossType_ = value;
    }
  }

  /// <summary>Field number for the "bossId" field.</summary>
  public const int BossIdFieldNumber = 2;
  private int bossId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossId {
    get { return bossId_; }
    set {
      bossId_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 3;
  private int result_;
  /// <summary>
  ///0-失败 1-胜利  
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "bossHpParams" field.</summary>
  public const int BossHpParamsFieldNumber = 4;
  private int bossHpParams_;
  /// <summary>
  /// 悬赏boss打掉的HP
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossHpParams {
    get { return bossHpParams_; }
    set {
      bossHpParams_ = value;
    }
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 5;
  private int seed_;
  /// <summary>
  /// 后端随机种子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  /// <summary>Field number for the "damage" field.</summary>
  public const int DamageFieldNumber = 6;
  private int damage_;
  /// <summary>
  /// 伤害
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Damage {
    get { return damage_; }
    set {
      damage_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChallengeResultReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChallengeResultReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BossType != other.BossType) return false;
    if (BossId != other.BossId) return false;
    if (Result != other.Result) return false;
    if (BossHpParams != other.BossHpParams) return false;
    if (Seed != other.Seed) return false;
    if (Damage != other.Damage) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BossType != 0) hash ^= BossType.GetHashCode();
    if (BossId != 0) hash ^= BossId.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (BossHpParams != 0) hash ^= BossHpParams.GetHashCode();
    if (Seed != 0) hash ^= Seed.GetHashCode();
    if (Damage != 0) hash ^= Damage.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BossType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BossType);
    }
    if (BossId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BossId);
    }
    if (Result != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
    if (BossHpParams != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(BossHpParams);
    }
    if (Seed != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Seed);
    }
    if (Damage != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Damage);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BossType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossType);
    }
    if (BossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (BossHpParams != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossHpParams);
    }
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    if (Damage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChallengeResultReq other) {
    if (other == null) {
      return;
    }
    if (other.BossType != 0) {
      BossType = other.BossType;
    }
    if (other.BossId != 0) {
      BossId = other.BossId;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.BossHpParams != 0) {
      BossHpParams = other.BossHpParams;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
    if (other.Damage != 0) {
      Damage = other.Damage;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BossType = input.ReadInt32();
          break;
        }
        case 16: {
          BossId = input.ReadInt32();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
        case 32: {
          BossHpParams = input.ReadInt32();
          break;
        }
        case 40: {
          Seed = input.ReadInt32();
          break;
        }
        case 48: {
          Damage = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ChallengeResultResp : pb::IMessage<ChallengeResultResp> {
  private static readonly pb::MessageParser<ChallengeResultResp> _parser = new pb::MessageParser<ChallengeResultResp>(() => new ChallengeResultResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChallengeResultResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChallengebossReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeResultResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeResultResp(ChallengeResultResp other) : this() {
    changeItem_ = other.changeItem_.Clone();
    ChallengeInfo = other.challengeInfo_ != null ? other.ChallengeInfo.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeResultResp Clone() {
    return new ChallengeResultResp(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///增加的道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "challengeInfo" field.</summary>
  public const int ChallengeInfoFieldNumber = 2;
  private global::ChallengeInfoPb challengeInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ChallengeInfoPb ChallengeInfo {
    get { return challengeInfo_; }
    set {
      challengeInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChallengeResultResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChallengeResultResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (!object.Equals(ChallengeInfo, other.ChallengeInfo)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    if (challengeInfo_ != null) hash ^= ChallengeInfo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (challengeInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ChallengeInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (challengeInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChallengeInfo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChallengeResultResp other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
    if (other.challengeInfo_ != null) {
      if (challengeInfo_ == null) {
        challengeInfo_ = new global::ChallengeInfoPb();
      }
      ChallengeInfo.MergeFrom(other.ChallengeInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 18: {
          if (challengeInfo_ == null) {
            challengeInfo_ = new global::ChallengeInfoPb();
          }
          input.ReadMessage(challengeInfo_);
          break;
        }
      }
    }
  }

}

/// <summary>
///速通 --Boss关卡
/// </summary>
public sealed partial class ChallengeSweepBossReq : pb::IMessage<ChallengeSweepBossReq> {
  private static readonly pb::MessageParser<ChallengeSweepBossReq> _parser = new pb::MessageParser<ChallengeSweepBossReq>(() => new ChallengeSweepBossReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChallengeSweepBossReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChallengebossReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeSweepBossReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeSweepBossReq(ChallengeSweepBossReq other) : this() {
    bossType_ = other.bossType_;
    bossId_ = other.bossId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeSweepBossReq Clone() {
    return new ChallengeSweepBossReq(this);
  }

  /// <summary>Field number for the "bossType" field.</summary>
  public const int BossTypeFieldNumber = 1;
  private int bossType_;
  /// <summary>
  /// 1 野外boss；2悬赏boss
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossType {
    get { return bossType_; }
    set {
      bossType_ = value;
    }
  }

  /// <summary>Field number for the "bossId" field.</summary>
  public const int BossIdFieldNumber = 2;
  private int bossId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossId {
    get { return bossId_; }
    set {
      bossId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChallengeSweepBossReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChallengeSweepBossReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BossType != other.BossType) return false;
    if (BossId != other.BossId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BossType != 0) hash ^= BossType.GetHashCode();
    if (BossId != 0) hash ^= BossId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BossType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BossType);
    }
    if (BossId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BossId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BossType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossType);
    }
    if (BossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChallengeSweepBossReq other) {
    if (other == null) {
      return;
    }
    if (other.BossType != 0) {
      BossType = other.BossType;
    }
    if (other.BossId != 0) {
      BossId = other.BossId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BossType = input.ReadInt32();
          break;
        }
        case 16: {
          BossId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ChallengeSweepBossResp : pb::IMessage<ChallengeSweepBossResp> {
  private static readonly pb::MessageParser<ChallengeSweepBossResp> _parser = new pb::MessageParser<ChallengeSweepBossResp>(() => new ChallengeSweepBossResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChallengeSweepBossResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ChallengebossReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeSweepBossResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeSweepBossResp(ChallengeSweepBossResp other) : this() {
    changeItem_ = other.changeItem_.Clone();
    ChallengeInfo = other.challengeInfo_ != null ? other.ChallengeInfo.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeSweepBossResp Clone() {
    return new ChallengeSweepBossResp(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///增加的道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "challengeInfo" field.</summary>
  public const int ChallengeInfoFieldNumber = 2;
  private global::ChallengeInfoPb challengeInfo_;
  /// <summary>
  /// 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ChallengeInfoPb ChallengeInfo {
    get { return challengeInfo_; }
    set {
      challengeInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChallengeSweepBossResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChallengeSweepBossResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (!object.Equals(ChallengeInfo, other.ChallengeInfo)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    if (challengeInfo_ != null) hash ^= ChallengeInfo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (challengeInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ChallengeInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (challengeInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChallengeInfo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChallengeSweepBossResp other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
    if (other.challengeInfo_ != null) {
      if (challengeInfo_ == null) {
        challengeInfo_ = new global::ChallengeInfoPb();
      }
      ChallengeInfo.MergeFrom(other.ChallengeInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 18: {
          if (challengeInfo_ == null) {
            challengeInfo_ = new global::ChallengeInfoPb();
          }
          input.ReadMessage(challengeInfo_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
