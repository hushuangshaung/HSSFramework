// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: petV2.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from petV2.proto</summary>
public static partial class PetV2Reflection {

  #region Descriptor
  /// <summary>File descriptor for petV2.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PetV2Reflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtwZXRWMi5wcm90bxoKYmVhbi5wcm90byIMCgpQZXRJbmZvUmVxIjAKC1Bl",
          "dEluZm9SZXNwEiEKC3BsYXllclBldFBiGAEgASgLMgwuUGxheWVyUGV0UGIi",
          "IwoNR2V0U2hvcFBldFJlcRISCgpyZWZyZXNoT3B0GAEgASgFIqgBCgtHZXRT",
          "aG9wUmVzcBIZCgVwZXRQYhgBIAEoCzIKLlNob3BQZXRQYhIyCgtjaGFuZ2V0",
          "SXRlbRgCIAMoCzIdLkdldFNob3BSZXNwLkNoYW5nZXRJdGVtRW50cnkSFgoO",
          "cmVmcmVzaFNob3BOdW0YAyABKAUaMgoQQ2hhbmdldEl0ZW1FbnRyeRILCgNr",
          "ZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIiQKDUJ1eVNob3BQZXRSZXES",
          "EwoLYnV5Q29uZmlnSWQYASABKAUizgEKDkJ1eVNob3BQZXRSZXNwEhEKCWJ1",
          "eVBldElkcxgBIAMoBRI1CgtjaGFuZ2V0SXRlbRgCIAMoCzIgLkJ1eVNob3BQ",
          "ZXRSZXNwLkNoYW5nZXRJdGVtRW50cnkSFgoGbmV3UGV0GAMgASgLMgYuUGV0",
          "UGISEgoKb3duUGV0TGlzdBgEIAMoBRISCgp0cmFtbWVsc0lkGAUgAygFGjIK",
          "EENoYW5nZXRJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgF",
          "OgI4ASIbCg1QZXRMZXZlbFVwUmVxEgoKAmlkGAEgASgFIo8BCg5QZXRMZXZl",
          "bFVwUmVzcBIVCgVwZXRQYhgBIAEoCzIGLlBldFBiEjMKCmNoYW5nZUl0ZW0Y",
          "AiADKAsyHy5QZXRMZXZlbFVwUmVzcC5DaGFuZ2VJdGVtRW50cnkaMQoPQ2hh",
          "bmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEi",
          "LgoNUGV0U3dhbGxvd1JlcRIKCgJpZBgBIAEoBRIRCgljb25zdW1lSWQYAiAB",
          "KAUimAIKDlBldFN3YWxsb3dSZXNwEhUKBXBldFBiGAEgASgLMgYuUGV0UGIS",
          "EQoJY29uc3VtZUlkGAIgASgFEjMKCmNoYW5nZUl0ZW0YAyADKAsyHy5QZXRT",
          "d2FsbG93UmVzcC5DaGFuZ2VJdGVtRW50cnkSNwoMY2hhbmdlUGV0TWFwGAQg",
          "AygLMiEuUGV0U3dhbGxvd1Jlc3AuQ2hhbmdlUGV0TWFwRW50cnkaMQoPQ2hh",
          "bmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEa",
          "OwoRQ2hhbmdlUGV0TWFwRW50cnkSCwoDa2V5GAEgASgFEhUKBXZhbHVlGAIg",
          "ASgLMgYuUGV0UGI6AjgBIikKDlBldE9wZXJhdG9yUmVxEgoKAmlkGAEgASgF",
          "EgsKA29wdBgCIAEoBSKRAgoPUGV0T3BlcmF0b3JSZXNwEgsKA29wdBgBIAEo",
          "BRIRCgljb25zdW1lSWQYAiABKAUSNAoKY2hhbmdlSXRlbRgDIAMoCzIgLlBl",
          "dE9wZXJhdG9yUmVzcC5DaGFuZ2VJdGVtRW50cnkSOAoMY2hhbmdlUGV0TWFw",
          "GAQgAygLMiIuUGV0T3BlcmF0b3JSZXNwLkNoYW5nZVBldE1hcEVudHJ5GjEK",
          "D0NoYW5nZUl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6",
          "AjgBGjsKEUNoYW5nZVBldE1hcEVudHJ5EgsKA2tleRgBIAEoBRIVCgV2YWx1",
          "ZRgCIAEoCzIGLlBldFBiOgI4ASIcCg5QZXRPbkJhdHRsZVJlcRIKCgJpZBgB",
          "IAEoBSIoCg9QZXRPbkJhdHRsZVJlc3ASFQoNb25CYXR0bGVQZXRJZBgBIAEo",
          "BSJECgtQZXRDaGVlclJlcRIPCgdjaGVlcklkGAEgASgFEhUKDWNoZWVyVGFy",
          "Z2V0SWQYAiABKAUSDQoFcG9zSWQYAyABKAUiKAoMUGV0Q2hlZXJSZXNwEhgK",
          "CHRhcmV0UGV0GAEgASgLMgYuUGV0UGIiRwoZUGV0UmVmcmVzaFBhc3NpdmVT",
          "a2lsbFJlcRIKCgJpZBgBIAEoBRIRCglsb2NrSW5kZXgYAiADKAUSCwoDb3B0",
          "GAMgASgFIrICChpQZXRSZWZyZXNoUGFzc2l2ZVNraWxsUmVzcBIKCgJpZBgB",
          "IAEoBRIZCgljaGFuZ2VQZXQYAiABKAsyBi5QZXRQYhI/CgpjaGFuZ2VJdGVt",
          "GAMgAygLMisuUGV0UmVmcmVzaFBhc3NpdmVTa2lsbFJlc3AuQ2hhbmdlSXRl",
          "bUVudHJ5EjsKCG5ld1NraWxsGAQgAygLMikuUGV0UmVmcmVzaFBhc3NpdmVT",
          "a2lsbFJlc3AuTmV3U2tpbGxFbnRyeRILCgNvcHQYBSABKAUaMQoPQ2hhbmdl",
          "SXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEaLwoN",
          "TmV3U2tpbGxFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgB",
          "IhkKC1BldEJsb29kUmVxEgoKAmlkGAEgASgFIokBCgxQZXRCbG9vZFJlc3AS",
          "EwoDcGV0GAEgASgLMgYuUGV0UGISMQoKY2hhbmdlSXRlbRgCIAMoCzIdLlBl",
          "dEJsb29kUmVzcC5DaGFuZ2VJdGVtRW50cnkaMQoPQ2hhbmdlSXRlbUVudHJ5",
          "EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiEgoQUGV0QmFnQnV5",
          "R3JpZFJlcSKWAQoRUGV0QmFnQnV5R3JpZFJlc3ASFgoOZGlhbW9uZEdyaWRO",
          "dW0YASABKAUSNgoKY2hhbmdlSXRlbRgCIAMoCzIiLlBldEJhZ0J1eUdyaWRS",
          "ZXNwLkNoYW5nZUl0ZW1FbnRyeRoxCg9DaGFuZ2VJdGVtRW50cnkSCwoDa2V5",
          "GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4AUIVCgpjb20uY2IubXNnQgdQQlBl",
          "dFYyYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PetInfoReq), global::PetInfoReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetInfoResp), global::PetInfoResp.Parser, new[]{ "PlayerPetPb" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetShopPetReq), global::GetShopPetReq.Parser, new[]{ "RefreshOpt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetShopResp), global::GetShopResp.Parser, new[]{ "PetPb", "ChangetItem", "RefreshShopNum" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyShopPetReq), global::BuyShopPetReq.Parser, new[]{ "BuyConfigId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyShopPetResp), global::BuyShopPetResp.Parser, new[]{ "BuyPetIds", "ChangetItem", "NewPet", "OwnPetList", "TrammelsId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetLevelUpReq), global::PetLevelUpReq.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetLevelUpResp), global::PetLevelUpResp.Parser, new[]{ "PetPb", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetSwallowReq), global::PetSwallowReq.Parser, new[]{ "Id", "ConsumeId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetSwallowResp), global::PetSwallowResp.Parser, new[]{ "PetPb", "ConsumeId", "ChangeItem", "ChangePetMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetOperatorReq), global::PetOperatorReq.Parser, new[]{ "Id", "Opt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetOperatorResp), global::PetOperatorResp.Parser, new[]{ "Opt", "ConsumeId", "ChangeItem", "ChangePetMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetOnBattleReq), global::PetOnBattleReq.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetOnBattleResp), global::PetOnBattleResp.Parser, new[]{ "OnBattlePetId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetCheerReq), global::PetCheerReq.Parser, new[]{ "CheerId", "CheerTargetId", "PosId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetCheerResp), global::PetCheerResp.Parser, new[]{ "TaretPet" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetRefreshPassiveSkillReq), global::PetRefreshPassiveSkillReq.Parser, new[]{ "Id", "LockIndex", "Opt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetRefreshPassiveSkillResp), global::PetRefreshPassiveSkillResp.Parser, new[]{ "Id", "ChangePet", "ChangeItem", "NewSkill", "Opt" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetBloodReq), global::PetBloodReq.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetBloodResp), global::PetBloodResp.Parser, new[]{ "Pet", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetBagBuyGridReq), global::PetBagBuyGridReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetBagBuyGridResp), global::PetBagBuyGridResp.Parser, new[]{ "DiamondGridNum", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///玩家宠物信息 
/// </summary>
public sealed partial class PetInfoReq : pb::IMessage<PetInfoReq> {
  private static readonly pb::MessageParser<PetInfoReq> _parser = new pb::MessageParser<PetInfoReq>(() => new PetInfoReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetInfoReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetInfoReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetInfoReq(PetInfoReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetInfoReq Clone() {
    return new PetInfoReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetInfoReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetInfoReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetInfoReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class PetInfoResp : pb::IMessage<PetInfoResp> {
  private static readonly pb::MessageParser<PetInfoResp> _parser = new pb::MessageParser<PetInfoResp>(() => new PetInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetInfoResp(PetInfoResp other) : this() {
    PlayerPetPb = other.playerPetPb_ != null ? other.PlayerPetPb.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetInfoResp Clone() {
    return new PetInfoResp(this);
  }

  /// <summary>Field number for the "playerPetPb" field.</summary>
  public const int PlayerPetPbFieldNumber = 1;
  private global::PlayerPetPb playerPetPb_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerPetPb PlayerPetPb {
    get { return playerPetPb_; }
    set {
      playerPetPb_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PlayerPetPb, other.PlayerPetPb)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (playerPetPb_ != null) hash ^= PlayerPetPb.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (playerPetPb_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PlayerPetPb);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (playerPetPb_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerPetPb);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.playerPetPb_ != null) {
      if (playerPetPb_ == null) {
        playerPetPb_ = new global::PlayerPetPb();
      }
      PlayerPetPb.MergeFrom(other.PlayerPetPb);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (playerPetPb_ == null) {
            playerPetPb_ = new global::PlayerPetPb();
          }
          input.ReadMessage(playerPetPb_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 获取商店
/// </summary>
public sealed partial class GetShopPetReq : pb::IMessage<GetShopPetReq> {
  private static readonly pb::MessageParser<GetShopPetReq> _parser = new pb::MessageParser<GetShopPetReq>(() => new GetShopPetReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetShopPetReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetShopPetReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetShopPetReq(GetShopPetReq other) : this() {
    refreshOpt_ = other.refreshOpt_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetShopPetReq Clone() {
    return new GetShopPetReq(this);
  }

  /// <summary>Field number for the "refreshOpt" field.</summary>
  public const int RefreshOptFieldNumber = 1;
  private int refreshOpt_;
  /// <summary>
  /// 0免费刷新; 1道具刷新;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RefreshOpt {
    get { return refreshOpt_; }
    set {
      refreshOpt_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetShopPetReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetShopPetReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RefreshOpt != other.RefreshOpt) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RefreshOpt != 0) hash ^= RefreshOpt.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RefreshOpt != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RefreshOpt);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RefreshOpt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshOpt);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetShopPetReq other) {
    if (other == null) {
      return;
    }
    if (other.RefreshOpt != 0) {
      RefreshOpt = other.RefreshOpt;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RefreshOpt = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GetShopResp : pb::IMessage<GetShopResp> {
  private static readonly pb::MessageParser<GetShopResp> _parser = new pb::MessageParser<GetShopResp>(() => new GetShopResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetShopResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetShopResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetShopResp(GetShopResp other) : this() {
    PetPb = other.petPb_ != null ? other.PetPb.Clone() : null;
    changetItem_ = other.changetItem_.Clone();
    refreshShopNum_ = other.refreshShopNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetShopResp Clone() {
    return new GetShopResp(this);
  }

  /// <summary>Field number for the "petPb" field.</summary>
  public const int PetPbFieldNumber = 1;
  private global::ShopPetPb petPb_;
  /// <summary>
  /// 新获得的
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ShopPetPb PetPb {
    get { return petPb_; }
    set {
      petPb_ = value;
    }
  }

  /// <summary>Field number for the "changetItem" field.</summary>
  public const int ChangetItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changetItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changetItem_ = new pbc::MapField<int, int>();
  /// <summary>
  /// 道具变化
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangetItem {
    get { return changetItem_; }
  }

  /// <summary>Field number for the "refreshShopNum" field.</summary>
  public const int RefreshShopNumFieldNumber = 3;
  private int refreshShopNum_;
  /// <summary>
  /// 刷新次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RefreshShopNum {
    get { return refreshShopNum_; }
    set {
      refreshShopNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetShopResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetShopResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PetPb, other.PetPb)) return false;
    if (!ChangetItem.Equals(other.ChangetItem)) return false;
    if (RefreshShopNum != other.RefreshShopNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (petPb_ != null) hash ^= PetPb.GetHashCode();
    hash ^= ChangetItem.GetHashCode();
    if (RefreshShopNum != 0) hash ^= RefreshShopNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (petPb_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PetPb);
    }
    changetItem_.WriteTo(output, _map_changetItem_codec);
    if (RefreshShopNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RefreshShopNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (petPb_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetPb);
    }
    size += changetItem_.CalculateSize(_map_changetItem_codec);
    if (RefreshShopNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshShopNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetShopResp other) {
    if (other == null) {
      return;
    }
    if (other.petPb_ != null) {
      if (petPb_ == null) {
        petPb_ = new global::ShopPetPb();
      }
      PetPb.MergeFrom(other.PetPb);
    }
    changetItem_.Add(other.changetItem_);
    if (other.RefreshShopNum != 0) {
      RefreshShopNum = other.RefreshShopNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (petPb_ == null) {
            petPb_ = new global::ShopPetPb();
          }
          input.ReadMessage(petPb_);
          break;
        }
        case 18: {
          changetItem_.AddEntriesFrom(input, _map_changetItem_codec);
          break;
        }
        case 24: {
          RefreshShopNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 购买
/// </summary>
public sealed partial class BuyShopPetReq : pb::IMessage<BuyShopPetReq> {
  private static readonly pb::MessageParser<BuyShopPetReq> _parser = new pb::MessageParser<BuyShopPetReq>(() => new BuyShopPetReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyShopPetReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyShopPetReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyShopPetReq(BuyShopPetReq other) : this() {
    buyConfigId_ = other.buyConfigId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyShopPetReq Clone() {
    return new BuyShopPetReq(this);
  }

  /// <summary>Field number for the "buyConfigId" field.</summary>
  public const int BuyConfigIdFieldNumber = 1;
  private int buyConfigId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuyConfigId {
    get { return buyConfigId_; }
    set {
      buyConfigId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyShopPetReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyShopPetReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BuyConfigId != other.BuyConfigId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BuyConfigId != 0) hash ^= BuyConfigId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BuyConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BuyConfigId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BuyConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyConfigId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyShopPetReq other) {
    if (other == null) {
      return;
    }
    if (other.BuyConfigId != 0) {
      BuyConfigId = other.BuyConfigId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BuyConfigId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class BuyShopPetResp : pb::IMessage<BuyShopPetResp> {
  private static readonly pb::MessageParser<BuyShopPetResp> _parser = new pb::MessageParser<BuyShopPetResp>(() => new BuyShopPetResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyShopPetResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyShopPetResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyShopPetResp(BuyShopPetResp other) : this() {
    buyPetIds_ = other.buyPetIds_.Clone();
    changetItem_ = other.changetItem_.Clone();
    NewPet = other.newPet_ != null ? other.NewPet.Clone() : null;
    ownPetList_ = other.ownPetList_.Clone();
    trammelsId_ = other.trammelsId_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyShopPetResp Clone() {
    return new BuyShopPetResp(this);
  }

  /// <summary>Field number for the "buyPetIds" field.</summary>
  public const int BuyPetIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_buyPetIds_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> buyPetIds_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 已经购买的宠物id;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> BuyPetIds {
    get { return buyPetIds_; }
  }

  /// <summary>Field number for the "changetItem" field.</summary>
  public const int ChangetItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changetItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changetItem_ = new pbc::MapField<int, int>();
  /// <summary>
  /// 道具变化
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangetItem {
    get { return changetItem_; }
  }

  /// <summary>Field number for the "newPet" field.</summary>
  public const int NewPetFieldNumber = 3;
  private global::PetPb newPet_;
  /// <summary>
  /// 新获得的宠物;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PetPb NewPet {
    get { return newPet_; }
    set {
      newPet_ = value;
    }
  }

  /// <summary>Field number for the "ownPetList" field.</summary>
  public const int OwnPetListFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_ownPetList_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> ownPetList_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 获取到的宠物id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> OwnPetList {
    get { return ownPetList_; }
  }

  /// <summary>Field number for the "trammelsId" field.</summary>
  public const int TrammelsIdFieldNumber = 5;
  private static readonly pb::FieldCodec<int> _repeated_trammelsId_codec
      = pb::FieldCodec.ForInt32(42);
  private readonly pbc::RepeatedField<int> trammelsId_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 激活的羁绊id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TrammelsId {
    get { return trammelsId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyShopPetResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyShopPetResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!buyPetIds_.Equals(other.buyPetIds_)) return false;
    if (!ChangetItem.Equals(other.ChangetItem)) return false;
    if (!object.Equals(NewPet, other.NewPet)) return false;
    if(!ownPetList_.Equals(other.ownPetList_)) return false;
    if(!trammelsId_.Equals(other.trammelsId_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= buyPetIds_.GetHashCode();
    hash ^= ChangetItem.GetHashCode();
    if (newPet_ != null) hash ^= NewPet.GetHashCode();
    hash ^= ownPetList_.GetHashCode();
    hash ^= trammelsId_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    buyPetIds_.WriteTo(output, _repeated_buyPetIds_codec);
    changetItem_.WriteTo(output, _map_changetItem_codec);
    if (newPet_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(NewPet);
    }
    ownPetList_.WriteTo(output, _repeated_ownPetList_codec);
    trammelsId_.WriteTo(output, _repeated_trammelsId_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += buyPetIds_.CalculateSize(_repeated_buyPetIds_codec);
    size += changetItem_.CalculateSize(_map_changetItem_codec);
    if (newPet_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewPet);
    }
    size += ownPetList_.CalculateSize(_repeated_ownPetList_codec);
    size += trammelsId_.CalculateSize(_repeated_trammelsId_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyShopPetResp other) {
    if (other == null) {
      return;
    }
    buyPetIds_.Add(other.buyPetIds_);
    changetItem_.Add(other.changetItem_);
    if (other.newPet_ != null) {
      if (newPet_ == null) {
        newPet_ = new global::PetPb();
      }
      NewPet.MergeFrom(other.NewPet);
    }
    ownPetList_.Add(other.ownPetList_);
    trammelsId_.Add(other.trammelsId_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          buyPetIds_.AddEntriesFrom(input, _repeated_buyPetIds_codec);
          break;
        }
        case 18: {
          changetItem_.AddEntriesFrom(input, _map_changetItem_codec);
          break;
        }
        case 26: {
          if (newPet_ == null) {
            newPet_ = new global::PetPb();
          }
          input.ReadMessage(newPet_);
          break;
        }
        case 34:
        case 32: {
          ownPetList_.AddEntriesFrom(input, _repeated_ownPetList_codec);
          break;
        }
        case 42:
        case 40: {
          trammelsId_.AddEntriesFrom(input, _repeated_trammelsId_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 升级
/// </summary>
public sealed partial class PetLevelUpReq : pb::IMessage<PetLevelUpReq> {
  private static readonly pb::MessageParser<PetLevelUpReq> _parser = new pb::MessageParser<PetLevelUpReq>(() => new PetLevelUpReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetLevelUpReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetLevelUpReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetLevelUpReq(PetLevelUpReq other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetLevelUpReq Clone() {
    return new PetLevelUpReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  /// 唯一id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetLevelUpReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetLevelUpReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetLevelUpReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PetLevelUpResp : pb::IMessage<PetLevelUpResp> {
  private static readonly pb::MessageParser<PetLevelUpResp> _parser = new pb::MessageParser<PetLevelUpResp>(() => new PetLevelUpResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetLevelUpResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetLevelUpResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetLevelUpResp(PetLevelUpResp other) : this() {
    PetPb = other.petPb_ != null ? other.PetPb.Clone() : null;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetLevelUpResp Clone() {
    return new PetLevelUpResp(this);
  }

  /// <summary>Field number for the "petPb" field.</summary>
  public const int PetPbFieldNumber = 1;
  private global::PetPb petPb_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PetPb PetPb {
    get { return petPb_; }
    set {
      petPb_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetLevelUpResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetLevelUpResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PetPb, other.PetPb)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (petPb_ != null) hash ^= PetPb.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (petPb_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PetPb);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (petPb_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetPb);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetLevelUpResp other) {
    if (other == null) {
      return;
    }
    if (other.petPb_ != null) {
      if (petPb_ == null) {
        petPb_ = new global::PetPb();
      }
      PetPb.MergeFrom(other.PetPb);
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (petPb_ == null) {
            petPb_ = new global::PetPb();
          }
          input.ReadMessage(petPb_);
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 吞噬
/// </summary>
public sealed partial class PetSwallowReq : pb::IMessage<PetSwallowReq> {
  private static readonly pb::MessageParser<PetSwallowReq> _parser = new pb::MessageParser<PetSwallowReq>(() => new PetSwallowReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetSwallowReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetSwallowReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetSwallowReq(PetSwallowReq other) : this() {
    id_ = other.id_;
    consumeId_ = other.consumeId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetSwallowReq Clone() {
    return new PetSwallowReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  /// 吞噬升级的宠物
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "consumeId" field.</summary>
  public const int ConsumeIdFieldNumber = 2;
  private int consumeId_;
  /// <summary>
  /// 消耗的宠物
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConsumeId {
    get { return consumeId_; }
    set {
      consumeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetSwallowReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetSwallowReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (ConsumeId != other.ConsumeId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (ConsumeId != 0) hash ^= ConsumeId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (ConsumeId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ConsumeId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (ConsumeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConsumeId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetSwallowReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.ConsumeId != 0) {
      ConsumeId = other.ConsumeId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          ConsumeId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PetSwallowResp : pb::IMessage<PetSwallowResp> {
  private static readonly pb::MessageParser<PetSwallowResp> _parser = new pb::MessageParser<PetSwallowResp>(() => new PetSwallowResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetSwallowResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetSwallowResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetSwallowResp(PetSwallowResp other) : this() {
    PetPb = other.petPb_ != null ? other.PetPb.Clone() : null;
    consumeId_ = other.consumeId_;
    changeItem_ = other.changeItem_.Clone();
    changePetMap_ = other.changePetMap_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetSwallowResp Clone() {
    return new PetSwallowResp(this);
  }

  /// <summary>Field number for the "petPb" field.</summary>
  public const int PetPbFieldNumber = 1;
  private global::PetPb petPb_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PetPb PetPb {
    get { return petPb_; }
    set {
      petPb_ = value;
    }
  }

  /// <summary>Field number for the "consumeId" field.</summary>
  public const int ConsumeIdFieldNumber = 2;
  private int consumeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConsumeId {
    get { return consumeId_; }
    set {
      consumeId_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "changePetMap" field.</summary>
  public const int ChangePetMapFieldNumber = 4;
  private static readonly pbc::MapField<int, global::PetPb>.Codec _map_changePetMap_codec
      = new pbc::MapField<int, global::PetPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PetPb.Parser), 34);
  private readonly pbc::MapField<int, global::PetPb> changePetMap_ = new pbc::MapField<int, global::PetPb>();
  /// <summary>
  /// 唯一id,pb
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::PetPb> ChangePetMap {
    get { return changePetMap_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetSwallowResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetSwallowResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PetPb, other.PetPb)) return false;
    if (ConsumeId != other.ConsumeId) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (!ChangePetMap.Equals(other.ChangePetMap)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (petPb_ != null) hash ^= PetPb.GetHashCode();
    if (ConsumeId != 0) hash ^= ConsumeId.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    hash ^= ChangePetMap.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (petPb_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PetPb);
    }
    if (ConsumeId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ConsumeId);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    changePetMap_.WriteTo(output, _map_changePetMap_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (petPb_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PetPb);
    }
    if (ConsumeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConsumeId);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    size += changePetMap_.CalculateSize(_map_changePetMap_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetSwallowResp other) {
    if (other == null) {
      return;
    }
    if (other.petPb_ != null) {
      if (petPb_ == null) {
        petPb_ = new global::PetPb();
      }
      PetPb.MergeFrom(other.PetPb);
    }
    if (other.ConsumeId != 0) {
      ConsumeId = other.ConsumeId;
    }
    changeItem_.Add(other.changeItem_);
    changePetMap_.Add(other.changePetMap_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (petPb_ == null) {
            petPb_ = new global::PetPb();
          }
          input.ReadMessage(petPb_);
          break;
        }
        case 16: {
          ConsumeId = input.ReadInt32();
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 34: {
          changePetMap_.AddEntriesFrom(input, _map_changePetMap_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 锁定、重置与放生
/// </summary>
public sealed partial class PetOperatorReq : pb::IMessage<PetOperatorReq> {
  private static readonly pb::MessageParser<PetOperatorReq> _parser = new pb::MessageParser<PetOperatorReq>(() => new PetOperatorReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetOperatorReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetOperatorReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetOperatorReq(PetOperatorReq other) : this() {
    id_ = other.id_;
    opt_ = other.opt_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetOperatorReq Clone() {
    return new PetOperatorReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "opt" field.</summary>
  public const int OptFieldNumber = 2;
  private int opt_;
  /// <summary>
  /// 1锁定、2重置、3放生
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Opt {
    get { return opt_; }
    set {
      opt_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetOperatorReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetOperatorReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Opt != other.Opt) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Opt != 0) hash ^= Opt.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Opt != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Opt);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Opt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opt);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetOperatorReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Opt != 0) {
      Opt = other.Opt;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Opt = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PetOperatorResp : pb::IMessage<PetOperatorResp> {
  private static readonly pb::MessageParser<PetOperatorResp> _parser = new pb::MessageParser<PetOperatorResp>(() => new PetOperatorResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetOperatorResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetOperatorResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetOperatorResp(PetOperatorResp other) : this() {
    opt_ = other.opt_;
    consumeId_ = other.consumeId_;
    changeItem_ = other.changeItem_.Clone();
    changePetMap_ = other.changePetMap_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetOperatorResp Clone() {
    return new PetOperatorResp(this);
  }

  /// <summary>Field number for the "opt" field.</summary>
  public const int OptFieldNumber = 1;
  private int opt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Opt {
    get { return opt_; }
    set {
      opt_ = value;
    }
  }

  /// <summary>Field number for the "consumeId" field.</summary>
  public const int ConsumeIdFieldNumber = 2;
  private int consumeId_;
  /// <summary>
  /// 消耗的宠物
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConsumeId {
    get { return consumeId_; }
    set {
      consumeId_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "changePetMap" field.</summary>
  public const int ChangePetMapFieldNumber = 4;
  private static readonly pbc::MapField<int, global::PetPb>.Codec _map_changePetMap_codec
      = new pbc::MapField<int, global::PetPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PetPb.Parser), 34);
  private readonly pbc::MapField<int, global::PetPb> changePetMap_ = new pbc::MapField<int, global::PetPb>();
  /// <summary>
  /// 唯一id,pb
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::PetPb> ChangePetMap {
    get { return changePetMap_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetOperatorResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetOperatorResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Opt != other.Opt) return false;
    if (ConsumeId != other.ConsumeId) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (!ChangePetMap.Equals(other.ChangePetMap)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Opt != 0) hash ^= Opt.GetHashCode();
    if (ConsumeId != 0) hash ^= ConsumeId.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    hash ^= ChangePetMap.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Opt != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Opt);
    }
    if (ConsumeId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ConsumeId);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    changePetMap_.WriteTo(output, _map_changePetMap_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Opt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opt);
    }
    if (ConsumeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConsumeId);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    size += changePetMap_.CalculateSize(_map_changePetMap_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetOperatorResp other) {
    if (other == null) {
      return;
    }
    if (other.Opt != 0) {
      Opt = other.Opt;
    }
    if (other.ConsumeId != 0) {
      ConsumeId = other.ConsumeId;
    }
    changeItem_.Add(other.changeItem_);
    changePetMap_.Add(other.changePetMap_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Opt = input.ReadInt32();
          break;
        }
        case 16: {
          ConsumeId = input.ReadInt32();
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 34: {
          changePetMap_.AddEntriesFrom(input, _map_changePetMap_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 出战
/// </summary>
public sealed partial class PetOnBattleReq : pb::IMessage<PetOnBattleReq> {
  private static readonly pb::MessageParser<PetOnBattleReq> _parser = new pb::MessageParser<PetOnBattleReq>(() => new PetOnBattleReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetOnBattleReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetOnBattleReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetOnBattleReq(PetOnBattleReq other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetOnBattleReq Clone() {
    return new PetOnBattleReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetOnBattleReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetOnBattleReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetOnBattleReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PetOnBattleResp : pb::IMessage<PetOnBattleResp> {
  private static readonly pb::MessageParser<PetOnBattleResp> _parser = new pb::MessageParser<PetOnBattleResp>(() => new PetOnBattleResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetOnBattleResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetOnBattleResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetOnBattleResp(PetOnBattleResp other) : this() {
    onBattlePetId_ = other.onBattlePetId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetOnBattleResp Clone() {
    return new PetOnBattleResp(this);
  }

  /// <summary>Field number for the "onBattlePetId" field.</summary>
  public const int OnBattlePetIdFieldNumber = 1;
  private int onBattlePetId_;
  /// <summary>
  /// 出战宠物ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OnBattlePetId {
    get { return onBattlePetId_; }
    set {
      onBattlePetId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetOnBattleResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetOnBattleResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OnBattlePetId != other.OnBattlePetId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OnBattlePetId != 0) hash ^= OnBattlePetId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OnBattlePetId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(OnBattlePetId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OnBattlePetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnBattlePetId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetOnBattleResp other) {
    if (other == null) {
      return;
    }
    if (other.OnBattlePetId != 0) {
      OnBattlePetId = other.OnBattlePetId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          OnBattlePetId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 助战
/// </summary>
public sealed partial class PetCheerReq : pb::IMessage<PetCheerReq> {
  private static readonly pb::MessageParser<PetCheerReq> _parser = new pb::MessageParser<PetCheerReq>(() => new PetCheerReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetCheerReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetCheerReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetCheerReq(PetCheerReq other) : this() {
    cheerId_ = other.cheerId_;
    cheerTargetId_ = other.cheerTargetId_;
    posId_ = other.posId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetCheerReq Clone() {
    return new PetCheerReq(this);
  }

  /// <summary>Field number for the "cheerId" field.</summary>
  public const int CheerIdFieldNumber = 1;
  private int cheerId_;
  /// <summary>
  /// 助战的宠物Id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CheerId {
    get { return cheerId_; }
    set {
      cheerId_ = value;
    }
  }

  /// <summary>Field number for the "cheerTargetId" field.</summary>
  public const int CheerTargetIdFieldNumber = 2;
  private int cheerTargetId_;
  /// <summary>
  /// 主宠物（携带助战宠物主体）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CheerTargetId {
    get { return cheerTargetId_; }
    set {
      cheerTargetId_ = value;
    }
  }

  /// <summary>Field number for the "posId" field.</summary>
  public const int PosIdFieldNumber = 3;
  private int posId_;
  /// <summary>
  /// 上阵位置：1、2、3
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PosId {
    get { return posId_; }
    set {
      posId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetCheerReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetCheerReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CheerId != other.CheerId) return false;
    if (CheerTargetId != other.CheerTargetId) return false;
    if (PosId != other.PosId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CheerId != 0) hash ^= CheerId.GetHashCode();
    if (CheerTargetId != 0) hash ^= CheerTargetId.GetHashCode();
    if (PosId != 0) hash ^= PosId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CheerId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CheerId);
    }
    if (CheerTargetId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CheerTargetId);
    }
    if (PosId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PosId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CheerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheerId);
    }
    if (CheerTargetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheerTargetId);
    }
    if (PosId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetCheerReq other) {
    if (other == null) {
      return;
    }
    if (other.CheerId != 0) {
      CheerId = other.CheerId;
    }
    if (other.CheerTargetId != 0) {
      CheerTargetId = other.CheerTargetId;
    }
    if (other.PosId != 0) {
      PosId = other.PosId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          CheerId = input.ReadInt32();
          break;
        }
        case 16: {
          CheerTargetId = input.ReadInt32();
          break;
        }
        case 24: {
          PosId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PetCheerResp : pb::IMessage<PetCheerResp> {
  private static readonly pb::MessageParser<PetCheerResp> _parser = new pb::MessageParser<PetCheerResp>(() => new PetCheerResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetCheerResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetCheerResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetCheerResp(PetCheerResp other) : this() {
    TaretPet = other.taretPet_ != null ? other.TaretPet.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetCheerResp Clone() {
    return new PetCheerResp(this);
  }

  /// <summary>Field number for the "taretPet" field.</summary>
  public const int TaretPetFieldNumber = 1;
  private global::PetPb taretPet_;
  /// <summary>
  /// 被助战的宠物
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PetPb TaretPet {
    get { return taretPet_; }
    set {
      taretPet_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetCheerResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetCheerResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(TaretPet, other.TaretPet)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (taretPet_ != null) hash ^= TaretPet.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (taretPet_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(TaretPet);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (taretPet_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaretPet);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetCheerResp other) {
    if (other == null) {
      return;
    }
    if (other.taretPet_ != null) {
      if (taretPet_ == null) {
        taretPet_ = new global::PetPb();
      }
      TaretPet.MergeFrom(other.TaretPet);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (taretPet_ == null) {
            taretPet_ = new global::PetPb();
          }
          input.ReadMessage(taretPet_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 洗炼-刷被动技能
/// </summary>
public sealed partial class PetRefreshPassiveSkillReq : pb::IMessage<PetRefreshPassiveSkillReq> {
  private static readonly pb::MessageParser<PetRefreshPassiveSkillReq> _parser = new pb::MessageParser<PetRefreshPassiveSkillReq>(() => new PetRefreshPassiveSkillReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetRefreshPassiveSkillReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetRefreshPassiveSkillReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetRefreshPassiveSkillReq(PetRefreshPassiveSkillReq other) : this() {
    id_ = other.id_;
    lockIndex_ = other.lockIndex_.Clone();
    opt_ = other.opt_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetRefreshPassiveSkillReq Clone() {
    return new PetRefreshPassiveSkillReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "lockIndex" field.</summary>
  public const int LockIndexFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_lockIndex_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> lockIndex_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 锁定的技能map的key
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> LockIndex {
    get { return lockIndex_; }
  }

  /// <summary>Field number for the "opt" field.</summary>
  public const int OptFieldNumber = 3;
  private int opt_;
  /// <summary>
  /// 1洗炼, 2替换, 3放弃
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Opt {
    get { return opt_; }
    set {
      opt_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetRefreshPassiveSkillReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetRefreshPassiveSkillReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!lockIndex_.Equals(other.lockIndex_)) return false;
    if (Opt != other.Opt) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    hash ^= lockIndex_.GetHashCode();
    if (Opt != 0) hash ^= Opt.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    lockIndex_.WriteTo(output, _repeated_lockIndex_codec);
    if (Opt != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Opt);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    size += lockIndex_.CalculateSize(_repeated_lockIndex_codec);
    if (Opt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opt);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetRefreshPassiveSkillReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    lockIndex_.Add(other.lockIndex_);
    if (other.Opt != 0) {
      Opt = other.Opt;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          lockIndex_.AddEntriesFrom(input, _repeated_lockIndex_codec);
          break;
        }
        case 24: {
          Opt = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PetRefreshPassiveSkillResp : pb::IMessage<PetRefreshPassiveSkillResp> {
  private static readonly pb::MessageParser<PetRefreshPassiveSkillResp> _parser = new pb::MessageParser<PetRefreshPassiveSkillResp>(() => new PetRefreshPassiveSkillResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetRefreshPassiveSkillResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetRefreshPassiveSkillResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetRefreshPassiveSkillResp(PetRefreshPassiveSkillResp other) : this() {
    id_ = other.id_;
    ChangePet = other.changePet_ != null ? other.ChangePet.Clone() : null;
    changeItem_ = other.changeItem_.Clone();
    newSkill_ = other.newSkill_.Clone();
    opt_ = other.opt_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetRefreshPassiveSkillResp Clone() {
    return new PetRefreshPassiveSkillResp(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "changePet" field.</summary>
  public const int ChangePetFieldNumber = 2;
  private global::PetPb changePet_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PetPb ChangePet {
    get { return changePet_; }
    set {
      changePet_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "newSkill" field.</summary>
  public const int NewSkillFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_newSkill_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> newSkill_ = new pbc::MapField<int, int>();
  /// <summary>
  /// 洗炼出的新技能
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> NewSkill {
    get { return newSkill_; }
  }

  /// <summary>Field number for the "opt" field.</summary>
  public const int OptFieldNumber = 5;
  private int opt_;
  /// <summary>
  /// 1洗炼, 2替换
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Opt {
    get { return opt_; }
    set {
      opt_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetRefreshPassiveSkillResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetRefreshPassiveSkillResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!object.Equals(ChangePet, other.ChangePet)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (!NewSkill.Equals(other.NewSkill)) return false;
    if (Opt != other.Opt) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (changePet_ != null) hash ^= ChangePet.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    hash ^= NewSkill.GetHashCode();
    if (Opt != 0) hash ^= Opt.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (changePet_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ChangePet);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    newSkill_.WriteTo(output, _map_newSkill_codec);
    if (Opt != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Opt);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (changePet_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangePet);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    size += newSkill_.CalculateSize(_map_newSkill_codec);
    if (Opt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opt);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetRefreshPassiveSkillResp other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.changePet_ != null) {
      if (changePet_ == null) {
        changePet_ = new global::PetPb();
      }
      ChangePet.MergeFrom(other.ChangePet);
    }
    changeItem_.Add(other.changeItem_);
    newSkill_.Add(other.newSkill_);
    if (other.Opt != 0) {
      Opt = other.Opt;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          if (changePet_ == null) {
            changePet_ = new global::PetPb();
          }
          input.ReadMessage(changePet_);
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 34: {
          newSkill_.AddEntriesFrom(input, _map_newSkill_codec);
          break;
        }
        case 40: {
          Opt = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PetBloodReq : pb::IMessage<PetBloodReq> {
  private static readonly pb::MessageParser<PetBloodReq> _parser = new pb::MessageParser<PetBloodReq>(() => new PetBloodReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetBloodReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetBloodReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetBloodReq(PetBloodReq other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetBloodReq Clone() {
    return new PetBloodReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetBloodReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetBloodReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetBloodReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PetBloodResp : pb::IMessage<PetBloodResp> {
  private static readonly pb::MessageParser<PetBloodResp> _parser = new pb::MessageParser<PetBloodResp>(() => new PetBloodResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetBloodResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetBloodResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetBloodResp(PetBloodResp other) : this() {
    Pet = other.pet_ != null ? other.Pet.Clone() : null;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetBloodResp Clone() {
    return new PetBloodResp(this);
  }

  /// <summary>Field number for the "pet" field.</summary>
  public const int PetFieldNumber = 1;
  private global::PetPb pet_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PetPb Pet {
    get { return pet_; }
    set {
      pet_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetBloodResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetBloodResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Pet, other.Pet)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (pet_ != null) hash ^= Pet.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (pet_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Pet);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (pet_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pet);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetBloodResp other) {
    if (other == null) {
      return;
    }
    if (other.pet_ != null) {
      if (pet_ == null) {
        pet_ = new global::PetPb();
      }
      Pet.MergeFrom(other.Pet);
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (pet_ == null) {
            pet_ = new global::PetPb();
          }
          input.ReadMessage(pet_);
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PetBagBuyGridReq : pb::IMessage<PetBagBuyGridReq> {
  private static readonly pb::MessageParser<PetBagBuyGridReq> _parser = new pb::MessageParser<PetBagBuyGridReq>(() => new PetBagBuyGridReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetBagBuyGridReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetBagBuyGridReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetBagBuyGridReq(PetBagBuyGridReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetBagBuyGridReq Clone() {
    return new PetBagBuyGridReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetBagBuyGridReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetBagBuyGridReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetBagBuyGridReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class PetBagBuyGridResp : pb::IMessage<PetBagBuyGridResp> {
  private static readonly pb::MessageParser<PetBagBuyGridResp> _parser = new pb::MessageParser<PetBagBuyGridResp>(() => new PetBagBuyGridResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetBagBuyGridResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PetV2Reflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetBagBuyGridResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetBagBuyGridResp(PetBagBuyGridResp other) : this() {
    diamondGridNum_ = other.diamondGridNum_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetBagBuyGridResp Clone() {
    return new PetBagBuyGridResp(this);
  }

  /// <summary>Field number for the "diamondGridNum" field.</summary>
  public const int DiamondGridNumFieldNumber = 1;
  private int diamondGridNum_;
  /// <summary>
  /// 钻石开启格子数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DiamondGridNum {
    get { return diamondGridNum_; }
    set {
      diamondGridNum_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetBagBuyGridResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetBagBuyGridResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DiamondGridNum != other.DiamondGridNum) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DiamondGridNum != 0) hash ^= DiamondGridNum.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DiamondGridNum != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(DiamondGridNum);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DiamondGridNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiamondGridNum);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetBagBuyGridResp other) {
    if (other == null) {
      return;
    }
    if (other.DiamondGridNum != 0) {
      DiamondGridNum = other.DiamondGridNum;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DiamondGridNum = input.ReadInt32();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
