// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pvp.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from pvp.proto</summary>
public static partial class PvpReflection {

  #region Descriptor
  /// <summary>File descriptor for pvp.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PvpReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CglwdnAucHJvdG8aCmJlYW4ucHJvdG8iHwoKUHZwTGlzdFJlcRIRCglpc1Jl",
          "ZnJlc2gYASABKAUiqwEKC1B2cExpc3RSZXNwEiQKCXB2cFBsYXllchgBIAMo",
          "CzIRLlBsYXllclJhbmtJbmZvUGISMAoKY2hhbmdlSXRlbRgCIAMoCzIcLlB2",
          "cExpc3RSZXNwLkNoYW5nZUl0ZW1FbnRyeRIRCglmcmVzaFRpbWUYAyABKAMa",
          "MQoPQ2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEo",
          "BToCOAEiJQoRUHZwQmF0dGxlU3RhcnRSZXESEAoIb3Bwb25lbnQYASABKAUi",
          "9AEKElB2cEJhdHRsZVN0YXJ0UmVzcBINCgVwdnBpZBgBIAEoBRIQCghsYXVu",
          "Y2hlchgCIAEoBRIQCghvcHBvbmVudBgDIAEoBRI3CgpjaGFuZ2VJdGVtGAQg",
          "AygLMiMuUHZwQmF0dGxlU3RhcnRSZXNwLkNoYW5nZUl0ZW1FbnRyeRIQCghw",
          "dnBUaW1lcxgFIAEoBRIMCgRzZWVkGAYgASgFEh8KCXB2cFBsYXllchgHIAEo",
          "CzIMLlB2cFBsYXllclBiGjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNrZXkYASAB",
          "KAUSDQoFdmFsdWUYAiABKAU6AjgBIkEKD1B2cEJhdHRsZUVuZFJlcRIMCgRz",
          "ZWVkGAEgASgFEg4KBnJlc3VsdBgCIAEoBRIQCghvcHBvbmVudBgDIAEoBSK0",
          "AgoQUHZwQmF0dGxlRW5kUmVzcBIOCgZyZXN1bHQYASABKAUSNQoKY2hhbmdl",
          "SXRlbRgCIAMoCzIhLlB2cEJhdHRsZUVuZFJlc3AuQ2hhbmdlSXRlbUVudHJ5",
          "EgwKBHJhbmsYAyABKAUSDgoGY2hSYW5rGAQgASgFEhAKCGludGVncmFsGAUg",
          "ASgFEhIKCmNoSW50ZWdyYWwYBiABKAUSDwoHb3BfcmFuaxgHIAEoBRIRCglv",
          "cF9jaFJhbmsYCCABKAUSEwoLb3BfaW50ZWdyYWwYCSABKAUSFQoNb3BfY2hJ",
          "bnRlZ3JhbBgKIAEoBRISCgpvcHBvbmVudElkGAsgASgFGjEKD0NoYW5nZUl0",
          "ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIkIKDVB2",
          "cFJldmVuZ2VSZXESEgoKb3Bwb25lbnRJZBgBIAEoBRIOCgZyZXN1bHQYAiAB",
          "KAUSDQoFaW5kZXgYAyABKAUiqwIKDlB2cFJldmVuZ2VSZXNwEg4KBnJlc3Vs",
          "dBgBIAEoBRIzCgpjaGFuZ2VJdGVtGAIgAygLMh8uUHZwUmV2ZW5nZVJlc3Au",
          "Q2hhbmdlSXRlbUVudHJ5Eg0KBWluZGV4GAMgASgFEgwKBHJhbmsYDSABKAUS",
          "DgoGY2hSYW5rGA4gASgFEhAKCGludGVncmFsGA8gASgFEhIKCmNoSW50ZWdy",
          "YWwYECABKAUSDwoHb3BfcmFuaxgRIAEoBRIRCglvcF9jaFJhbmsYEiABKAUS",
          "EwoLb3BfaW50ZWdyYWwYEyABKAUSFQoNb3BfY2hJbnRlZ3JhbBgUIAEoBRox",
          "Cg9DaGFuZ2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgF",
          "OgI4ASIpCgtSYW5rSW5mb1JlcRIMCgRwYWdlGAEgASgFEgwKBHR5cGUYAiAB",
          "KAUihAEKDFJhbmtJbmZvUmVzcBIfCgRyYW5rGAEgAygLMhEuUGxheWVyUmFu",
          "a0luZm9QYhIfCgRzZWxmGAIgASgLMhEuUGxheWVyUmFua0luZm9QYhIRCglz",
          "ZWxmX3JhbmsYAyABKAUSEQoJcmFua0RlbHRhGAQgASgFEgwKBHR5cGUYBSAB",
          "KAUiCwoJUHZwTG9nUmVwIiQKClB2cExvZ1Jlc3ASFgoDbG9nGAEgAygLMgku",
          "UHZwTG9nUGJCEwoKY29tLmNiLm1zZ0IFUEJQdnBiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpListReq), global::PvpListReq.Parser, new[]{ "IsRefresh" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpListResp), global::PvpListResp.Parser, new[]{ "PvpPlayer", "ChangeItem", "FreshTime" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpBattleStartReq), global::PvpBattleStartReq.Parser, new[]{ "Opponent" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpBattleStartResp), global::PvpBattleStartResp.Parser, new[]{ "Pvpid", "Launcher", "Opponent", "ChangeItem", "PvpTimes", "Seed", "PvpPlayer" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpBattleEndReq), global::PvpBattleEndReq.Parser, new[]{ "Seed", "Result", "Opponent" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpBattleEndResp), global::PvpBattleEndResp.Parser, new[]{ "Result", "ChangeItem", "Rank", "ChRank", "Integral", "ChIntegral", "OpRank", "OpChRank", "OpIntegral", "OpChIntegral", "OpponentId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpRevengeReq), global::PvpRevengeReq.Parser, new[]{ "OpponentId", "Result", "Index" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpRevengeResp), global::PvpRevengeResp.Parser, new[]{ "Result", "ChangeItem", "Index", "Rank", "ChRank", "Integral", "ChIntegral", "OpRank", "OpChRank", "OpIntegral", "OpChIntegral" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::RankInfoReq), global::RankInfoReq.Parser, new[]{ "Page", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RankInfoResp), global::RankInfoResp.Parser, new[]{ "Rank", "Self", "SelfRank", "RankDelta", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpLogRep), global::PvpLogRep.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpLogResp), global::PvpLogResp.Parser, new[]{ "Log" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///挑战列表
/// </summary>
public sealed partial class PvpListReq : pb::IMessage<PvpListReq> {
  private static readonly pb::MessageParser<PvpListReq> _parser = new pb::MessageParser<PvpListReq>(() => new PvpListReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpListReq(PvpListReq other) : this() {
    isRefresh_ = other.isRefresh_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpListReq Clone() {
    return new PvpListReq(this);
  }

  /// <summary>Field number for the "isRefresh" field.</summary>
  public const int IsRefreshFieldNumber = 1;
  private int isRefresh_;
  /// <summary>
  ///1-刷新  0-不刷新
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsRefresh {
    get { return isRefresh_; }
    set {
      isRefresh_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsRefresh != other.IsRefresh) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsRefresh != 0) hash ^= IsRefresh.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsRefresh != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(IsRefresh);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsRefresh != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsRefresh);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpListReq other) {
    if (other == null) {
      return;
    }
    if (other.IsRefresh != 0) {
      IsRefresh = other.IsRefresh;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          IsRefresh = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PvpListResp : pb::IMessage<PvpListResp> {
  private static readonly pb::MessageParser<PvpListResp> _parser = new pb::MessageParser<PvpListResp>(() => new PvpListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpListResp(PvpListResp other) : this() {
    pvpPlayer_ = other.pvpPlayer_.Clone();
    changeItem_ = other.changeItem_.Clone();
    freshTime_ = other.freshTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpListResp Clone() {
    return new PvpListResp(this);
  }

  /// <summary>Field number for the "pvpPlayer" field.</summary>
  public const int PvpPlayerFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PlayerRankInfoPb> _repeated_pvpPlayer_codec
      = pb::FieldCodec.ForMessage(10, global::PlayerRankInfoPb.Parser);
  private readonly pbc::RepeatedField<global::PlayerRankInfoPb> pvpPlayer_ = new pbc::RepeatedField<global::PlayerRankInfoPb>();
  /// <summary>
  ///挑战玩家
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerRankInfoPb> PvpPlayer {
    get { return pvpPlayer_; }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///changeItem-改变量 item-全量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "freshTime" field.</summary>
  public const int FreshTimeFieldNumber = 3;
  private long freshTime_;
  /// <summary>
  /// 刷新时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FreshTime {
    get { return freshTime_; }
    set {
      freshTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!pvpPlayer_.Equals(other.pvpPlayer_)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (FreshTime != other.FreshTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= pvpPlayer_.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    if (FreshTime != 0L) hash ^= FreshTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pvpPlayer_.WriteTo(output, _repeated_pvpPlayer_codec);
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (FreshTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(FreshTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += pvpPlayer_.CalculateSize(_repeated_pvpPlayer_codec);
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (FreshTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FreshTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpListResp other) {
    if (other == null) {
      return;
    }
    pvpPlayer_.Add(other.pvpPlayer_);
    changeItem_.Add(other.changeItem_);
    if (other.FreshTime != 0L) {
      FreshTime = other.FreshTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          pvpPlayer_.AddEntriesFrom(input, _repeated_pvpPlayer_codec);
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 24: {
          FreshTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///发起挑战,
/// </summary>
public sealed partial class PvpBattleStartReq : pb::IMessage<PvpBattleStartReq> {
  private static readonly pb::MessageParser<PvpBattleStartReq> _parser = new pb::MessageParser<PvpBattleStartReq>(() => new PvpBattleStartReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpBattleStartReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpBattleStartReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpBattleStartReq(PvpBattleStartReq other) : this() {
    opponent_ = other.opponent_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpBattleStartReq Clone() {
    return new PvpBattleStartReq(this);
  }

  /// <summary>Field number for the "opponent" field.</summary>
  public const int OpponentFieldNumber = 1;
  private int opponent_;
  /// <summary>
  ///对手pid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Opponent {
    get { return opponent_; }
    set {
      opponent_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpBattleStartReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpBattleStartReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Opponent != other.Opponent) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Opponent != 0) hash ^= Opponent.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Opponent != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Opponent);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Opponent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opponent);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpBattleStartReq other) {
    if (other == null) {
      return;
    }
    if (other.Opponent != 0) {
      Opponent = other.Opponent;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Opponent = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///发起挑战resp, 是否可以开始战斗，以这个resp为准
/// </summary>
public sealed partial class PvpBattleStartResp : pb::IMessage<PvpBattleStartResp> {
  private static readonly pb::MessageParser<PvpBattleStartResp> _parser = new pb::MessageParser<PvpBattleStartResp>(() => new PvpBattleStartResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpBattleStartResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpBattleStartResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpBattleStartResp(PvpBattleStartResp other) : this() {
    pvpid_ = other.pvpid_;
    launcher_ = other.launcher_;
    opponent_ = other.opponent_;
    changeItem_ = other.changeItem_.Clone();
    pvpTimes_ = other.pvpTimes_;
    seed_ = other.seed_;
    PvpPlayer = other.pvpPlayer_ != null ? other.PvpPlayer.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpBattleStartResp Clone() {
    return new PvpBattleStartResp(this);
  }

  /// <summary>Field number for the "pvpid" field.</summary>
  public const int PvpidFieldNumber = 1;
  private int pvpid_;
  /// <summary>
  ///这场对决的id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pvpid {
    get { return pvpid_; }
    set {
      pvpid_ = value;
    }
  }

  /// <summary>Field number for the "launcher" field.</summary>
  public const int LauncherFieldNumber = 2;
  private int launcher_;
  /// <summary>
  ///发起者 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Launcher {
    get { return launcher_; }
    set {
      launcher_ = value;
    }
  }

  /// <summary>Field number for the "opponent" field.</summary>
  public const int OpponentFieldNumber = 3;
  private int opponent_;
  /// <summary>
  ///对手pid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Opponent {
    get { return opponent_; }
    set {
      opponent_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "pvpTimes" field.</summary>
  public const int PvpTimesFieldNumber = 5;
  private int pvpTimes_;
  /// <summary>
  /// 废弃
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PvpTimes {
    get { return pvpTimes_; }
    set {
      pvpTimes_ = value;
    }
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 6;
  private int seed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  /// <summary>Field number for the "pvpPlayer" field.</summary>
  public const int PvpPlayerFieldNumber = 7;
  private global::PvpPlayerPb pvpPlayer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PvpPlayerPb PvpPlayer {
    get { return pvpPlayer_; }
    set {
      pvpPlayer_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpBattleStartResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpBattleStartResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pvpid != other.Pvpid) return false;
    if (Launcher != other.Launcher) return false;
    if (Opponent != other.Opponent) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (PvpTimes != other.PvpTimes) return false;
    if (Seed != other.Seed) return false;
    if (!object.Equals(PvpPlayer, other.PvpPlayer)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pvpid != 0) hash ^= Pvpid.GetHashCode();
    if (Launcher != 0) hash ^= Launcher.GetHashCode();
    if (Opponent != 0) hash ^= Opponent.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    if (PvpTimes != 0) hash ^= PvpTimes.GetHashCode();
    if (Seed != 0) hash ^= Seed.GetHashCode();
    if (pvpPlayer_ != null) hash ^= PvpPlayer.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pvpid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pvpid);
    }
    if (Launcher != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Launcher);
    }
    if (Opponent != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Opponent);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (PvpTimes != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(PvpTimes);
    }
    if (Seed != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Seed);
    }
    if (pvpPlayer_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(PvpPlayer);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pvpid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pvpid);
    }
    if (Launcher != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Launcher);
    }
    if (Opponent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opponent);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (PvpTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PvpTimes);
    }
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    if (pvpPlayer_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PvpPlayer);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpBattleStartResp other) {
    if (other == null) {
      return;
    }
    if (other.Pvpid != 0) {
      Pvpid = other.Pvpid;
    }
    if (other.Launcher != 0) {
      Launcher = other.Launcher;
    }
    if (other.Opponent != 0) {
      Opponent = other.Opponent;
    }
    changeItem_.Add(other.changeItem_);
    if (other.PvpTimes != 0) {
      PvpTimes = other.PvpTimes;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
    if (other.pvpPlayer_ != null) {
      if (pvpPlayer_ == null) {
        pvpPlayer_ = new global::PvpPlayerPb();
      }
      PvpPlayer.MergeFrom(other.PvpPlayer);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pvpid = input.ReadInt32();
          break;
        }
        case 16: {
          Launcher = input.ReadInt32();
          break;
        }
        case 24: {
          Opponent = input.ReadInt32();
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 40: {
          PvpTimes = input.ReadInt32();
          break;
        }
        case 48: {
          Seed = input.ReadInt32();
          break;
        }
        case 58: {
          if (pvpPlayer_ == null) {
            pvpPlayer_ = new global::PvpPlayerPb();
          }
          input.ReadMessage(pvpPlayer_);
          break;
        }
      }
    }
  }

}

/// <summary>
///挑战结果 -- 胜利 and 失败 都需要发送
/// </summary>
public sealed partial class PvpBattleEndReq : pb::IMessage<PvpBattleEndReq> {
  private static readonly pb::MessageParser<PvpBattleEndReq> _parser = new pb::MessageParser<PvpBattleEndReq>(() => new PvpBattleEndReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpBattleEndReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpBattleEndReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpBattleEndReq(PvpBattleEndReq other) : this() {
    seed_ = other.seed_;
    result_ = other.result_;
    opponent_ = other.opponent_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpBattleEndReq Clone() {
    return new PvpBattleEndReq(this);
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 1;
  private int seed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  ///1-胜利 0-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "opponent" field.</summary>
  public const int OpponentFieldNumber = 3;
  private int opponent_;
  /// <summary>
  ///对手id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Opponent {
    get { return opponent_; }
    set {
      opponent_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpBattleEndReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpBattleEndReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Seed != other.Seed) return false;
    if (Result != other.Result) return false;
    if (Opponent != other.Opponent) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Seed != 0) hash ^= Seed.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Opponent != 0) hash ^= Opponent.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Seed != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Seed);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (Opponent != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Opponent);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Opponent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opponent);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpBattleEndReq other) {
    if (other == null) {
      return;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Opponent != 0) {
      Opponent = other.Opponent;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Seed = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 24: {
          Opponent = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PvpBattleEndResp : pb::IMessage<PvpBattleEndResp> {
  private static readonly pb::MessageParser<PvpBattleEndResp> _parser = new pb::MessageParser<PvpBattleEndResp>(() => new PvpBattleEndResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpBattleEndResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpBattleEndResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpBattleEndResp(PvpBattleEndResp other) : this() {
    result_ = other.result_;
    changeItem_ = other.changeItem_.Clone();
    rank_ = other.rank_;
    chRank_ = other.chRank_;
    integral_ = other.integral_;
    chIntegral_ = other.chIntegral_;
    opRank_ = other.opRank_;
    opChRank_ = other.opChRank_;
    opIntegral_ = other.opIntegral_;
    opChIntegral_ = other.opChIntegral_;
    opponentId_ = other.opponentId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpBattleEndResp Clone() {
    return new PvpBattleEndResp(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///1-胜利 0-失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///changeItem 结果值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 3;
  private int rank_;
  /// <summary>
  ///当前排名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rank {
    get { return rank_; }
    set {
      rank_ = value;
    }
  }

  /// <summary>Field number for the "chRank" field.</summary>
  public const int ChRankFieldNumber = 4;
  private int chRank_;
  /// <summary>
  ///改变的排名(可正可负)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChRank {
    get { return chRank_; }
    set {
      chRank_ = value;
    }
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 5;
  private int integral_;
  /// <summary>
  ///当前最新积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  /// <summary>Field number for the "chIntegral" field.</summary>
  public const int ChIntegralFieldNumber = 6;
  private int chIntegral_;
  /// <summary>
  ///改变的积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChIntegral {
    get { return chIntegral_; }
    set {
      chIntegral_ = value;
    }
  }

  /// <summary>Field number for the "op_rank" field.</summary>
  public const int OpRankFieldNumber = 7;
  private int opRank_;
  /// <summary>
  ///对手当前排名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OpRank {
    get { return opRank_; }
    set {
      opRank_ = value;
    }
  }

  /// <summary>Field number for the "op_chRank" field.</summary>
  public const int OpChRankFieldNumber = 8;
  private int opChRank_;
  /// <summary>
  ///对手改变的排名(可正可负)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OpChRank {
    get { return opChRank_; }
    set {
      opChRank_ = value;
    }
  }

  /// <summary>Field number for the "op_integral" field.</summary>
  public const int OpIntegralFieldNumber = 9;
  private int opIntegral_;
  /// <summary>
  ///对手当前积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OpIntegral {
    get { return opIntegral_; }
    set {
      opIntegral_ = value;
    }
  }

  /// <summary>Field number for the "op_chIntegral" field.</summary>
  public const int OpChIntegralFieldNumber = 10;
  private int opChIntegral_;
  /// <summary>
  ///对手改变的积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OpChIntegral {
    get { return opChIntegral_; }
    set {
      opChIntegral_ = value;
    }
  }

  /// <summary>Field number for the "opponentId" field.</summary>
  public const int OpponentIdFieldNumber = 11;
  private int opponentId_;
  /// <summary>
  ///对手id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OpponentId {
    get { return opponentId_; }
    set {
      opponentId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpBattleEndResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpBattleEndResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (Rank != other.Rank) return false;
    if (ChRank != other.ChRank) return false;
    if (Integral != other.Integral) return false;
    if (ChIntegral != other.ChIntegral) return false;
    if (OpRank != other.OpRank) return false;
    if (OpChRank != other.OpChRank) return false;
    if (OpIntegral != other.OpIntegral) return false;
    if (OpChIntegral != other.OpChIntegral) return false;
    if (OpponentId != other.OpponentId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    if (Rank != 0) hash ^= Rank.GetHashCode();
    if (ChRank != 0) hash ^= ChRank.GetHashCode();
    if (Integral != 0) hash ^= Integral.GetHashCode();
    if (ChIntegral != 0) hash ^= ChIntegral.GetHashCode();
    if (OpRank != 0) hash ^= OpRank.GetHashCode();
    if (OpChRank != 0) hash ^= OpChRank.GetHashCode();
    if (OpIntegral != 0) hash ^= OpIntegral.GetHashCode();
    if (OpChIntegral != 0) hash ^= OpChIntegral.GetHashCode();
    if (OpponentId != 0) hash ^= OpponentId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (Rank != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Rank);
    }
    if (ChRank != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ChRank);
    }
    if (Integral != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Integral);
    }
    if (ChIntegral != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(ChIntegral);
    }
    if (OpRank != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(OpRank);
    }
    if (OpChRank != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(OpChRank);
    }
    if (OpIntegral != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(OpIntegral);
    }
    if (OpChIntegral != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(OpChIntegral);
    }
    if (OpponentId != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(OpponentId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (Rank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
    }
    if (ChRank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChRank);
    }
    if (Integral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    if (ChIntegral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChIntegral);
    }
    if (OpRank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpRank);
    }
    if (OpChRank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpChRank);
    }
    if (OpIntegral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpIntegral);
    }
    if (OpChIntegral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpChIntegral);
    }
    if (OpponentId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpponentId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpBattleEndResp other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    changeItem_.Add(other.changeItem_);
    if (other.Rank != 0) {
      Rank = other.Rank;
    }
    if (other.ChRank != 0) {
      ChRank = other.ChRank;
    }
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
    if (other.ChIntegral != 0) {
      ChIntegral = other.ChIntegral;
    }
    if (other.OpRank != 0) {
      OpRank = other.OpRank;
    }
    if (other.OpChRank != 0) {
      OpChRank = other.OpChRank;
    }
    if (other.OpIntegral != 0) {
      OpIntegral = other.OpIntegral;
    }
    if (other.OpChIntegral != 0) {
      OpChIntegral = other.OpChIntegral;
    }
    if (other.OpponentId != 0) {
      OpponentId = other.OpponentId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 24: {
          Rank = input.ReadInt32();
          break;
        }
        case 32: {
          ChRank = input.ReadInt32();
          break;
        }
        case 40: {
          Integral = input.ReadInt32();
          break;
        }
        case 48: {
          ChIntegral = input.ReadInt32();
          break;
        }
        case 56: {
          OpRank = input.ReadInt32();
          break;
        }
        case 64: {
          OpChRank = input.ReadInt32();
          break;
        }
        case 72: {
          OpIntegral = input.ReadInt32();
          break;
        }
        case 80: {
          OpChIntegral = input.ReadInt32();
          break;
        }
        case 88: {
          OpponentId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///复仇结果 -- 收到resp后不再调用 PvpListReq  
/// </summary>
public sealed partial class PvpRevengeReq : pb::IMessage<PvpRevengeReq> {
  private static readonly pb::MessageParser<PvpRevengeReq> _parser = new pb::MessageParser<PvpRevengeReq>(() => new PvpRevengeReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpRevengeReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpRevengeReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpRevengeReq(PvpRevengeReq other) : this() {
    opponentId_ = other.opponentId_;
    result_ = other.result_;
    index_ = other.index_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpRevengeReq Clone() {
    return new PvpRevengeReq(this);
  }

  /// <summary>Field number for the "opponentId" field.</summary>
  public const int OpponentIdFieldNumber = 1;
  private int opponentId_;
  /// <summary>
  /// 对手id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OpponentId {
    get { return opponentId_; }
    set {
      opponentId_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  ///1-胜利 0-失败 ？？
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 3;
  private int index_;
  /// <summary>
  ///复仇列表下标，0开始
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpRevengeReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpRevengeReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OpponentId != other.OpponentId) return false;
    if (Result != other.Result) return false;
    if (Index != other.Index) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OpponentId != 0) hash ^= OpponentId.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OpponentId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(OpponentId);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (Index != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Index);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OpponentId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpponentId);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpRevengeReq other) {
    if (other == null) {
      return;
    }
    if (other.OpponentId != 0) {
      OpponentId = other.OpponentId;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          OpponentId = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 24: {
          Index = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PvpRevengeResp : pb::IMessage<PvpRevengeResp> {
  private static readonly pb::MessageParser<PvpRevengeResp> _parser = new pb::MessageParser<PvpRevengeResp>(() => new PvpRevengeResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpRevengeResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpRevengeResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpRevengeResp(PvpRevengeResp other) : this() {
    result_ = other.result_;
    changeItem_ = other.changeItem_.Clone();
    index_ = other.index_;
    rank_ = other.rank_;
    chRank_ = other.chRank_;
    integral_ = other.integral_;
    chIntegral_ = other.chIntegral_;
    opRank_ = other.opRank_;
    opChRank_ = other.opChRank_;
    opIntegral_ = other.opIntegral_;
    opChIntegral_ = other.opChIntegral_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpRevengeResp Clone() {
    return new PvpRevengeResp(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///1-胜利 0-失败 ？？
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 3;
  private int index_;
  /// <summary>
  ///复仇列表下标，0开始
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 13;
  private int rank_;
  /// <summary>
  ///当前排名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rank {
    get { return rank_; }
    set {
      rank_ = value;
    }
  }

  /// <summary>Field number for the "chRank" field.</summary>
  public const int ChRankFieldNumber = 14;
  private int chRank_;
  /// <summary>
  ///改变的排名(可正可负)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChRank {
    get { return chRank_; }
    set {
      chRank_ = value;
    }
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 15;
  private int integral_;
  /// <summary>
  ///当前最新积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  /// <summary>Field number for the "chIntegral" field.</summary>
  public const int ChIntegralFieldNumber = 16;
  private int chIntegral_;
  /// <summary>
  ///改变的积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChIntegral {
    get { return chIntegral_; }
    set {
      chIntegral_ = value;
    }
  }

  /// <summary>Field number for the "op_rank" field.</summary>
  public const int OpRankFieldNumber = 17;
  private int opRank_;
  /// <summary>
  ///对手当前排名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OpRank {
    get { return opRank_; }
    set {
      opRank_ = value;
    }
  }

  /// <summary>Field number for the "op_chRank" field.</summary>
  public const int OpChRankFieldNumber = 18;
  private int opChRank_;
  /// <summary>
  ///对手改变的排名(可正可负)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OpChRank {
    get { return opChRank_; }
    set {
      opChRank_ = value;
    }
  }

  /// <summary>Field number for the "op_integral" field.</summary>
  public const int OpIntegralFieldNumber = 19;
  private int opIntegral_;
  /// <summary>
  ///对手当前积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OpIntegral {
    get { return opIntegral_; }
    set {
      opIntegral_ = value;
    }
  }

  /// <summary>Field number for the "op_chIntegral" field.</summary>
  public const int OpChIntegralFieldNumber = 20;
  private int opChIntegral_;
  /// <summary>
  ///对手改变的积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OpChIntegral {
    get { return opChIntegral_; }
    set {
      opChIntegral_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpRevengeResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpRevengeResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (Index != other.Index) return false;
    if (Rank != other.Rank) return false;
    if (ChRank != other.ChRank) return false;
    if (Integral != other.Integral) return false;
    if (ChIntegral != other.ChIntegral) return false;
    if (OpRank != other.OpRank) return false;
    if (OpChRank != other.OpChRank) return false;
    if (OpIntegral != other.OpIntegral) return false;
    if (OpChIntegral != other.OpChIntegral) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Rank != 0) hash ^= Rank.GetHashCode();
    if (ChRank != 0) hash ^= ChRank.GetHashCode();
    if (Integral != 0) hash ^= Integral.GetHashCode();
    if (ChIntegral != 0) hash ^= ChIntegral.GetHashCode();
    if (OpRank != 0) hash ^= OpRank.GetHashCode();
    if (OpChRank != 0) hash ^= OpChRank.GetHashCode();
    if (OpIntegral != 0) hash ^= OpIntegral.GetHashCode();
    if (OpChIntegral != 0) hash ^= OpChIntegral.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (Index != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Index);
    }
    if (Rank != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(Rank);
    }
    if (ChRank != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(ChRank);
    }
    if (Integral != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(Integral);
    }
    if (ChIntegral != 0) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(ChIntegral);
    }
    if (OpRank != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(OpRank);
    }
    if (OpChRank != 0) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(OpChRank);
    }
    if (OpIntegral != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(OpIntegral);
    }
    if (OpChIntegral != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(OpChIntegral);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
    }
    if (Rank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
    }
    if (ChRank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChRank);
    }
    if (Integral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    if (ChIntegral != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ChIntegral);
    }
    if (OpRank != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpRank);
    }
    if (OpChRank != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpChRank);
    }
    if (OpIntegral != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpIntegral);
    }
    if (OpChIntegral != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(OpChIntegral);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpRevengeResp other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    changeItem_.Add(other.changeItem_);
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Rank != 0) {
      Rank = other.Rank;
    }
    if (other.ChRank != 0) {
      ChRank = other.ChRank;
    }
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
    if (other.ChIntegral != 0) {
      ChIntegral = other.ChIntegral;
    }
    if (other.OpRank != 0) {
      OpRank = other.OpRank;
    }
    if (other.OpChRank != 0) {
      OpChRank = other.OpChRank;
    }
    if (other.OpIntegral != 0) {
      OpIntegral = other.OpIntegral;
    }
    if (other.OpChIntegral != 0) {
      OpChIntegral = other.OpChIntegral;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 24: {
          Index = input.ReadInt32();
          break;
        }
        case 104: {
          Rank = input.ReadInt32();
          break;
        }
        case 112: {
          ChRank = input.ReadInt32();
          break;
        }
        case 120: {
          Integral = input.ReadInt32();
          break;
        }
        case 128: {
          ChIntegral = input.ReadInt32();
          break;
        }
        case 136: {
          OpRank = input.ReadInt32();
          break;
        }
        case 144: {
          OpChRank = input.ReadInt32();
          break;
        }
        case 152: {
          OpIntegral = input.ReadInt32();
          break;
        }
        case 160: {
          OpChIntegral = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 排行榜
/// </summary>
public sealed partial class RankInfoReq : pb::IMessage<RankInfoReq> {
  private static readonly pb::MessageParser<RankInfoReq> _parser = new pb::MessageParser<RankInfoReq>(() => new RankInfoReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RankInfoReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankInfoReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankInfoReq(RankInfoReq other) : this() {
    page_ = other.page_;
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankInfoReq Clone() {
    return new RankInfoReq(this);
  }

  /// <summary>Field number for the "page" field.</summary>
  public const int PageFieldNumber = 1;
  private int page_;
  /// <summary>
  ///分页页数，从0开始，每次加1	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Page {
    get { return page_; }
    set {
      page_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  /// 排行榜类型。 看表: ranking
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RankInfoReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RankInfoReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Page != other.Page) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Page != 0) hash ^= Page.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Page != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Page);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Page != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RankInfoReq other) {
    if (other == null) {
      return;
    }
    if (other.Page != 0) {
      Page = other.Page;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Page = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RankInfoResp : pb::IMessage<RankInfoResp> {
  private static readonly pb::MessageParser<RankInfoResp> _parser = new pb::MessageParser<RankInfoResp>(() => new RankInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RankInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankInfoResp(RankInfoResp other) : this() {
    rank_ = other.rank_.Clone();
    Self = other.self_ != null ? other.Self.Clone() : null;
    selfRank_ = other.selfRank_;
    rankDelta_ = other.rankDelta_;
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankInfoResp Clone() {
    return new RankInfoResp(this);
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PlayerRankInfoPb> _repeated_rank_codec
      = pb::FieldCodec.ForMessage(10, global::PlayerRankInfoPb.Parser);
  private readonly pbc::RepeatedField<global::PlayerRankInfoPb> rank_ = new pbc::RepeatedField<global::PlayerRankInfoPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerRankInfoPb> Rank {
    get { return rank_; }
  }

  /// <summary>Field number for the "self" field.</summary>
  public const int SelfFieldNumber = 2;
  private global::PlayerRankInfoPb self_;
  /// <summary>
  ///自己排名数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerRankInfoPb Self {
    get { return self_; }
    set {
      self_ = value;
    }
  }

  /// <summary>Field number for the "self_rank" field.</summary>
  public const int SelfRankFieldNumber = 3;
  private int selfRank_;
  /// <summary>
  ///自己排行名次
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SelfRank {
    get { return selfRank_; }
    set {
      selfRank_ = value;
    }
  }

  /// <summary>Field number for the "rankDelta" field.</summary>
  public const int RankDeltaFieldNumber = 4;
  private int rankDelta_;
  /// <summary>
  ///排名增量，
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RankDelta {
    get { return rankDelta_; }
    set {
      rankDelta_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 5;
  private int type_;
  /// <summary>
  /// 排行榜类型。 1竞技场；2悬赏boss；3爬塔
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RankInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RankInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!rank_.Equals(other.rank_)) return false;
    if (!object.Equals(Self, other.Self)) return false;
    if (SelfRank != other.SelfRank) return false;
    if (RankDelta != other.RankDelta) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= rank_.GetHashCode();
    if (self_ != null) hash ^= Self.GetHashCode();
    if (SelfRank != 0) hash ^= SelfRank.GetHashCode();
    if (RankDelta != 0) hash ^= RankDelta.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    rank_.WriteTo(output, _repeated_rank_codec);
    if (self_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Self);
    }
    if (SelfRank != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SelfRank);
    }
    if (RankDelta != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RankDelta);
    }
    if (Type != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += rank_.CalculateSize(_repeated_rank_codec);
    if (self_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
    }
    if (SelfRank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfRank);
    }
    if (RankDelta != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankDelta);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RankInfoResp other) {
    if (other == null) {
      return;
    }
    rank_.Add(other.rank_);
    if (other.self_ != null) {
      if (self_ == null) {
        self_ = new global::PlayerRankInfoPb();
      }
      Self.MergeFrom(other.Self);
    }
    if (other.SelfRank != 0) {
      SelfRank = other.SelfRank;
    }
    if (other.RankDelta != 0) {
      RankDelta = other.RankDelta;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          rank_.AddEntriesFrom(input, _repeated_rank_codec);
          break;
        }
        case 18: {
          if (self_ == null) {
            self_ = new global::PlayerRankInfoPb();
          }
          input.ReadMessage(self_);
          break;
        }
        case 24: {
          SelfRank = input.ReadInt32();
          break;
        }
        case 32: {
          RankDelta = input.ReadInt32();
          break;
        }
        case 40: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///pvp记录
/// </summary>
public sealed partial class PvpLogRep : pb::IMessage<PvpLogRep> {
  private static readonly pb::MessageParser<PvpLogRep> _parser = new pb::MessageParser<PvpLogRep>(() => new PvpLogRep());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpLogRep> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpLogRep() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpLogRep(PvpLogRep other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpLogRep Clone() {
    return new PvpLogRep(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpLogRep);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpLogRep other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpLogRep other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class PvpLogResp : pb::IMessage<PvpLogResp> {
  private static readonly pb::MessageParser<PvpLogResp> _parser = new pb::MessageParser<PvpLogResp>(() => new PvpLogResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpLogResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PvpReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpLogResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpLogResp(PvpLogResp other) : this() {
    log_ = other.log_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpLogResp Clone() {
    return new PvpLogResp(this);
  }

  /// <summary>Field number for the "log" field.</summary>
  public const int LogFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PvpLogPb> _repeated_log_codec
      = pb::FieldCodec.ForMessage(10, global::PvpLogPb.Parser);
  private readonly pbc::RepeatedField<global::PvpLogPb> log_ = new pbc::RepeatedField<global::PvpLogPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PvpLogPb> Log {
    get { return log_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpLogResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpLogResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!log_.Equals(other.log_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= log_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    log_.WriteTo(output, _repeated_log_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += log_.CalculateSize(_repeated_log_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpLogResp other) {
    if (other == null) {
      return;
    }
    log_.Add(other.log_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          log_.AddEntriesFrom(input, _repeated_log_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
