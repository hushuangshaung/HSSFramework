// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloudtravel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from cloudtravel.proto</summary>
public static partial class CloudtravelReflection {

  #region Descriptor
  /// <summary>File descriptor for cloudtravel.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CloudtravelReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFjbG91ZHRyYXZlbC5wcm90bxoKYmVhbi5wcm90byLPAwoTQ2xvdWRUcmF2",
          "ZWxEYXRhUmVzcBIsCgR0b29sGAEgAygLMh4uQ2xvdWRUcmF2ZWxEYXRhUmVz",
          "cC5Ub29sRW50cnkSDwoHY2xvdWRDZBgDIAEoBRINCgVtYXBpZBgEIAEoBRIQ",
          "CghtYXhNYXBJZBgFIAEoBRIsCgR0YXNrGAYgAygLMh4uQ2xvdWRUcmF2ZWxE",
          "YXRhUmVzcC5UYXNrRW50cnkSFgoOYWN0aXZlZEJvb2tNYXQYByADKAUSGAoD",
          "bWF0GAggASgLMgsuTWF0ZXJpYWxQYhI4CgpjaGFuZ2VJdGVtGAkgAygLMiQu",
          "Q2xvdWRUcmF2ZWxEYXRhUmVzcC5DaGFuZ2VJdGVtRW50cnkSEAoIYmF0dGxl",
          "SWQYCiABKAUaOQoJVG9vbEVudHJ5EgsKA2tleRgBIAEoBRIbCgV2YWx1ZRgC",
          "IAEoCzIMLkNsb3VkVG9vbFBiOgI4ARo+CglUYXNrRW50cnkSCwoDa2V5GAEg",
          "ASgFEiAKBXZhbHVlGAIgASgLMhEuQ2xvdWREYWlseVRhc2tQYjoCOAEaMQoP",
          "Q2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToC",
          "OAEiGgoIQmVnaW5SZXESDgoGZnVuZUlkGAEgASgFIoQDCglCZWdpblJlc3AS",
          "GAoDbWF0GAEgASgLMgsuTWF0ZXJpYWxQYhI2Cg5jaGFuZ2VCb29rQXR0chgC",
          "IAMoCzIeLkJlZ2luUmVzcC5DaGFuZ2VCb29rQXR0ckVudHJ5EigKB2Z1bmVO",
          "dW0YAyADKAsyFy5CZWdpblJlc3AuRnVuZU51bUVudHJ5Ei4KCmNoYW5nZUl0",
          "ZW0YBCADKAsyGi5CZWdpblJlc3AuQ2hhbmdlSXRlbUVudHJ5Eg8KB2Nsb3Vk",
          "Q2QYBSABKAUSDgoGcmVzdWx0GAYgASgFEhAKCGJhdHRsZUlkGAcgASgFGjUK",
          "E0NoYW5nZUJvb2tBdHRyRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
          "ASgFOgI4ARouCgxGdW5lTnVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVl",
          "GAIgASgFOgI4ARoxCg9DaGFuZ2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0K",
          "BXZhbHVlGAIgASgFOgI4ASJ8ChBNYXRlcmlhbFNhbGVSZXNwEjUKCmNoYW5n",
          "ZUl0ZW0YASADKAsyIS5NYXRlcmlhbFNhbGVSZXNwLkNoYW5nZUl0ZW1FbnRy",
          "eRoxCg9DaGFuZ2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
          "ASgFOgI4ASKTAgoTTWF0ZXJpYWxDb2xsZWN0UmVzcBIqCgNtYXQYASADKAsy",
          "HS5NYXRlcmlhbENvbGxlY3RSZXNwLk1hdEVudHJ5EgwKBHR5cGUYAiABKAUS",
          "TAoUdHJlYXN1cmVQYXZpbGlvbkF0dHIYAyADKAsyLi5NYXRlcmlhbENvbGxl",
          "Y3RSZXNwLlRyZWFzdXJlUGF2aWxpb25BdHRyRW50cnkaNwoITWF0RW50cnkS",
          "CwoDa2V5GAEgASgFEhoKBXZhbHVlGAIgASgLMgsuTWF0ZXJpYWxQYjoCOAEa",
          "OwoZVHJlYXN1cmVQYXZpbGlvbkF0dHJFbnRyeRILCgNrZXkYASABKAUSDQoF",
          "dmFsdWUYAiABKAU6AjgBIh8KD01hdGVyaWFsTGlzdFJlcRIMCgR0eXBlGAEg",
          "ASgFIoIBChBNYXRlcmlhbExpc3RSZXNwEgwKBHR5cGUYASABKAUSJwoDbWF0",
          "GAIgAygLMhouTWF0ZXJpYWxMaXN0UmVzcC5NYXRFbnRyeRo3CghNYXRFbnRy",
          "eRILCgNrZXkYASABKAUSGgoFdmFsdWUYAiABKAsyCy5NYXRlcmlhbFBiOgI4",
          "ASLyAQoUVHJlYXN1cmVQYXZpbGlvblJlc3ASMwoHcGF2QXR0chgBIAMoCzIi",
          "LlRyZWFzdXJlUGF2aWxpb25SZXNwLlBhdkF0dHJFbnRyeRI1Cghib29rQXR0",
          "chgCIAMoCzIjLlRyZWFzdXJlUGF2aWxpb25SZXNwLkJvb2tBdHRyRW50cnkS",
          "DQoFTGV2ZWwYAyABKAUaLgoMUGF2QXR0ckVudHJ5EgsKA2tleRgBIAEoBRIN",
          "CgV2YWx1ZRgCIAEoBToCOAEaLwoNQm9va0F0dHJFbnRyeRILCgNrZXkYASAB",
          "KAUSDQoFdmFsdWUYAiABKAU6AjgBIi8KEkJhZ01hdGVyaWFsU2FsZVJlcRIM",
          "CgR0eXBlGAEgASgFEgsKA3BvcxgCIAEoBSKBAgoTQmFnTWF0ZXJpYWxTYWxl",
          "UmVzcBIMCgR0eXBlGAEgASgFEgsKA3BvcxgCIAEoBRI4CgpjaGFuZ2VJdGVt",
          "GAMgAygLMiQuQmFnTWF0ZXJpYWxTYWxlUmVzcC5DaGFuZ2VJdGVtRW50cnkS",
          "MgoHcGF2QXR0chgEIAMoCzIhLkJhZ01hdGVyaWFsU2FsZVJlc3AuUGF2QXR0",
          "ckVudHJ5GjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFs",
          "dWUYAiABKAU6AjgBGi4KDFBhdkF0dHJFbnRyeRILCgNrZXkYASABKAUSDQoF",
          "dmFsdWUYAiABKAU6AjgBIo0BChBDbG91ZFJlY292ZXJSZXNwEg8KB2Nsb3Vk",
          "Q2QYASABKAUSNQoKY2hhbmdlSXRlbRgCIAMoCzIhLkNsb3VkUmVjb3ZlclJl",
          "c3AuQ2hhbmdlSXRlbUVudHJ5GjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNrZXkY",
          "ASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIo4BChRTdWNjaW5jdE9yUmVwbGFj",
          "ZVJlcRIKCgJvcBgBIAEoBRIOCgZ0b29sSWQYAiABKAUSLQoEY29zdBgDIAMo",
          "CzIfLlN1Y2NpbmN0T3JSZXBsYWNlUmVxLkNvc3RFbnRyeRorCglDb3N0RW50",
          "cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASLoAgoVU3VjY2lu",
          "Y3RPclJlcGxhY2VSZXNwEg4KBnRvb2xJZBgBIAEoBRI+CgxzdWNjaW5jdEF0",
          "dHIYAiADKAsyKC5TdWNjaW5jdE9yUmVwbGFjZVJlc3AuU3VjY2luY3RBdHRy",
          "RW50cnkSLgoEYXR0chgDIAMoCzIgLlN1Y2NpbmN0T3JSZXBsYWNlUmVzcC5B",
          "dHRyRW50cnkSOgoKY2hhbmdlSXRlbRgEIAMoCzImLlN1Y2NpbmN0T3JSZXBs",
          "YWNlUmVzcC5DaGFuZ2VJdGVtRW50cnkaMwoRU3VjY2luY3RBdHRyRW50cnkS",
          "CwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARorCglBdHRyRW50cnkS",
          "CwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARoxCg9DaGFuZ2VJdGVt",
          "RW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIbCglUb29s",
          "VXBSZXESDgoGdG9vbElkGAEgASgFIpEBCgpUb29sVXBSZXNwEg4KBnRvb2xJ",
          "ZBgBIAEoBRIPCgdsZXZlbGlkGAIgASgFEi8KCmNoYW5nZUl0ZW0YAyADKAsy",
          "Gy5Ub29sVXBSZXNwLkNoYW5nZUl0ZW1FbnRyeRoxCg9DaGFuZ2VJdGVtRW50",
          "cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASKCAQoWU3VibWl0",
          "VGFza01hdGVyaWFsUmVzcBI3Cghwcm9ncmVzcxgBIAMoCzIlLlN1Ym1pdFRh",
          "c2tNYXRlcmlhbFJlc3AuUHJvZ3Jlc3NFbnRyeRovCg1Qcm9ncmVzc0VudHJ5",
          "EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiHQoOUmVmcmVzaFRh",
          "c2tSZXESCwoDc3JsGAEgASgFIqgBCg9SZWZyZXNoVGFza1Jlc3ASCwoDc3Js",
          "GAEgASgFEh8KBHRhc2sYAiABKAsyES5DbG91ZERhaWx5VGFza1BiEjQKCmNo",
          "YW5nZUl0ZW0YAyADKAsyIC5SZWZyZXNoVGFza1Jlc3AuQ2hhbmdlSXRlbUVu",
          "dHJ5GjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUY",
          "AiABKAU6AjgBIt4BCg1SZXNldFRhc2tSZXNwEiYKBHRhc2sYASADKAsyGC5S",
          "ZXNldFRhc2tSZXNwLlRhc2tFbnRyeRIyCgpjaGFuZ2VJdGVtGAIgAygLMh4u",
          "UmVzZXRUYXNrUmVzcC5DaGFuZ2VJdGVtRW50cnkaPgoJVGFza0VudHJ5EgsK",
          "A2tleRgBIAEoBRIgCgV2YWx1ZRgCIAEoCzIRLkNsb3VkRGFpbHlUYXNrUGI6",
          "AjgBGjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUY",
          "AiABKAU6AjgBIhwKDVJld2FyZFRhc2tSZXESCwoDc3JsGAEgASgFIoUBCg5S",
          "ZXdhcmRUYXNrUmVzcBILCgNzcmwYASABKAUSMwoKY2hhbmdlSXRlbRgCIAMo",
          "CzIfLlJld2FyZFRhc2tSZXNwLkNoYW5nZUl0ZW1FbnRyeRoxCg9DaGFuZ2VJ",
          "dGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIdCgtM",
          "b29rVG9vbFJlcRIOCgZ0b29sSWQYASABKAUiKgoMTG9va1Rvb2xSZXNwEhoK",
          "BHRvb2wYASABKAsyDC5DbG91ZFRvb2xQYiKHAQoLTG9va01hcFJlc3ASEAoI",
          "bWF4TWFwSWQYASABKAUSMgoLb3Blbk1hcFRhc2sYAiADKAsyHS5Mb29rTWFw",
          "UmVzcC5PcGVuTWFwVGFza0VudHJ5GjIKEE9wZW5NYXBUYXNrRW50cnkSCwoD",
          "a2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASInCgxCdXlDdEZ1bmVSZXES",
          "CwoDbnVtGAEgASgFEgoKAmlkGAIgASgFIq8CCg1CdXlDdEZ1bmVSZXNwEjIK",
          "CmNoYW5nZUl0ZW0YASADKAsyHi5CdXlDdEZ1bmVSZXNwLkNoYW5nZUl0ZW1F",
          "bnRyeRIsCgdmdW5lTnVtGAIgAygLMhsuQnV5Q3RGdW5lUmVzcC5GdW5lTnVt",
          "RW50cnkSKgoGYWRkTnVtGAMgAygLMhouQnV5Q3RGdW5lUmVzcC5BZGROdW1F",
          "bnRyeRoxCg9DaGFuZ2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVl",
          "GAIgASgFOgI4ARouCgxGdW5lTnVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZh",
          "bHVlGAIgASgFOgI4ARotCgtBZGROdW1FbnRyeRILCgNrZXkYASABKAUSDQoF",
          "dmFsdWUYAiABKAU6AjgBIm8KDkxpc3RDdEZ1bmVSZXNwEi0KB2Z1bmVOdW0Y",
          "ASADKAsyHC5MaXN0Q3RGdW5lUmVzcC5GdW5lTnVtRW50cnkaLgoMRnVuZU51",
          "bUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEikwEKDVBh",
          "dlVwR3JpZFJlc3ASDQoFbGV2ZWwYASABKAUSDAoEZ3JpZBgCIAEoBRIyCgpj",
          "aGFuZ2VJdGVtGAMgAygLMh4uUGF2VXBHcmlkUmVzcC5DaGFuZ2VJdGVtRW50",
          "cnkaMQoPQ2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgC",
          "IAEoBToCOAEiIQoOUGF2VXBMZXZlbFJlc3ASDwoHbGV2ZWxDZBgBIAEoBSJV",
          "ChBMb29rUGF2aWxpb25SZXNwEg0KBWxldmVsGAEgASgFEgwKBGdyaWQYAiAB",
          "KAUSDwoHbGV2ZWxDZBgDIAEoBRITCgthZHZlcnRpc2VDZBgEIAEoBSItCg5Q",
          "YXZBZGRTcGVlZFJlcRIKCgJvcBgBIAEoBRIPCgdpdGVtTnVtGAIgASgFIqwB",
          "Cg9QYXZBZGRTcGVlZFJlc3ASCgoCb3AYASABKAUSDwoHbGV2ZWxDZBgCIAEo",
          "BRI0CgpjaGFuZ2VJdGVtGAMgAygLMiAuUGF2QWRkU3BlZWRSZXNwLkNoYW5n",
          "ZUl0ZW1FbnRyeRITCgthZHZlcnRpc2VDZBgEIAEoBRoxCg9DaGFuZ2VJdGVt",
          "RW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4AUIbCgpjb20u",
          "Y2IubXNnQg1QQkNsb3VkdHJhdmVsYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CloudTravelDataResp), global::CloudTravelDataResp.Parser, new[]{ "Tool", "CloudCd", "Mapid", "MaxMapId", "Task", "ActivedBookMat", "Mat", "ChangeItem", "BattleId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::BeginReq), global::BeginReq.Parser, new[]{ "FuneId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BeginResp), global::BeginResp.Parser, new[]{ "Mat", "ChangeBookAttr", "FuneNum", "ChangeItem", "CloudCd", "Result", "BattleId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::MaterialSaleResp), global::MaterialSaleResp.Parser, new[]{ "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::MaterialCollectResp), global::MaterialCollectResp.Parser, new[]{ "Mat", "Type", "TreasurePavilionAttr" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::MaterialListReq), global::MaterialListReq.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MaterialListResp), global::MaterialListResp.Parser, new[]{ "Type", "Mat" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasurePavilionResp), global::TreasurePavilionResp.Parser, new[]{ "PavAttr", "BookAttr", "Level" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::BagMaterialSaleReq), global::BagMaterialSaleReq.Parser, new[]{ "Type", "Pos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BagMaterialSaleResp), global::BagMaterialSaleResp.Parser, new[]{ "Type", "Pos", "ChangeItem", "PavAttr" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::CloudRecoverResp), global::CloudRecoverResp.Parser, new[]{ "CloudCd", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::SuccinctOrReplaceReq), global::SuccinctOrReplaceReq.Parser, new[]{ "Op", "ToolId", "Cost" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::SuccinctOrReplaceResp), global::SuccinctOrReplaceResp.Parser, new[]{ "ToolId", "SuccinctAttr", "Attr", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ToolUpReq), global::ToolUpReq.Parser, new[]{ "ToolId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ToolUpResp), global::ToolUpResp.Parser, new[]{ "ToolId", "Levelid", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::SubmitTaskMaterialResp), global::SubmitTaskMaterialResp.Parser, new[]{ "Progress" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::RefreshTaskReq), global::RefreshTaskReq.Parser, new[]{ "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RefreshTaskResp), global::RefreshTaskResp.Parser, new[]{ "Srl", "Task", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResetTaskResp), global::ResetTaskResp.Parser, new[]{ "Task", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::RewardTaskReq), global::RewardTaskReq.Parser, new[]{ "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RewardTaskResp), global::RewardTaskResp.Parser, new[]{ "Srl", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::LookToolReq), global::LookToolReq.Parser, new[]{ "ToolId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LookToolResp), global::LookToolResp.Parser, new[]{ "Tool" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LookMapResp), global::LookMapResp.Parser, new[]{ "MaxMapId", "OpenMapTask" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyCtFuneReq), global::BuyCtFuneReq.Parser, new[]{ "Num", "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyCtFuneResp), global::BuyCtFuneResp.Parser, new[]{ "ChangeItem", "FuneNum", "AddNum" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListCtFuneResp), global::ListCtFuneResp.Parser, new[]{ "FuneNum" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PavUpGridResp), global::PavUpGridResp.Parser, new[]{ "Level", "Grid", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PavUpLevelResp), global::PavUpLevelResp.Parser, new[]{ "LevelCd" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LookPavilionResp), global::LookPavilionResp.Parser, new[]{ "Level", "Grid", "LevelCd", "AdvertiseCd" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PavAddSpeedReq), global::PavAddSpeedReq.Parser, new[]{ "Op", "ItemNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PavAddSpeedResp), global::PavAddSpeedResp.Parser, new[]{ "Op", "LevelCd", "ChangeItem", "AdvertiseCd" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///云游入口 --req nil
/// </summary>
public sealed partial class CloudTravelDataResp : pb::IMessage<CloudTravelDataResp> {
  private static readonly pb::MessageParser<CloudTravelDataResp> _parser = new pb::MessageParser<CloudTravelDataResp>(() => new CloudTravelDataResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CloudTravelDataResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudTravelDataResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudTravelDataResp(CloudTravelDataResp other) : this() {
    tool_ = other.tool_.Clone();
    cloudCd_ = other.cloudCd_;
    mapid_ = other.mapid_;
    maxMapId_ = other.maxMapId_;
    task_ = other.task_.Clone();
    activedBookMat_ = other.activedBookMat_.Clone();
    Mat = other.mat_ != null ? other.Mat.Clone() : null;
    changeItem_ = other.changeItem_.Clone();
    battleId_ = other.battleId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudTravelDataResp Clone() {
    return new CloudTravelDataResp(this);
  }

  /// <summary>Field number for the "tool" field.</summary>
  public const int ToolFieldNumber = 1;
  private static readonly pbc::MapField<int, global::CloudToolPb>.Codec _map_tool_codec
      = new pbc::MapField<int, global::CloudToolPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::CloudToolPb.Parser), 10);
  private readonly pbc::MapField<int, global::CloudToolPb> tool_ = new pbc::MapField<int, global::CloudToolPb>();
  /// <summary>
  ///云游工具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::CloudToolPb> Tool {
    get { return tool_; }
  }

  /// <summary>Field number for the "cloudCd" field.</summary>
  public const int CloudCdFieldNumber = 3;
  private int cloudCd_;
  /// <summary>
  ///云游灵器恢复cd
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CloudCd {
    get { return cloudCd_; }
    set {
      cloudCd_ = value;
    }
  }

  /// <summary>Field number for the "mapid" field.</summary>
  public const int MapidFieldNumber = 4;
  private int mapid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mapid {
    get { return mapid_; }
    set {
      mapid_ = value;
    }
  }

  /// <summary>Field number for the "maxMapId" field.</summary>
  public const int MaxMapIdFieldNumber = 5;
  private int maxMapId_;
  /// <summary>
  ///最大地图id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxMapId {
    get { return maxMapId_; }
    set {
      maxMapId_ = value;
    }
  }

  /// <summary>Field number for the "task" field.</summary>
  public const int TaskFieldNumber = 6;
  private static readonly pbc::MapField<int, global::CloudDailyTaskPb>.Codec _map_task_codec
      = new pbc::MapField<int, global::CloudDailyTaskPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::CloudDailyTaskPb.Parser), 50);
  private readonly pbc::MapField<int, global::CloudDailyTaskPb> task_ = new pbc::MapField<int, global::CloudDailyTaskPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::CloudDailyTaskPb> Task {
    get { return task_; }
  }

  /// <summary>Field number for the "activedBookMat" field.</summary>
  public const int ActivedBookMatFieldNumber = 7;
  private static readonly pb::FieldCodec<int> _repeated_activedBookMat_codec
      = pb::FieldCodec.ForInt32(58);
  private readonly pbc::RepeatedField<int> activedBookMat_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///激活的图鉴材料
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> ActivedBookMat {
    get { return activedBookMat_; }
  }

  /// <summary>Field number for the "mat" field.</summary>
  public const int MatFieldNumber = 8;
  private global::MaterialPb mat_;
  /// <summary>
  ///待处理材料
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaterialPb Mat {
    get { return mat_; }
    set {
      mat_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 9;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 74);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "battleId" field.</summary>
  public const int BattleIdFieldNumber = 10;
  private int battleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BattleId {
    get { return battleId_; }
    set {
      battleId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CloudTravelDataResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CloudTravelDataResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Tool.Equals(other.Tool)) return false;
    if (CloudCd != other.CloudCd) return false;
    if (Mapid != other.Mapid) return false;
    if (MaxMapId != other.MaxMapId) return false;
    if (!Task.Equals(other.Task)) return false;
    if(!activedBookMat_.Equals(other.activedBookMat_)) return false;
    if (!object.Equals(Mat, other.Mat)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (BattleId != other.BattleId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Tool.GetHashCode();
    if (CloudCd != 0) hash ^= CloudCd.GetHashCode();
    if (Mapid != 0) hash ^= Mapid.GetHashCode();
    if (MaxMapId != 0) hash ^= MaxMapId.GetHashCode();
    hash ^= Task.GetHashCode();
    hash ^= activedBookMat_.GetHashCode();
    if (mat_ != null) hash ^= Mat.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    if (BattleId != 0) hash ^= BattleId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    tool_.WriteTo(output, _map_tool_codec);
    if (CloudCd != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CloudCd);
    }
    if (Mapid != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Mapid);
    }
    if (MaxMapId != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(MaxMapId);
    }
    task_.WriteTo(output, _map_task_codec);
    activedBookMat_.WriteTo(output, _repeated_activedBookMat_codec);
    if (mat_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Mat);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (BattleId != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(BattleId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += tool_.CalculateSize(_map_tool_codec);
    if (CloudCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CloudCd);
    }
    if (Mapid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
    }
    if (MaxMapId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMapId);
    }
    size += task_.CalculateSize(_map_task_codec);
    size += activedBookMat_.CalculateSize(_repeated_activedBookMat_codec);
    if (mat_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mat);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (BattleId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CloudTravelDataResp other) {
    if (other == null) {
      return;
    }
    tool_.Add(other.tool_);
    if (other.CloudCd != 0) {
      CloudCd = other.CloudCd;
    }
    if (other.Mapid != 0) {
      Mapid = other.Mapid;
    }
    if (other.MaxMapId != 0) {
      MaxMapId = other.MaxMapId;
    }
    task_.Add(other.task_);
    activedBookMat_.Add(other.activedBookMat_);
    if (other.mat_ != null) {
      if (mat_ == null) {
        mat_ = new global::MaterialPb();
      }
      Mat.MergeFrom(other.Mat);
    }
    changeItem_.Add(other.changeItem_);
    if (other.BattleId != 0) {
      BattleId = other.BattleId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          tool_.AddEntriesFrom(input, _map_tool_codec);
          break;
        }
        case 24: {
          CloudCd = input.ReadInt32();
          break;
        }
        case 32: {
          Mapid = input.ReadInt32();
          break;
        }
        case 40: {
          MaxMapId = input.ReadInt32();
          break;
        }
        case 50: {
          task_.AddEntriesFrom(input, _map_task_codec);
          break;
        }
        case 58:
        case 56: {
          activedBookMat_.AddEntriesFrom(input, _repeated_activedBookMat_codec);
          break;
        }
        case 66: {
          if (mat_ == null) {
            mat_ = new global::MaterialPb();
          }
          input.ReadMessage(mat_);
          break;
        }
        case 74: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 80: {
          BattleId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///开始云游 
/// </summary>
public sealed partial class BeginReq : pb::IMessage<BeginReq> {
  private static readonly pb::MessageParser<BeginReq> _parser = new pb::MessageParser<BeginReq>(() => new BeginReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BeginReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BeginReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BeginReq(BeginReq other) : this() {
    funeId_ = other.funeId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BeginReq Clone() {
    return new BeginReq(this);
  }

  /// <summary>Field number for the "funeId" field.</summary>
  public const int FuneIdFieldNumber = 1;
  private int funeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FuneId {
    get { return funeId_; }
    set {
      funeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BeginReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BeginReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FuneId != other.FuneId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FuneId != 0) hash ^= FuneId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FuneId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(FuneId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FuneId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FuneId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BeginReq other) {
    if (other == null) {
      return;
    }
    if (other.FuneId != 0) {
      FuneId = other.FuneId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          FuneId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class BeginResp : pb::IMessage<BeginResp> {
  private static readonly pb::MessageParser<BeginResp> _parser = new pb::MessageParser<BeginResp>(() => new BeginResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BeginResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BeginResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BeginResp(BeginResp other) : this() {
    Mat = other.mat_ != null ? other.Mat.Clone() : null;
    changeBookAttr_ = other.changeBookAttr_.Clone();
    funeNum_ = other.funeNum_.Clone();
    changeItem_ = other.changeItem_.Clone();
    cloudCd_ = other.cloudCd_;
    result_ = other.result_;
    battleId_ = other.battleId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BeginResp Clone() {
    return new BeginResp(this);
  }

  /// <summary>Field number for the "mat" field.</summary>
  public const int MatFieldNumber = 1;
  private global::MaterialPb mat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MaterialPb Mat {
    get { return mat_; }
    set {
      mat_ = value;
    }
  }

  /// <summary>Field number for the "changeBookAttr" field.</summary>
  public const int ChangeBookAttrFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeBookAttr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeBookAttr_ = new pbc::MapField<int, int>();
  /// <summary>
  ///可能改变的图鉴属性(只是改变的那几条属性)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeBookAttr {
    get { return changeBookAttr_; }
  }

  /// <summary>Field number for the "funeNum" field.</summary>
  public const int FuneNumFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_funeNum_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> funeNum_ = new pbc::MapField<int, int>();
  /// <summary>
  ///id->num
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> FuneNum {
    get { return funeNum_; }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "cloudCd" field.</summary>
  public const int CloudCdFieldNumber = 5;
  private int cloudCd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CloudCd {
    get { return cloudCd_; }
    set {
      cloudCd_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 6;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "battleId" field.</summary>
  public const int BattleIdFieldNumber = 7;
  private int battleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BattleId {
    get { return battleId_; }
    set {
      battleId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BeginResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BeginResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Mat, other.Mat)) return false;
    if (!ChangeBookAttr.Equals(other.ChangeBookAttr)) return false;
    if (!FuneNum.Equals(other.FuneNum)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (CloudCd != other.CloudCd) return false;
    if (Result != other.Result) return false;
    if (BattleId != other.BattleId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (mat_ != null) hash ^= Mat.GetHashCode();
    hash ^= ChangeBookAttr.GetHashCode();
    hash ^= FuneNum.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    if (CloudCd != 0) hash ^= CloudCd.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (BattleId != 0) hash ^= BattleId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (mat_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Mat);
    }
    changeBookAttr_.WriteTo(output, _map_changeBookAttr_codec);
    funeNum_.WriteTo(output, _map_funeNum_codec);
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (CloudCd != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CloudCd);
    }
    if (Result != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Result);
    }
    if (BattleId != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(BattleId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (mat_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mat);
    }
    size += changeBookAttr_.CalculateSize(_map_changeBookAttr_codec);
    size += funeNum_.CalculateSize(_map_funeNum_codec);
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (CloudCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CloudCd);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (BattleId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BeginResp other) {
    if (other == null) {
      return;
    }
    if (other.mat_ != null) {
      if (mat_ == null) {
        mat_ = new global::MaterialPb();
      }
      Mat.MergeFrom(other.Mat);
    }
    changeBookAttr_.Add(other.changeBookAttr_);
    funeNum_.Add(other.funeNum_);
    changeItem_.Add(other.changeItem_);
    if (other.CloudCd != 0) {
      CloudCd = other.CloudCd;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.BattleId != 0) {
      BattleId = other.BattleId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (mat_ == null) {
            mat_ = new global::MaterialPb();
          }
          input.ReadMessage(mat_);
          break;
        }
        case 18: {
          changeBookAttr_.AddEntriesFrom(input, _map_changeBookAttr_codec);
          break;
        }
        case 26: {
          funeNum_.AddEntriesFrom(input, _map_funeNum_codec);
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 40: {
          CloudCd = input.ReadInt32();
          break;
        }
        case 48: {
          Result = input.ReadInt32();
          break;
        }
        case 56: {
          BattleId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///产出材料出售 --req nil 
/// </summary>
public sealed partial class MaterialSaleResp : pb::IMessage<MaterialSaleResp> {
  private static readonly pb::MessageParser<MaterialSaleResp> _parser = new pb::MessageParser<MaterialSaleResp>(() => new MaterialSaleResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MaterialSaleResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialSaleResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialSaleResp(MaterialSaleResp other) : this() {
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialSaleResp Clone() {
    return new MaterialSaleResp(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MaterialSaleResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MaterialSaleResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MaterialSaleResp other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///产出材料收藏 --req nil 
/// </summary>
public sealed partial class MaterialCollectResp : pb::IMessage<MaterialCollectResp> {
  private static readonly pb::MessageParser<MaterialCollectResp> _parser = new pb::MessageParser<MaterialCollectResp>(() => new MaterialCollectResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MaterialCollectResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialCollectResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialCollectResp(MaterialCollectResp other) : this() {
    mat_ = other.mat_.Clone();
    type_ = other.type_;
    treasurePavilionAttr_ = other.treasurePavilionAttr_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialCollectResp Clone() {
    return new MaterialCollectResp(this);
  }

  /// <summary>Field number for the "mat" field.</summary>
  public const int MatFieldNumber = 1;
  private static readonly pbc::MapField<int, global::MaterialPb>.Codec _map_mat_codec
      = new pbc::MapField<int, global::MaterialPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::MaterialPb.Parser), 10);
  private readonly pbc::MapField<int, global::MaterialPb> mat_ = new pbc::MapField<int, global::MaterialPb>();
  /// <summary>
  ///pos,MaterialPb  pos从1开始
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::MaterialPb> Mat {
    get { return mat_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "treasurePavilionAttr" field.</summary>
  public const int TreasurePavilionAttrFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_treasurePavilionAttr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> treasurePavilionAttr_ = new pbc::MapField<int, int>();
  /// <summary>
  ///藏宝阁属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> TreasurePavilionAttr {
    get { return treasurePavilionAttr_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MaterialCollectResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MaterialCollectResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Mat.Equals(other.Mat)) return false;
    if (Type != other.Type) return false;
    if (!TreasurePavilionAttr.Equals(other.TreasurePavilionAttr)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Mat.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    hash ^= TreasurePavilionAttr.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    mat_.WriteTo(output, _map_mat_codec);
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    treasurePavilionAttr_.WriteTo(output, _map_treasurePavilionAttr_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += mat_.CalculateSize(_map_mat_codec);
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    size += treasurePavilionAttr_.CalculateSize(_map_treasurePavilionAttr_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MaterialCollectResp other) {
    if (other == null) {
      return;
    }
    mat_.Add(other.mat_);
    if (other.Type != 0) {
      Type = other.Type;
    }
    treasurePavilionAttr_.Add(other.treasurePavilionAttr_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          mat_.AddEntriesFrom(input, _map_mat_codec);
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 26: {
          treasurePavilionAttr_.AddEntriesFrom(input, _map_treasurePavilionAttr_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///材料列表
/// </summary>
public sealed partial class MaterialListReq : pb::IMessage<MaterialListReq> {
  private static readonly pb::MessageParser<MaterialListReq> _parser = new pb::MessageParser<MaterialListReq>(() => new MaterialListReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MaterialListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialListReq(MaterialListReq other) : this() {
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialListReq Clone() {
    return new MaterialListReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///1-4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MaterialListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MaterialListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MaterialListReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MaterialListResp : pb::IMessage<MaterialListResp> {
  private static readonly pb::MessageParser<MaterialListResp> _parser = new pb::MessageParser<MaterialListResp>(() => new MaterialListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MaterialListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialListResp(MaterialListResp other) : this() {
    type_ = other.type_;
    mat_ = other.mat_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialListResp Clone() {
    return new MaterialListResp(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "mat" field.</summary>
  public const int MatFieldNumber = 2;
  private static readonly pbc::MapField<int, global::MaterialPb>.Codec _map_mat_codec
      = new pbc::MapField<int, global::MaterialPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::MaterialPb.Parser), 18);
  private readonly pbc::MapField<int, global::MaterialPb> mat_ = new pbc::MapField<int, global::MaterialPb>();
  /// <summary>
  ///pos,MaterialPb  pos从1开始
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::MaterialPb> Mat {
    get { return mat_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MaterialListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MaterialListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (!Mat.Equals(other.Mat)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    hash ^= Mat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    mat_.WriteTo(output, _map_mat_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    size += mat_.CalculateSize(_map_mat_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MaterialListResp other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    mat_.Add(other.mat_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 18: {
          mat_.AddEntriesFrom(input, _map_mat_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///藏宝阁属性 --req nil
/// </summary>
public sealed partial class TreasurePavilionResp : pb::IMessage<TreasurePavilionResp> {
  private static readonly pb::MessageParser<TreasurePavilionResp> _parser = new pb::MessageParser<TreasurePavilionResp>(() => new TreasurePavilionResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasurePavilionResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasurePavilionResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasurePavilionResp(TreasurePavilionResp other) : this() {
    pavAttr_ = other.pavAttr_.Clone();
    bookAttr_ = other.bookAttr_.Clone();
    level_ = other.level_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasurePavilionResp Clone() {
    return new TreasurePavilionResp(this);
  }

  /// <summary>Field number for the "pavAttr" field.</summary>
  public const int PavAttrFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_pavAttr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> pavAttr_ = new pbc::MapField<int, int>();
  /// <summary>
  ///藏宝阁属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> PavAttr {
    get { return pavAttr_; }
  }

  /// <summary>Field number for the "bookAttr" field.</summary>
  public const int BookAttrFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_bookAttr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> bookAttr_ = new pbc::MapField<int, int>();
  /// <summary>
  ///图鉴属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> BookAttr {
    get { return bookAttr_; }
  }

  /// <summary>Field number for the "Level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  /// <summary>
  ///藏宝阁等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasurePavilionResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasurePavilionResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!PavAttr.Equals(other.PavAttr)) return false;
    if (!BookAttr.Equals(other.BookAttr)) return false;
    if (Level != other.Level) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= PavAttr.GetHashCode();
    hash ^= BookAttr.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pavAttr_.WriteTo(output, _map_pavAttr_codec);
    bookAttr_.WriteTo(output, _map_bookAttr_codec);
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += pavAttr_.CalculateSize(_map_pavAttr_codec);
    size += bookAttr_.CalculateSize(_map_bookAttr_codec);
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasurePavilionResp other) {
    if (other == null) {
      return;
    }
    pavAttr_.Add(other.pavAttr_);
    bookAttr_.Add(other.bookAttr_);
    if (other.Level != 0) {
      Level = other.Level;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          pavAttr_.AddEntriesFrom(input, _map_pavAttr_codec);
          break;
        }
        case 18: {
          bookAttr_.AddEntriesFrom(input, _map_bookAttr_codec);
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///背包材料出售 
/// </summary>
public sealed partial class BagMaterialSaleReq : pb::IMessage<BagMaterialSaleReq> {
  private static readonly pb::MessageParser<BagMaterialSaleReq> _parser = new pb::MessageParser<BagMaterialSaleReq>(() => new BagMaterialSaleReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BagMaterialSaleReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BagMaterialSaleReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BagMaterialSaleReq(BagMaterialSaleReq other) : this() {
    type_ = other.type_;
    pos_ = other.pos_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BagMaterialSaleReq Clone() {
    return new BagMaterialSaleReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 2;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BagMaterialSaleReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BagMaterialSaleReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Pos != other.Pos) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Pos != 0) hash ^= Pos.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (Pos != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Pos);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BagMaterialSaleReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          Pos = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class BagMaterialSaleResp : pb::IMessage<BagMaterialSaleResp> {
  private static readonly pb::MessageParser<BagMaterialSaleResp> _parser = new pb::MessageParser<BagMaterialSaleResp>(() => new BagMaterialSaleResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BagMaterialSaleResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BagMaterialSaleResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BagMaterialSaleResp(BagMaterialSaleResp other) : this() {
    type_ = other.type_;
    pos_ = other.pos_;
    changeItem_ = other.changeItem_.Clone();
    pavAttr_ = other.pavAttr_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BagMaterialSaleResp Clone() {
    return new BagMaterialSaleResp(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 2;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "pavAttr" field.</summary>
  public const int PavAttrFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_pavAttr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> pavAttr_ = new pbc::MapField<int, int>();
  /// <summary>
  ///藏宝阁属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> PavAttr {
    get { return pavAttr_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BagMaterialSaleResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BagMaterialSaleResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Pos != other.Pos) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (!PavAttr.Equals(other.PavAttr)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Pos != 0) hash ^= Pos.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    hash ^= PavAttr.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (Pos != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Pos);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    pavAttr_.WriteTo(output, _map_pavAttr_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    size += pavAttr_.CalculateSize(_map_pavAttr_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BagMaterialSaleResp other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    changeItem_.Add(other.changeItem_);
    pavAttr_.Add(other.pavAttr_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          Pos = input.ReadInt32();
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 34: {
          pavAttr_.AddEntriesFrom(input, _map_pavAttr_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///云游灵器恢复 --req nil
/// </summary>
public sealed partial class CloudRecoverResp : pb::IMessage<CloudRecoverResp> {
  private static readonly pb::MessageParser<CloudRecoverResp> _parser = new pb::MessageParser<CloudRecoverResp>(() => new CloudRecoverResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CloudRecoverResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudRecoverResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudRecoverResp(CloudRecoverResp other) : this() {
    cloudCd_ = other.cloudCd_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudRecoverResp Clone() {
    return new CloudRecoverResp(this);
  }

  /// <summary>Field number for the "cloudCd" field.</summary>
  public const int CloudCdFieldNumber = 1;
  private int cloudCd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CloudCd {
    get { return cloudCd_; }
    set {
      cloudCd_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CloudRecoverResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CloudRecoverResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CloudCd != other.CloudCd) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CloudCd != 0) hash ^= CloudCd.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CloudCd != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CloudCd);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CloudCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CloudCd);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CloudRecoverResp other) {
    if (other == null) {
      return;
    }
    if (other.CloudCd != 0) {
      CloudCd = other.CloudCd;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          CloudCd = input.ReadInt32();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///工具洗练or替换
/// </summary>
public sealed partial class SuccinctOrReplaceReq : pb::IMessage<SuccinctOrReplaceReq> {
  private static readonly pb::MessageParser<SuccinctOrReplaceReq> _parser = new pb::MessageParser<SuccinctOrReplaceReq>(() => new SuccinctOrReplaceReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SuccinctOrReplaceReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SuccinctOrReplaceReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SuccinctOrReplaceReq(SuccinctOrReplaceReq other) : this() {
    op_ = other.op_;
    toolId_ = other.toolId_;
    cost_ = other.cost_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SuccinctOrReplaceReq Clone() {
    return new SuccinctOrReplaceReq(this);
  }

  /// <summary>Field number for the "op" field.</summary>
  public const int OpFieldNumber = 1;
  private int op_;
  /// <summary>
  ///0-洗练 1-替换
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Op {
    get { return op_; }
    set {
      op_ = value;
    }
  }

  /// <summary>Field number for the "toolId" field.</summary>
  public const int ToolIdFieldNumber = 2;
  private int toolId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToolId {
    get { return toolId_; }
    set {
      toolId_ = value;
    }
  }

  /// <summary>Field number for the "cost" field.</summary>
  public const int CostFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_cost_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> cost_ = new pbc::MapField<int, int>();
  /// <summary>
  ///道具id,道具数量 (洗练的时候传入)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Cost {
    get { return cost_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SuccinctOrReplaceReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SuccinctOrReplaceReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Op != other.Op) return false;
    if (ToolId != other.ToolId) return false;
    if (!Cost.Equals(other.Cost)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Op != 0) hash ^= Op.GetHashCode();
    if (ToolId != 0) hash ^= ToolId.GetHashCode();
    hash ^= Cost.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Op != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Op);
    }
    if (ToolId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ToolId);
    }
    cost_.WriteTo(output, _map_cost_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Op != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Op);
    }
    if (ToolId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToolId);
    }
    size += cost_.CalculateSize(_map_cost_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SuccinctOrReplaceReq other) {
    if (other == null) {
      return;
    }
    if (other.Op != 0) {
      Op = other.Op;
    }
    if (other.ToolId != 0) {
      ToolId = other.ToolId;
    }
    cost_.Add(other.cost_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Op = input.ReadInt32();
          break;
        }
        case 16: {
          ToolId = input.ReadInt32();
          break;
        }
        case 26: {
          cost_.AddEntriesFrom(input, _map_cost_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SuccinctOrReplaceResp : pb::IMessage<SuccinctOrReplaceResp> {
  private static readonly pb::MessageParser<SuccinctOrReplaceResp> _parser = new pb::MessageParser<SuccinctOrReplaceResp>(() => new SuccinctOrReplaceResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SuccinctOrReplaceResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SuccinctOrReplaceResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SuccinctOrReplaceResp(SuccinctOrReplaceResp other) : this() {
    toolId_ = other.toolId_;
    succinctAttr_ = other.succinctAttr_.Clone();
    attr_ = other.attr_.Clone();
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SuccinctOrReplaceResp Clone() {
    return new SuccinctOrReplaceResp(this);
  }

  /// <summary>Field number for the "toolId" field.</summary>
  public const int ToolIdFieldNumber = 1;
  private int toolId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToolId {
    get { return toolId_; }
    set {
      toolId_ = value;
    }
  }

  /// <summary>Field number for the "succinctAttr" field.</summary>
  public const int SuccinctAttrFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_succinctAttr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> succinctAttr_ = new pbc::MapField<int, int>();
  /// <summary>
  ///洗练属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> SuccinctAttr {
    get { return succinctAttr_; }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_attr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> attr_ = new pbc::MapField<int, int>();
  /// <summary>
  ///现有属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Attr {
    get { return attr_; }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具 (洗练的时候传入)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SuccinctOrReplaceResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SuccinctOrReplaceResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ToolId != other.ToolId) return false;
    if (!SuccinctAttr.Equals(other.SuccinctAttr)) return false;
    if (!Attr.Equals(other.Attr)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ToolId != 0) hash ^= ToolId.GetHashCode();
    hash ^= SuccinctAttr.GetHashCode();
    hash ^= Attr.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ToolId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ToolId);
    }
    succinctAttr_.WriteTo(output, _map_succinctAttr_codec);
    attr_.WriteTo(output, _map_attr_codec);
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ToolId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToolId);
    }
    size += succinctAttr_.CalculateSize(_map_succinctAttr_codec);
    size += attr_.CalculateSize(_map_attr_codec);
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SuccinctOrReplaceResp other) {
    if (other == null) {
      return;
    }
    if (other.ToolId != 0) {
      ToolId = other.ToolId;
    }
    succinctAttr_.Add(other.succinctAttr_);
    attr_.Add(other.attr_);
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ToolId = input.ReadInt32();
          break;
        }
        case 18: {
          succinctAttr_.AddEntriesFrom(input, _map_succinctAttr_codec);
          break;
        }
        case 26: {
          attr_.AddEntriesFrom(input, _map_attr_codec);
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///工具升级
/// </summary>
public sealed partial class ToolUpReq : pb::IMessage<ToolUpReq> {
  private static readonly pb::MessageParser<ToolUpReq> _parser = new pb::MessageParser<ToolUpReq>(() => new ToolUpReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ToolUpReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ToolUpReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ToolUpReq(ToolUpReq other) : this() {
    toolId_ = other.toolId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ToolUpReq Clone() {
    return new ToolUpReq(this);
  }

  /// <summary>Field number for the "toolId" field.</summary>
  public const int ToolIdFieldNumber = 1;
  private int toolId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToolId {
    get { return toolId_; }
    set {
      toolId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ToolUpReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ToolUpReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ToolId != other.ToolId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ToolId != 0) hash ^= ToolId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ToolId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ToolId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ToolId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToolId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ToolUpReq other) {
    if (other == null) {
      return;
    }
    if (other.ToolId != 0) {
      ToolId = other.ToolId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ToolId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ToolUpResp : pb::IMessage<ToolUpResp> {
  private static readonly pb::MessageParser<ToolUpResp> _parser = new pb::MessageParser<ToolUpResp>(() => new ToolUpResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ToolUpResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ToolUpResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ToolUpResp(ToolUpResp other) : this() {
    toolId_ = other.toolId_;
    levelid_ = other.levelid_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ToolUpResp Clone() {
    return new ToolUpResp(this);
  }

  /// <summary>Field number for the "toolId" field.</summary>
  public const int ToolIdFieldNumber = 1;
  private int toolId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToolId {
    get { return toolId_; }
    set {
      toolId_ = value;
    }
  }

  /// <summary>Field number for the "levelid" field.</summary>
  public const int LevelidFieldNumber = 2;
  private int levelid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Levelid {
    get { return levelid_; }
    set {
      levelid_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ToolUpResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ToolUpResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ToolId != other.ToolId) return false;
    if (Levelid != other.Levelid) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ToolId != 0) hash ^= ToolId.GetHashCode();
    if (Levelid != 0) hash ^= Levelid.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ToolId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ToolId);
    }
    if (Levelid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Levelid);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ToolId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToolId);
    }
    if (Levelid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Levelid);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ToolUpResp other) {
    if (other == null) {
      return;
    }
    if (other.ToolId != 0) {
      ToolId = other.ToolId;
    }
    if (other.Levelid != 0) {
      Levelid = other.Levelid;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ToolId = input.ReadInt32();
          break;
        }
        case 16: {
          Levelid = input.ReadInt32();
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///提交每日任务材料 --req nil
/// </summary>
public sealed partial class SubmitTaskMaterialResp : pb::IMessage<SubmitTaskMaterialResp> {
  private static readonly pb::MessageParser<SubmitTaskMaterialResp> _parser = new pb::MessageParser<SubmitTaskMaterialResp>(() => new SubmitTaskMaterialResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SubmitTaskMaterialResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubmitTaskMaterialResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubmitTaskMaterialResp(SubmitTaskMaterialResp other) : this() {
    progress_ = other.progress_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SubmitTaskMaterialResp Clone() {
    return new SubmitTaskMaterialResp(this);
  }

  /// <summary>Field number for the "progress" field.</summary>
  public const int ProgressFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_progress_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> progress_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的任务  k:srl  v:progress
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Progress {
    get { return progress_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SubmitTaskMaterialResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SubmitTaskMaterialResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Progress.Equals(other.Progress)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Progress.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    progress_.WriteTo(output, _map_progress_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += progress_.CalculateSize(_map_progress_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SubmitTaskMaterialResp other) {
    if (other == null) {
      return;
    }
    progress_.Add(other.progress_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          progress_.AddEntriesFrom(input, _map_progress_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///刷新每日任务
/// </summary>
public sealed partial class RefreshTaskReq : pb::IMessage<RefreshTaskReq> {
  private static readonly pb::MessageParser<RefreshTaskReq> _parser = new pb::MessageParser<RefreshTaskReq>(() => new RefreshTaskReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RefreshTaskReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RefreshTaskReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RefreshTaskReq(RefreshTaskReq other) : this() {
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RefreshTaskReq Clone() {
    return new RefreshTaskReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RefreshTaskReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RefreshTaskReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RefreshTaskReq other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RefreshTaskResp : pb::IMessage<RefreshTaskResp> {
  private static readonly pb::MessageParser<RefreshTaskResp> _parser = new pb::MessageParser<RefreshTaskResp>(() => new RefreshTaskResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RefreshTaskResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RefreshTaskResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RefreshTaskResp(RefreshTaskResp other) : this() {
    srl_ = other.srl_;
    Task = other.task_ != null ? other.Task.Clone() : null;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RefreshTaskResp Clone() {
    return new RefreshTaskResp(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "task" field.</summary>
  public const int TaskFieldNumber = 2;
  private global::CloudDailyTaskPb task_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CloudDailyTaskPb Task {
    get { return task_; }
    set {
      task_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RefreshTaskResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RefreshTaskResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    if (!object.Equals(Task, other.Task)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    if (task_ != null) hash ^= Task.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
    if (task_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Task);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    if (task_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RefreshTaskResp other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    if (other.task_ != null) {
      if (task_ == null) {
        task_ = new global::CloudDailyTaskPb();
      }
      Task.MergeFrom(other.Task);
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
        case 18: {
          if (task_ == null) {
            task_ = new global::CloudDailyTaskPb();
          }
          input.ReadMessage(task_);
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///重置每日任务 --req nil
/// </summary>
public sealed partial class ResetTaskResp : pb::IMessage<ResetTaskResp> {
  private static readonly pb::MessageParser<ResetTaskResp> _parser = new pb::MessageParser<ResetTaskResp>(() => new ResetTaskResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ResetTaskResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResetTaskResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResetTaskResp(ResetTaskResp other) : this() {
    task_ = other.task_.Clone();
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResetTaskResp Clone() {
    return new ResetTaskResp(this);
  }

  /// <summary>Field number for the "task" field.</summary>
  public const int TaskFieldNumber = 1;
  private static readonly pbc::MapField<int, global::CloudDailyTaskPb>.Codec _map_task_codec
      = new pbc::MapField<int, global::CloudDailyTaskPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::CloudDailyTaskPb.Parser), 10);
  private readonly pbc::MapField<int, global::CloudDailyTaskPb> task_ = new pbc::MapField<int, global::CloudDailyTaskPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::CloudDailyTaskPb> Task {
    get { return task_; }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ResetTaskResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ResetTaskResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Task.Equals(other.Task)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Task.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    task_.WriteTo(output, _map_task_codec);
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += task_.CalculateSize(_map_task_codec);
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ResetTaskResp other) {
    if (other == null) {
      return;
    }
    task_.Add(other.task_);
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          task_.AddEntriesFrom(input, _map_task_codec);
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///领取每日任务
/// </summary>
public sealed partial class RewardTaskReq : pb::IMessage<RewardTaskReq> {
  private static readonly pb::MessageParser<RewardTaskReq> _parser = new pb::MessageParser<RewardTaskReq>(() => new RewardTaskReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RewardTaskReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RewardTaskReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RewardTaskReq(RewardTaskReq other) : this() {
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RewardTaskReq Clone() {
    return new RewardTaskReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RewardTaskReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RewardTaskReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RewardTaskReq other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RewardTaskResp : pb::IMessage<RewardTaskResp> {
  private static readonly pb::MessageParser<RewardTaskResp> _parser = new pb::MessageParser<RewardTaskResp>(() => new RewardTaskResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RewardTaskResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RewardTaskResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RewardTaskResp(RewardTaskResp other) : this() {
    srl_ = other.srl_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RewardTaskResp Clone() {
    return new RewardTaskResp(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RewardTaskResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RewardTaskResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RewardTaskResp other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///查看工具
/// </summary>
public sealed partial class LookToolReq : pb::IMessage<LookToolReq> {
  private static readonly pb::MessageParser<LookToolReq> _parser = new pb::MessageParser<LookToolReq>(() => new LookToolReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LookToolReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LookToolReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LookToolReq(LookToolReq other) : this() {
    toolId_ = other.toolId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LookToolReq Clone() {
    return new LookToolReq(this);
  }

  /// <summary>Field number for the "toolId" field.</summary>
  public const int ToolIdFieldNumber = 1;
  private int toolId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToolId {
    get { return toolId_; }
    set {
      toolId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LookToolReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LookToolReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ToolId != other.ToolId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ToolId != 0) hash ^= ToolId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ToolId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ToolId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ToolId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToolId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LookToolReq other) {
    if (other == null) {
      return;
    }
    if (other.ToolId != 0) {
      ToolId = other.ToolId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ToolId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LookToolResp : pb::IMessage<LookToolResp> {
  private static readonly pb::MessageParser<LookToolResp> _parser = new pb::MessageParser<LookToolResp>(() => new LookToolResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LookToolResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LookToolResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LookToolResp(LookToolResp other) : this() {
    Tool = other.tool_ != null ? other.Tool.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LookToolResp Clone() {
    return new LookToolResp(this);
  }

  /// <summary>Field number for the "tool" field.</summary>
  public const int ToolFieldNumber = 1;
  private global::CloudToolPb tool_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CloudToolPb Tool {
    get { return tool_; }
    set {
      tool_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LookToolResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LookToolResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Tool, other.Tool)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (tool_ != null) hash ^= Tool.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (tool_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Tool);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (tool_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tool);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LookToolResp other) {
    if (other == null) {
      return;
    }
    if (other.tool_ != null) {
      if (tool_ == null) {
        tool_ = new global::CloudToolPb();
      }
      Tool.MergeFrom(other.Tool);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (tool_ == null) {
            tool_ = new global::CloudToolPb();
          }
          input.ReadMessage(tool_);
          break;
        }
      }
    }
  }

}

/// <summary>
///查看地图信息 --req nil
/// </summary>
public sealed partial class LookMapResp : pb::IMessage<LookMapResp> {
  private static readonly pb::MessageParser<LookMapResp> _parser = new pb::MessageParser<LookMapResp>(() => new LookMapResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LookMapResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LookMapResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LookMapResp(LookMapResp other) : this() {
    maxMapId_ = other.maxMapId_;
    openMapTask_ = other.openMapTask_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LookMapResp Clone() {
    return new LookMapResp(this);
  }

  /// <summary>Field number for the "maxMapId" field.</summary>
  public const int MaxMapIdFieldNumber = 1;
  private int maxMapId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxMapId {
    get { return maxMapId_; }
    set {
      maxMapId_ = value;
    }
  }

  /// <summary>Field number for the "openMapTask" field.</summary>
  public const int OpenMapTaskFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_openMapTask_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> openMapTask_ = new pbc::MapField<int, int>();
  /// <summary>
  ///云游开图任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> OpenMapTask {
    get { return openMapTask_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LookMapResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LookMapResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MaxMapId != other.MaxMapId) return false;
    if (!OpenMapTask.Equals(other.OpenMapTask)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MaxMapId != 0) hash ^= MaxMapId.GetHashCode();
    hash ^= OpenMapTask.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MaxMapId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MaxMapId);
    }
    openMapTask_.WriteTo(output, _map_openMapTask_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MaxMapId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMapId);
    }
    size += openMapTask_.CalculateSize(_map_openMapTask_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LookMapResp other) {
    if (other == null) {
      return;
    }
    if (other.MaxMapId != 0) {
      MaxMapId = other.MaxMapId;
    }
    openMapTask_.Add(other.openMapTask_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          MaxMapId = input.ReadInt32();
          break;
        }
        case 18: {
          openMapTask_.AddEntriesFrom(input, _map_openMapTask_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///购买云游符文
/// </summary>
public sealed partial class BuyCtFuneReq : pb::IMessage<BuyCtFuneReq> {
  private static readonly pb::MessageParser<BuyCtFuneReq> _parser = new pb::MessageParser<BuyCtFuneReq>(() => new BuyCtFuneReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyCtFuneReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyCtFuneReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyCtFuneReq(BuyCtFuneReq other) : this() {
    num_ = other.num_;
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyCtFuneReq Clone() {
    return new BuyCtFuneReq(this);
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 1;
  private int num_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyCtFuneReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyCtFuneReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Num != other.Num) return false;
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Num != 0) hash ^= Num.GetHashCode();
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Num != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Num);
    }
    if (Id != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyCtFuneReq other) {
    if (other == null) {
      return;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Num = input.ReadInt32();
          break;
        }
        case 16: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class BuyCtFuneResp : pb::IMessage<BuyCtFuneResp> {
  private static readonly pb::MessageParser<BuyCtFuneResp> _parser = new pb::MessageParser<BuyCtFuneResp>(() => new BuyCtFuneResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyCtFuneResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyCtFuneResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyCtFuneResp(BuyCtFuneResp other) : this() {
    changeItem_ = other.changeItem_.Clone();
    funeNum_ = other.funeNum_.Clone();
    addNum_ = other.addNum_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyCtFuneResp Clone() {
    return new BuyCtFuneResp(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "funeNum" field.</summary>
  public const int FuneNumFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_funeNum_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> funeNum_ = new pbc::MapField<int, int>();
  /// <summary>
  ///id->num
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> FuneNum {
    get { return funeNum_; }
  }

  /// <summary>Field number for the "addNum" field.</summary>
  public const int AddNumFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_addNum_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> addNum_ = new pbc::MapField<int, int>();
  /// <summary>
  ///此次购买增加的数量id->num
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> AddNum {
    get { return addNum_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyCtFuneResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyCtFuneResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (!FuneNum.Equals(other.FuneNum)) return false;
    if (!AddNum.Equals(other.AddNum)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    hash ^= FuneNum.GetHashCode();
    hash ^= AddNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
    funeNum_.WriteTo(output, _map_funeNum_codec);
    addNum_.WriteTo(output, _map_addNum_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    size += funeNum_.CalculateSize(_map_funeNum_codec);
    size += addNum_.CalculateSize(_map_addNum_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyCtFuneResp other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
    funeNum_.Add(other.funeNum_);
    addNum_.Add(other.addNum_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 18: {
          funeNum_.AddEntriesFrom(input, _map_funeNum_codec);
          break;
        }
        case 26: {
          addNum_.AddEntriesFrom(input, _map_addNum_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///云游符文列表 --req nil
/// </summary>
public sealed partial class ListCtFuneResp : pb::IMessage<ListCtFuneResp> {
  private static readonly pb::MessageParser<ListCtFuneResp> _parser = new pb::MessageParser<ListCtFuneResp>(() => new ListCtFuneResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListCtFuneResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListCtFuneResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListCtFuneResp(ListCtFuneResp other) : this() {
    funeNum_ = other.funeNum_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListCtFuneResp Clone() {
    return new ListCtFuneResp(this);
  }

  /// <summary>Field number for the "funeNum" field.</summary>
  public const int FuneNumFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_funeNum_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> funeNum_ = new pbc::MapField<int, int>();
  /// <summary>
  ///id->num
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> FuneNum {
    get { return funeNum_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListCtFuneResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListCtFuneResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!FuneNum.Equals(other.FuneNum)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= FuneNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    funeNum_.WriteTo(output, _map_funeNum_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += funeNum_.CalculateSize(_map_funeNum_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListCtFuneResp other) {
    if (other == null) {
      return;
    }
    funeNum_.Add(other.funeNum_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          funeNum_.AddEntriesFrom(input, _map_funeNum_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///藏宝阁升级格子 --req nil
/// </summary>
public sealed partial class PavUpGridResp : pb::IMessage<PavUpGridResp> {
  private static readonly pb::MessageParser<PavUpGridResp> _parser = new pb::MessageParser<PavUpGridResp>(() => new PavUpGridResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PavUpGridResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PavUpGridResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PavUpGridResp(PavUpGridResp other) : this() {
    level_ = other.level_;
    grid_ = other.grid_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PavUpGridResp Clone() {
    return new PavUpGridResp(this);
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 1;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "grid" field.</summary>
  public const int GridFieldNumber = 2;
  private int grid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Grid {
    get { return grid_; }
    set {
      grid_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PavUpGridResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PavUpGridResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Level != other.Level) return false;
    if (Grid != other.Grid) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Grid != 0) hash ^= Grid.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Level != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Level);
    }
    if (Grid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Grid);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Grid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grid);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PavUpGridResp other) {
    if (other == null) {
      return;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Grid != 0) {
      Grid = other.Grid;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Level = input.ReadInt32();
          break;
        }
        case 16: {
          Grid = input.ReadInt32();
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///藏宝阁升级等级 --req nil
/// </summary>
public sealed partial class PavUpLevelResp : pb::IMessage<PavUpLevelResp> {
  private static readonly pb::MessageParser<PavUpLevelResp> _parser = new pb::MessageParser<PavUpLevelResp>(() => new PavUpLevelResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PavUpLevelResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PavUpLevelResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PavUpLevelResp(PavUpLevelResp other) : this() {
    levelCd_ = other.levelCd_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PavUpLevelResp Clone() {
    return new PavUpLevelResp(this);
  }

  /// <summary>Field number for the "levelCd" field.</summary>
  public const int LevelCdFieldNumber = 1;
  private int levelCd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LevelCd {
    get { return levelCd_; }
    set {
      levelCd_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PavUpLevelResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PavUpLevelResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LevelCd != other.LevelCd) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LevelCd != 0) hash ^= LevelCd.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LevelCd != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(LevelCd);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LevelCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelCd);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PavUpLevelResp other) {
    if (other == null) {
      return;
    }
    if (other.LevelCd != 0) {
      LevelCd = other.LevelCd;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          LevelCd = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///查看藏宝阁信息 --req nil
/// </summary>
public sealed partial class LookPavilionResp : pb::IMessage<LookPavilionResp> {
  private static readonly pb::MessageParser<LookPavilionResp> _parser = new pb::MessageParser<LookPavilionResp>(() => new LookPavilionResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LookPavilionResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LookPavilionResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LookPavilionResp(LookPavilionResp other) : this() {
    level_ = other.level_;
    grid_ = other.grid_;
    levelCd_ = other.levelCd_;
    advertiseCd_ = other.advertiseCd_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LookPavilionResp Clone() {
    return new LookPavilionResp(this);
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 1;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "grid" field.</summary>
  public const int GridFieldNumber = 2;
  private int grid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Grid {
    get { return grid_; }
    set {
      grid_ = value;
    }
  }

  /// <summary>Field number for the "levelCd" field.</summary>
  public const int LevelCdFieldNumber = 3;
  private int levelCd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LevelCd {
    get { return levelCd_; }
    set {
      levelCd_ = value;
    }
  }

  /// <summary>Field number for the "advertiseCd" field.</summary>
  public const int AdvertiseCdFieldNumber = 4;
  private int advertiseCd_;
  /// <summary>
  ///广告冷却 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AdvertiseCd {
    get { return advertiseCd_; }
    set {
      advertiseCd_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LookPavilionResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LookPavilionResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Level != other.Level) return false;
    if (Grid != other.Grid) return false;
    if (LevelCd != other.LevelCd) return false;
    if (AdvertiseCd != other.AdvertiseCd) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Grid != 0) hash ^= Grid.GetHashCode();
    if (LevelCd != 0) hash ^= LevelCd.GetHashCode();
    if (AdvertiseCd != 0) hash ^= AdvertiseCd.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Level != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Level);
    }
    if (Grid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Grid);
    }
    if (LevelCd != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LevelCd);
    }
    if (AdvertiseCd != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AdvertiseCd);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Grid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grid);
    }
    if (LevelCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelCd);
    }
    if (AdvertiseCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdvertiseCd);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LookPavilionResp other) {
    if (other == null) {
      return;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Grid != 0) {
      Grid = other.Grid;
    }
    if (other.LevelCd != 0) {
      LevelCd = other.LevelCd;
    }
    if (other.AdvertiseCd != 0) {
      AdvertiseCd = other.AdvertiseCd;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Level = input.ReadInt32();
          break;
        }
        case 16: {
          Grid = input.ReadInt32();
          break;
        }
        case 24: {
          LevelCd = input.ReadInt32();
          break;
        }
        case 32: {
          AdvertiseCd = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///藏宝阁升级加速 
/// </summary>
public sealed partial class PavAddSpeedReq : pb::IMessage<PavAddSpeedReq> {
  private static readonly pb::MessageParser<PavAddSpeedReq> _parser = new pb::MessageParser<PavAddSpeedReq>(() => new PavAddSpeedReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PavAddSpeedReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PavAddSpeedReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PavAddSpeedReq(PavAddSpeedReq other) : this() {
    op_ = other.op_;
    itemNum_ = other.itemNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PavAddSpeedReq Clone() {
    return new PavAddSpeedReq(this);
  }

  /// <summary>Field number for the "op" field.</summary>
  public const int OpFieldNumber = 1;
  private int op_;
  /// <summary>
  ///1-看广告 2-消耗道具 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Op {
    get { return op_; }
    set {
      op_ = value;
    }
  }

  /// <summary>Field number for the "itemNum" field.</summary>
  public const int ItemNumFieldNumber = 2;
  private int itemNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ItemNum {
    get { return itemNum_; }
    set {
      itemNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PavAddSpeedReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PavAddSpeedReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Op != other.Op) return false;
    if (ItemNum != other.ItemNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Op != 0) hash ^= Op.GetHashCode();
    if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Op != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Op);
    }
    if (ItemNum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ItemNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Op != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Op);
    }
    if (ItemNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PavAddSpeedReq other) {
    if (other == null) {
      return;
    }
    if (other.Op != 0) {
      Op = other.Op;
    }
    if (other.ItemNum != 0) {
      ItemNum = other.ItemNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Op = input.ReadInt32();
          break;
        }
        case 16: {
          ItemNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PavAddSpeedResp : pb::IMessage<PavAddSpeedResp> {
  private static readonly pb::MessageParser<PavAddSpeedResp> _parser = new pb::MessageParser<PavAddSpeedResp>(() => new PavAddSpeedResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PavAddSpeedResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CloudtravelReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PavAddSpeedResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PavAddSpeedResp(PavAddSpeedResp other) : this() {
    op_ = other.op_;
    levelCd_ = other.levelCd_;
    changeItem_ = other.changeItem_.Clone();
    advertiseCd_ = other.advertiseCd_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PavAddSpeedResp Clone() {
    return new PavAddSpeedResp(this);
  }

  /// <summary>Field number for the "op" field.</summary>
  public const int OpFieldNumber = 1;
  private int op_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Op {
    get { return op_; }
    set {
      op_ = value;
    }
  }

  /// <summary>Field number for the "levelCd" field.</summary>
  public const int LevelCdFieldNumber = 2;
  private int levelCd_;
  /// <summary>
  ///如果==0 代表加速完成，客户端直接处理等级，格子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LevelCd {
    get { return levelCd_; }
    set {
      levelCd_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///可能nil
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "advertiseCd" field.</summary>
  public const int AdvertiseCdFieldNumber = 4;
  private int advertiseCd_;
  /// <summary>
  ///广告冷却 可能为0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AdvertiseCd {
    get { return advertiseCd_; }
    set {
      advertiseCd_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PavAddSpeedResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PavAddSpeedResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Op != other.Op) return false;
    if (LevelCd != other.LevelCd) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (AdvertiseCd != other.AdvertiseCd) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Op != 0) hash ^= Op.GetHashCode();
    if (LevelCd != 0) hash ^= LevelCd.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    if (AdvertiseCd != 0) hash ^= AdvertiseCd.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Op != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Op);
    }
    if (LevelCd != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LevelCd);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (AdvertiseCd != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AdvertiseCd);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Op != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Op);
    }
    if (LevelCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelCd);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (AdvertiseCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdvertiseCd);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PavAddSpeedResp other) {
    if (other == null) {
      return;
    }
    if (other.Op != 0) {
      Op = other.Op;
    }
    if (other.LevelCd != 0) {
      LevelCd = other.LevelCd;
    }
    changeItem_.Add(other.changeItem_);
    if (other.AdvertiseCd != 0) {
      AdvertiseCd = other.AdvertiseCd;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Op = input.ReadInt32();
          break;
        }
        case 16: {
          LevelCd = input.ReadInt32();
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 32: {
          AdvertiseCd = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
