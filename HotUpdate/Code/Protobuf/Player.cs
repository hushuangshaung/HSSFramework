// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from player.proto</summary>
public static partial class PlayerReflection {

  #region Descriptor
  /// <summary>File descriptor for player.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PlayerReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxwbGF5ZXIucHJvdG8aCmJlYW4ucHJvdG8iOQoITG9naW5SZXESDwoHYWNj",
          "b3VudBgBIAEoCRILCgNzaWQYAiABKAUSDwoHdmVyc2lvbhgDIAEoBSLeBQoJ",
          "TG9naW5SZXNwEhkKBnBsYXllchgBIAEoCzIJLlBsYXllclBiEiQKDHBsYXll",
          "clRhbGVudBgCIAEoCzIOLlBsYXllclRhbGVudHMSHQoFZXh0cmEYAyABKAsy",
          "Di5QbGF5ZXJFeHRyYVBiEhUKBGF0dHIYBCABKAsyBy5BdHRyUGISHwoGZXF1",
          "aXBzGAUgASgLMg8uUGxheWVyRXF1aXBzVjISHQoJaGF0Y2hQb29sGAYgASgL",
          "MgouSGF0Y2hQb29sEiEKDW5vSGFuZGxlRXF1aXAYByADKAsyCi5FcXVpcFYy",
          "UGISHQoJY3VyVGFsZW50GAggASgLMgouQ3VyVGFsZW50EhAKCGN1ck1vdW50",
          "GAkgASgFEhUKBGhvbGUYCiABKAsyBy5Ib2xlUGISIwoLY2hpbGREZXRhaWwY",
          "CyABKAsyDi5DaGlsZERldGFpbFBiEhUKBGl0ZW0YDCABKAsyBy5JdGVtUGIS",
          "JQoMZGFpbHlSZWZyZXNoGA0gASgLMg8uRGFpbHlSZWZyZXNoUGISHQoIdHJl",
          "YXN1cmUYDiABKAsyCy5UcmVhc3VyZVBiEh0KCG1haW5UYXNrGA8gASgLMgsu",
          "TWFpblRhc2tQYhIdCghhY3Rpdml0eRgQIAEoCzILLkFjdGl2aXR5UGISDQoF",
          "Z3VpZGUYESADKAUSGgoIY3VyRHJlc3MYEiABKAsyCC5FcXVpcFBiEhAKCGN1",
          "ckFycmV5GBMgASgFEiAKA3R0ZxgUIAMoCzITLkxvZ2luUmVzcC5UdGdFbnRy",
          "eRIXCgVzY2VuZRgVIAEoCzIILlNjZW5lUGISDAoEdGltZRgWIAEoAxIQCgh0",
          "aW1lWm9uZRgXIAEoBRIrCg1zdGFnZVRhc2tJbmZvGBggASgLMhQuUGxheWVy",
          "U3RhZ2VUYXNrSW5mbxoqCghUdGdFbnRyeRILCgNrZXkYASABKAUSDQoFdmFs",
          "dWUYAiABKAU6AjgBIiUKB1N5bmNSZXESCwoDbG9nGAEgASgFEg0KBXBhcmFt",
          "GAIgASgFIiYKCFN5bmNSZXNwEgsKA2xvZxgBIAEoBRINCgVwYXJhbRgCIAMo",
          "BSIYCghQaW5nUmVzcBIMCgR0aW1lGAEgASgDIgwKClVwU3RhZ2VSZXMilAEK",
          "C1VwU3RhZ2VSZXNwEg0KBWxldmVsGAEgASgFEgsKA2V4cBgCIAEoBRINCgVz",
          "dGFnZRgDIAEoBRIqCgdhZGRJdGVtGAQgAygLMhkuVXBTdGFnZVJlc3AuQWRk",
          "SXRlbUVudHJ5Gi4KDEFkZEl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFs",
          "dWUYAiABKAU6AjgBIicKFEFjY291bnRQbGF5ZXJEYXRhUmVxEg8KB2FjY291",
          "bnQYASADKAkiOwoVQWNjb3VudFBsYXllckRhdGFSZXNwEiIKCGFjUGxheWVy",
          "GAEgAygLMhAuQWNjb3VudFBsYXllclBiIjwKEkFjY291bnRUcmFuc2ZlclJl",
          "cRISCgpvbGRBY2NvdW50GAEgASgJEhIKCm5ld0FjY291bnQYAiABKAkiKQoT",
          "QWNjb3VudFRyYW5zZmVyUmVzcBISCgpuZXdBY2NvdW50GAIgASgJIh0KDVVw",
          "ZGF0ZU5hbWVSZXESDAoEbmFtZRgBIAEoCSKGAQoOVXBkYXRlTmFtZVJlc3AS",
          "DAoEbmFtZRgBIAEoCRIzCgpjaGFuZ2VJdGVtGAIgAygLMh8uVXBkYXRlTmFt",
          "ZVJlc3AuQ2hhbmdlSXRlbUVudHJ5GjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNr",
          "ZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIiUKEU1pbmlQbGF5ZXJJbmZv",
          "UmVxEhAKCHBsYXllcklkGAEgASgFIjsKEk1pbmlQbGF5ZXJJbmZvUmVzcBIl",
          "CgptaW5pUGxheWVyGAEgASgLMhEuUGxheWVyTWluaUluZm9QYkIWCgpjb20u",
          "Y2IubXNnQghQQlBsYXllcmIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginReq), global::LoginReq.Parser, new[]{ "Account", "Sid", "Version" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoginResp), global::LoginResp.Parser, new[]{ "Player", "PlayerTalent", "Extra", "Attr", "Equips", "HatchPool", "NoHandleEquip", "CurTalent", "CurMount", "Hole", "ChildDetail", "Item", "DailyRefresh", "Treasure", "MainTask", "Activity", "Guide", "CurDress", "CurArrey", "Ttg", "Scene", "Time", "TimeZone", "StageTaskInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncReq), global::SyncReq.Parser, new[]{ "Log", "Param" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SyncResp), global::SyncResp.Parser, new[]{ "Log", "Param" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PingResp), global::PingResp.Parser, new[]{ "Time" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpStageRes), global::UpStageRes.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpStageResp), global::UpStageResp.Parser, new[]{ "Level", "Exp", "Stage", "AddItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::AccountPlayerDataReq), global::AccountPlayerDataReq.Parser, new[]{ "Account" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AccountPlayerDataResp), global::AccountPlayerDataResp.Parser, new[]{ "AcPlayer" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AccountTransferReq), global::AccountTransferReq.Parser, new[]{ "OldAccount", "NewAccount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AccountTransferResp), global::AccountTransferResp.Parser, new[]{ "NewAccount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateNameReq), global::UpdateNameReq.Parser, new[]{ "Name" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateNameResp), global::UpdateNameResp.Parser, new[]{ "Name", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::MiniPlayerInfoReq), global::MiniPlayerInfoReq.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MiniPlayerInfoResp), global::MiniPlayerInfoResp.Parser, new[]{ "MiniPlayer" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///登录
/// </summary>
public sealed partial class LoginReq : pb::IMessage<LoginReq> {
  private static readonly pb::MessageParser<LoginReq> _parser = new pb::MessageParser<LoginReq>(() => new LoginReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginReq(LoginReq other) : this() {
    account_ = other.account_;
    sid_ = other.sid_;
    version_ = other.version_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginReq Clone() {
    return new LoginReq(this);
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 1;
  private string account_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sid" field.</summary>
  public const int SidFieldNumber = 2;
  private int sid_;
  /// <summary>
  ///区服id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sid {
    get { return sid_; }
    set {
      sid_ = value;
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 3;
  private int version_;
  /// <summary>
  ///服务器版本号 默认0,客户端处理为配置数据(跟apk包绑定的配置)，有重大升级的情况下，需要重新使用新apk进入游戏
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Account != other.Account) return false;
    if (Sid != other.Sid) return false;
    if (Version != other.Version) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (Sid != 0) hash ^= Sid.GetHashCode();
    if (Version != 0) hash ^= Version.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Account.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Account);
    }
    if (Sid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Sid);
    }
    if (Version != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Version);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (Sid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sid);
    }
    if (Version != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginReq other) {
    if (other == null) {
      return;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.Sid != 0) {
      Sid = other.Sid;
    }
    if (other.Version != 0) {
      Version = other.Version;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Account = input.ReadString();
          break;
        }
        case 16: {
          Sid = input.ReadInt32();
          break;
        }
        case 24: {
          Version = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LoginResp : pb::IMessage<LoginResp> {
  private static readonly pb::MessageParser<LoginResp> _parser = new pb::MessageParser<LoginResp>(() => new LoginResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoginResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResp(LoginResp other) : this() {
    Player = other.player_ != null ? other.Player.Clone() : null;
    PlayerTalent = other.playerTalent_ != null ? other.PlayerTalent.Clone() : null;
    Extra = other.extra_ != null ? other.Extra.Clone() : null;
    Attr = other.attr_ != null ? other.Attr.Clone() : null;
    Equips = other.equips_ != null ? other.Equips.Clone() : null;
    HatchPool = other.hatchPool_ != null ? other.HatchPool.Clone() : null;
    noHandleEquip_ = other.noHandleEquip_.Clone();
    CurTalent = other.curTalent_ != null ? other.CurTalent.Clone() : null;
    curMount_ = other.curMount_;
    Hole = other.hole_ != null ? other.Hole.Clone() : null;
    ChildDetail = other.childDetail_ != null ? other.ChildDetail.Clone() : null;
    Item = other.item_ != null ? other.Item.Clone() : null;
    DailyRefresh = other.dailyRefresh_ != null ? other.DailyRefresh.Clone() : null;
    Treasure = other.treasure_ != null ? other.Treasure.Clone() : null;
    MainTask = other.mainTask_ != null ? other.MainTask.Clone() : null;
    Activity = other.activity_ != null ? other.Activity.Clone() : null;
    guide_ = other.guide_.Clone();
    CurDress = other.curDress_ != null ? other.CurDress.Clone() : null;
    curArrey_ = other.curArrey_;
    ttg_ = other.ttg_.Clone();
    Scene = other.scene_ != null ? other.Scene.Clone() : null;
    time_ = other.time_;
    timeZone_ = other.timeZone_;
    StageTaskInfo = other.stageTaskInfo_ != null ? other.StageTaskInfo.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoginResp Clone() {
    return new LoginResp(this);
  }

  /// <summary>Field number for the "player" field.</summary>
  public const int PlayerFieldNumber = 1;
  private global::PlayerPb player_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerPb Player {
    get { return player_; }
    set {
      player_ = value;
    }
  }

  /// <summary>Field number for the "playerTalent" field.</summary>
  public const int PlayerTalentFieldNumber = 2;
  private global::PlayerTalents playerTalent_;
  /// <summary>
  ///玩家所有天赋
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerTalents PlayerTalent {
    get { return playerTalent_; }
    set {
      playerTalent_ = value;
    }
  }

  /// <summary>Field number for the "extra" field.</summary>
  public const int ExtraFieldNumber = 3;
  private global::PlayerExtraPb extra_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerExtraPb Extra {
    get { return extra_; }
    set {
      extra_ = value;
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 4;
  private global::AttrPb attr_;
  /// <summary>
  ///玩家所有属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AttrPb Attr {
    get { return attr_; }
    set {
      attr_ = value;
    }
  }

  /// <summary>Field number for the "equips" field.</summary>
  public const int EquipsFieldNumber = 5;
  private global::PlayerEquipsV2 equips_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerEquipsV2 Equips {
    get { return equips_; }
    set {
      equips_ = value;
    }
  }

  /// <summary>Field number for the "hatchPool" field.</summary>
  public const int HatchPoolFieldNumber = 6;
  private global::HatchPool hatchPool_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HatchPool HatchPool {
    get { return hatchPool_; }
    set {
      hatchPool_ = value;
    }
  }

  /// <summary>Field number for the "noHandleEquip" field.</summary>
  public const int NoHandleEquipFieldNumber = 7;
  private static readonly pb::FieldCodec<global::EquipV2Pb> _repeated_noHandleEquip_codec
      = pb::FieldCodec.ForMessage(58, global::EquipV2Pb.Parser);
  private readonly pbc::RepeatedField<global::EquipV2Pb> noHandleEquip_ = new pbc::RepeatedField<global::EquipV2Pb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EquipV2Pb> NoHandleEquip {
    get { return noHandleEquip_; }
  }

  /// <summary>Field number for the "curTalent" field.</summary>
  public const int CurTalentFieldNumber = 8;
  private global::CurTalent curTalent_;
  /// <summary>
  ///玩家当前天赋
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CurTalent CurTalent {
    get { return curTalent_; }
    set {
      curTalent_ = value;
    }
  }

  /// <summary>Field number for the "curMount" field.</summary>
  public const int CurMountFieldNumber = 9;
  private int curMount_;
  /// <summary>
  ///当前坐骑 id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurMount {
    get { return curMount_; }
    set {
      curMount_ = value;
    }
  }

  /// <summary>Field number for the "hole" field.</summary>
  public const int HoleFieldNumber = 10;
  private global::HolePb hole_;
  /// <summary>
  ///洞天
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HolePb Hole {
    get { return hole_; }
    set {
      hole_ = value;
    }
  }

  /// <summary>Field number for the "childDetail" field.</summary>
  public const int ChildDetailFieldNumber = 11;
  private global::ChildDetailPb childDetail_;
  /// <summary>
  ///仙童详情
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ChildDetailPb ChildDetail {
    get { return childDetail_; }
    set {
      childDetail_ = value;
    }
  }

  /// <summary>Field number for the "item" field.</summary>
  public const int ItemFieldNumber = 12;
  private global::ItemPb item_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ItemPb Item {
    get { return item_; }
    set {
      item_ = value;
    }
  }

  /// <summary>Field number for the "dailyRefresh" field.</summary>
  public const int DailyRefreshFieldNumber = 13;
  private global::DailyRefreshPb dailyRefresh_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DailyRefreshPb DailyRefresh {
    get { return dailyRefresh_; }
    set {
      dailyRefresh_ = value;
    }
  }

  /// <summary>Field number for the "treasure" field.</summary>
  public const int TreasureFieldNumber = 14;
  private global::TreasurePb treasure_;
  /// <summary>
  ///当前法宝
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TreasurePb Treasure {
    get { return treasure_; }
    set {
      treasure_ = value;
    }
  }

  /// <summary>Field number for the "mainTask" field.</summary>
  public const int MainTaskFieldNumber = 15;
  private global::MainTaskPb mainTask_;
  /// <summary>
  ///主线任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MainTaskPb MainTask {
    get { return mainTask_; }
    set {
      mainTask_ = value;
    }
  }

  /// <summary>Field number for the "activity" field.</summary>
  public const int ActivityFieldNumber = 16;
  private global::ActivityPb activity_;
  /// <summary>
  ///活动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActivityPb Activity {
    get { return activity_; }
    set {
      activity_ = value;
    }
  }

  /// <summary>Field number for the "guide" field.</summary>
  public const int GuideFieldNumber = 17;
  private static readonly pb::FieldCodec<int> _repeated_guide_codec
      = pb::FieldCodec.ForInt32(138);
  private readonly pbc::RepeatedField<int> guide_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///已完成的新手引导
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Guide {
    get { return guide_; }
  }

  /// <summary>Field number for the "curDress" field.</summary>
  public const int CurDressFieldNumber = 18;
  private global::EquipPb curDress_;
  /// <summary>
  ///当前上衣
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EquipPb CurDress {
    get { return curDress_; }
    set {
      curDress_ = value;
    }
  }

  /// <summary>Field number for the "curArrey" field.</summary>
  public const int CurArreyFieldNumber = 19;
  private int curArrey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurArrey {
    get { return curArrey_; }
    set {
      curArrey_ = value;
    }
  }

  /// <summary>Field number for the "ttg" field.</summary>
  public const int TtgFieldNumber = 20;
  private static readonly pbc::MapField<int, int>.Codec _map_ttg_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 162);
  private readonly pbc::MapField<int, int> ttg_ = new pbc::MapField<int, int>();
  /// <summary>
  ///天赋到宠物品质的映射  TalentToGradePb
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Ttg {
    get { return ttg_; }
  }

  /// <summary>Field number for the "scene" field.</summary>
  public const int SceneFieldNumber = 21;
  private global::ScenePb scene_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ScenePb Scene {
    get { return scene_; }
    set {
      scene_ = value;
    }
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 22;
  private long time_;
  /// <summary>
  /// 时间戳，毫秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "timeZone" field.</summary>
  public const int TimeZoneFieldNumber = 23;
  private int timeZone_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeZone {
    get { return timeZone_; }
    set {
      timeZone_ = value;
    }
  }

  /// <summary>Field number for the "stageTaskInfo" field.</summary>
  public const int StageTaskInfoFieldNumber = 24;
  private global::PlayerStageTaskInfo stageTaskInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerStageTaskInfo StageTaskInfo {
    get { return stageTaskInfo_; }
    set {
      stageTaskInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoginResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoginResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Player, other.Player)) return false;
    if (!object.Equals(PlayerTalent, other.PlayerTalent)) return false;
    if (!object.Equals(Extra, other.Extra)) return false;
    if (!object.Equals(Attr, other.Attr)) return false;
    if (!object.Equals(Equips, other.Equips)) return false;
    if (!object.Equals(HatchPool, other.HatchPool)) return false;
    if(!noHandleEquip_.Equals(other.noHandleEquip_)) return false;
    if (!object.Equals(CurTalent, other.CurTalent)) return false;
    if (CurMount != other.CurMount) return false;
    if (!object.Equals(Hole, other.Hole)) return false;
    if (!object.Equals(ChildDetail, other.ChildDetail)) return false;
    if (!object.Equals(Item, other.Item)) return false;
    if (!object.Equals(DailyRefresh, other.DailyRefresh)) return false;
    if (!object.Equals(Treasure, other.Treasure)) return false;
    if (!object.Equals(MainTask, other.MainTask)) return false;
    if (!object.Equals(Activity, other.Activity)) return false;
    if(!guide_.Equals(other.guide_)) return false;
    if (!object.Equals(CurDress, other.CurDress)) return false;
    if (CurArrey != other.CurArrey) return false;
    if (!Ttg.Equals(other.Ttg)) return false;
    if (!object.Equals(Scene, other.Scene)) return false;
    if (Time != other.Time) return false;
    if (TimeZone != other.TimeZone) return false;
    if (!object.Equals(StageTaskInfo, other.StageTaskInfo)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (player_ != null) hash ^= Player.GetHashCode();
    if (playerTalent_ != null) hash ^= PlayerTalent.GetHashCode();
    if (extra_ != null) hash ^= Extra.GetHashCode();
    if (attr_ != null) hash ^= Attr.GetHashCode();
    if (equips_ != null) hash ^= Equips.GetHashCode();
    if (hatchPool_ != null) hash ^= HatchPool.GetHashCode();
    hash ^= noHandleEquip_.GetHashCode();
    if (curTalent_ != null) hash ^= CurTalent.GetHashCode();
    if (CurMount != 0) hash ^= CurMount.GetHashCode();
    if (hole_ != null) hash ^= Hole.GetHashCode();
    if (childDetail_ != null) hash ^= ChildDetail.GetHashCode();
    if (item_ != null) hash ^= Item.GetHashCode();
    if (dailyRefresh_ != null) hash ^= DailyRefresh.GetHashCode();
    if (treasure_ != null) hash ^= Treasure.GetHashCode();
    if (mainTask_ != null) hash ^= MainTask.GetHashCode();
    if (activity_ != null) hash ^= Activity.GetHashCode();
    hash ^= guide_.GetHashCode();
    if (curDress_ != null) hash ^= CurDress.GetHashCode();
    if (CurArrey != 0) hash ^= CurArrey.GetHashCode();
    hash ^= Ttg.GetHashCode();
    if (scene_ != null) hash ^= Scene.GetHashCode();
    if (Time != 0L) hash ^= Time.GetHashCode();
    if (TimeZone != 0) hash ^= TimeZone.GetHashCode();
    if (stageTaskInfo_ != null) hash ^= StageTaskInfo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (player_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Player);
    }
    if (playerTalent_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayerTalent);
    }
    if (extra_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Extra);
    }
    if (attr_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Attr);
    }
    if (equips_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Equips);
    }
    if (hatchPool_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(HatchPool);
    }
    noHandleEquip_.WriteTo(output, _repeated_noHandleEquip_codec);
    if (curTalent_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(CurTalent);
    }
    if (CurMount != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(CurMount);
    }
    if (hole_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(Hole);
    }
    if (childDetail_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(ChildDetail);
    }
    if (item_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(Item);
    }
    if (dailyRefresh_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(DailyRefresh);
    }
    if (treasure_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(Treasure);
    }
    if (mainTask_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(MainTask);
    }
    if (activity_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(Activity);
    }
    guide_.WriteTo(output, _repeated_guide_codec);
    if (curDress_ != null) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(CurDress);
    }
    if (CurArrey != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(CurArrey);
    }
    ttg_.WriteTo(output, _map_ttg_codec);
    if (scene_ != null) {
      output.WriteRawTag(170, 1);
      output.WriteMessage(Scene);
    }
    if (Time != 0L) {
      output.WriteRawTag(176, 1);
      output.WriteInt64(Time);
    }
    if (TimeZone != 0) {
      output.WriteRawTag(184, 1);
      output.WriteInt32(TimeZone);
    }
    if (stageTaskInfo_ != null) {
      output.WriteRawTag(194, 1);
      output.WriteMessage(StageTaskInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (player_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
    }
    if (playerTalent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerTalent);
    }
    if (extra_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extra);
    }
    if (attr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
    }
    if (equips_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equips);
    }
    if (hatchPool_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HatchPool);
    }
    size += noHandleEquip_.CalculateSize(_repeated_noHandleEquip_codec);
    if (curTalent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurTalent);
    }
    if (CurMount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurMount);
    }
    if (hole_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hole);
    }
    if (childDetail_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChildDetail);
    }
    if (item_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
    }
    if (dailyRefresh_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyRefresh);
    }
    if (treasure_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Treasure);
    }
    if (mainTask_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainTask);
    }
    if (activity_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Activity);
    }
    size += guide_.CalculateSize(_repeated_guide_codec);
    if (curDress_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(CurDress);
    }
    if (CurArrey != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurArrey);
    }
    size += ttg_.CalculateSize(_map_ttg_codec);
    if (scene_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Scene);
    }
    if (Time != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    if (TimeZone != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TimeZone);
    }
    if (stageTaskInfo_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StageTaskInfo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoginResp other) {
    if (other == null) {
      return;
    }
    if (other.player_ != null) {
      if (player_ == null) {
        player_ = new global::PlayerPb();
      }
      Player.MergeFrom(other.Player);
    }
    if (other.playerTalent_ != null) {
      if (playerTalent_ == null) {
        playerTalent_ = new global::PlayerTalents();
      }
      PlayerTalent.MergeFrom(other.PlayerTalent);
    }
    if (other.extra_ != null) {
      if (extra_ == null) {
        extra_ = new global::PlayerExtraPb();
      }
      Extra.MergeFrom(other.Extra);
    }
    if (other.attr_ != null) {
      if (attr_ == null) {
        attr_ = new global::AttrPb();
      }
      Attr.MergeFrom(other.Attr);
    }
    if (other.equips_ != null) {
      if (equips_ == null) {
        equips_ = new global::PlayerEquipsV2();
      }
      Equips.MergeFrom(other.Equips);
    }
    if (other.hatchPool_ != null) {
      if (hatchPool_ == null) {
        hatchPool_ = new global::HatchPool();
      }
      HatchPool.MergeFrom(other.HatchPool);
    }
    noHandleEquip_.Add(other.noHandleEquip_);
    if (other.curTalent_ != null) {
      if (curTalent_ == null) {
        curTalent_ = new global::CurTalent();
      }
      CurTalent.MergeFrom(other.CurTalent);
    }
    if (other.CurMount != 0) {
      CurMount = other.CurMount;
    }
    if (other.hole_ != null) {
      if (hole_ == null) {
        hole_ = new global::HolePb();
      }
      Hole.MergeFrom(other.Hole);
    }
    if (other.childDetail_ != null) {
      if (childDetail_ == null) {
        childDetail_ = new global::ChildDetailPb();
      }
      ChildDetail.MergeFrom(other.ChildDetail);
    }
    if (other.item_ != null) {
      if (item_ == null) {
        item_ = new global::ItemPb();
      }
      Item.MergeFrom(other.Item);
    }
    if (other.dailyRefresh_ != null) {
      if (dailyRefresh_ == null) {
        dailyRefresh_ = new global::DailyRefreshPb();
      }
      DailyRefresh.MergeFrom(other.DailyRefresh);
    }
    if (other.treasure_ != null) {
      if (treasure_ == null) {
        treasure_ = new global::TreasurePb();
      }
      Treasure.MergeFrom(other.Treasure);
    }
    if (other.mainTask_ != null) {
      if (mainTask_ == null) {
        mainTask_ = new global::MainTaskPb();
      }
      MainTask.MergeFrom(other.MainTask);
    }
    if (other.activity_ != null) {
      if (activity_ == null) {
        activity_ = new global::ActivityPb();
      }
      Activity.MergeFrom(other.Activity);
    }
    guide_.Add(other.guide_);
    if (other.curDress_ != null) {
      if (curDress_ == null) {
        curDress_ = new global::EquipPb();
      }
      CurDress.MergeFrom(other.CurDress);
    }
    if (other.CurArrey != 0) {
      CurArrey = other.CurArrey;
    }
    ttg_.Add(other.ttg_);
    if (other.scene_ != null) {
      if (scene_ == null) {
        scene_ = new global::ScenePb();
      }
      Scene.MergeFrom(other.Scene);
    }
    if (other.Time != 0L) {
      Time = other.Time;
    }
    if (other.TimeZone != 0) {
      TimeZone = other.TimeZone;
    }
    if (other.stageTaskInfo_ != null) {
      if (stageTaskInfo_ == null) {
        stageTaskInfo_ = new global::PlayerStageTaskInfo();
      }
      StageTaskInfo.MergeFrom(other.StageTaskInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (player_ == null) {
            player_ = new global::PlayerPb();
          }
          input.ReadMessage(player_);
          break;
        }
        case 18: {
          if (playerTalent_ == null) {
            playerTalent_ = new global::PlayerTalents();
          }
          input.ReadMessage(playerTalent_);
          break;
        }
        case 26: {
          if (extra_ == null) {
            extra_ = new global::PlayerExtraPb();
          }
          input.ReadMessage(extra_);
          break;
        }
        case 34: {
          if (attr_ == null) {
            attr_ = new global::AttrPb();
          }
          input.ReadMessage(attr_);
          break;
        }
        case 42: {
          if (equips_ == null) {
            equips_ = new global::PlayerEquipsV2();
          }
          input.ReadMessage(equips_);
          break;
        }
        case 50: {
          if (hatchPool_ == null) {
            hatchPool_ = new global::HatchPool();
          }
          input.ReadMessage(hatchPool_);
          break;
        }
        case 58: {
          noHandleEquip_.AddEntriesFrom(input, _repeated_noHandleEquip_codec);
          break;
        }
        case 66: {
          if (curTalent_ == null) {
            curTalent_ = new global::CurTalent();
          }
          input.ReadMessage(curTalent_);
          break;
        }
        case 72: {
          CurMount = input.ReadInt32();
          break;
        }
        case 82: {
          if (hole_ == null) {
            hole_ = new global::HolePb();
          }
          input.ReadMessage(hole_);
          break;
        }
        case 90: {
          if (childDetail_ == null) {
            childDetail_ = new global::ChildDetailPb();
          }
          input.ReadMessage(childDetail_);
          break;
        }
        case 98: {
          if (item_ == null) {
            item_ = new global::ItemPb();
          }
          input.ReadMessage(item_);
          break;
        }
        case 106: {
          if (dailyRefresh_ == null) {
            dailyRefresh_ = new global::DailyRefreshPb();
          }
          input.ReadMessage(dailyRefresh_);
          break;
        }
        case 114: {
          if (treasure_ == null) {
            treasure_ = new global::TreasurePb();
          }
          input.ReadMessage(treasure_);
          break;
        }
        case 122: {
          if (mainTask_ == null) {
            mainTask_ = new global::MainTaskPb();
          }
          input.ReadMessage(mainTask_);
          break;
        }
        case 130: {
          if (activity_ == null) {
            activity_ = new global::ActivityPb();
          }
          input.ReadMessage(activity_);
          break;
        }
        case 138:
        case 136: {
          guide_.AddEntriesFrom(input, _repeated_guide_codec);
          break;
        }
        case 146: {
          if (curDress_ == null) {
            curDress_ = new global::EquipPb();
          }
          input.ReadMessage(curDress_);
          break;
        }
        case 152: {
          CurArrey = input.ReadInt32();
          break;
        }
        case 162: {
          ttg_.AddEntriesFrom(input, _map_ttg_codec);
          break;
        }
        case 170: {
          if (scene_ == null) {
            scene_ = new global::ScenePb();
          }
          input.ReadMessage(scene_);
          break;
        }
        case 176: {
          Time = input.ReadInt64();
          break;
        }
        case 184: {
          TimeZone = input.ReadInt32();
          break;
        }
        case 194: {
          if (stageTaskInfo_ == null) {
            stageTaskInfo_ = new global::PlayerStageTaskInfo();
          }
          input.ReadMessage(stageTaskInfo_);
          break;
        }
      }
    }
  }

}

/// <summary>
///同步
/// </summary>
public sealed partial class SyncReq : pb::IMessage<SyncReq> {
  private static readonly pb::MessageParser<SyncReq> _parser = new pb::MessageParser<SyncReq>(() => new SyncReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncReq(SyncReq other) : this() {
    log_ = other.log_;
    param_ = other.param_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncReq Clone() {
    return new SyncReq(this);
  }

  /// <summary>Field number for the "log" field.</summary>
  public const int LogFieldNumber = 1;
  private int log_;
  /// <summary>
  ///必须传值  2-新手引导 3-限时礼包开启(param=id)  4-云游地图切换(param=mapid)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Log {
    get { return log_; }
    set {
      log_ = value;
    }
  }

  /// <summary>Field number for the "param" field.</summary>
  public const int ParamFieldNumber = 2;
  private int param_;
  /// <summary>
  ///具体参数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Param {
    get { return param_; }
    set {
      param_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Log != other.Log) return false;
    if (Param != other.Param) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Log != 0) hash ^= Log.GetHashCode();
    if (Param != 0) hash ^= Param.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Log != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Log);
    }
    if (Param != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Param);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Log != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Log);
    }
    if (Param != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncReq other) {
    if (other == null) {
      return;
    }
    if (other.Log != 0) {
      Log = other.Log;
    }
    if (other.Param != 0) {
      Param = other.Param;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Log = input.ReadInt32();
          break;
        }
        case 16: {
          Param = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SyncResp : pb::IMessage<SyncResp> {
  private static readonly pb::MessageParser<SyncResp> _parser = new pb::MessageParser<SyncResp>(() => new SyncResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SyncResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncResp(SyncResp other) : this() {
    log_ = other.log_;
    param_ = other.param_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SyncResp Clone() {
    return new SyncResp(this);
  }

  /// <summary>Field number for the "log" field.</summary>
  public const int LogFieldNumber = 1;
  private int log_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Log {
    get { return log_; }
    set {
      log_ = value;
    }
  }

  /// <summary>Field number for the "param" field.</summary>
  public const int ParamFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_param_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> param_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///3-限时礼包开启(id,cd)  
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Param {
    get { return param_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SyncResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SyncResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Log != other.Log) return false;
    if(!param_.Equals(other.param_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Log != 0) hash ^= Log.GetHashCode();
    hash ^= param_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Log != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Log);
    }
    param_.WriteTo(output, _repeated_param_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Log != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Log);
    }
    size += param_.CalculateSize(_repeated_param_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SyncResp other) {
    if (other == null) {
      return;
    }
    if (other.Log != 0) {
      Log = other.Log;
    }
    param_.Add(other.param_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Log = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          param_.AddEntriesFrom(input, _repeated_param_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///心跳 --req nil
/// </summary>
public sealed partial class PingResp : pb::IMessage<PingResp> {
  private static readonly pb::MessageParser<PingResp> _parser = new pb::MessageParser<PingResp>(() => new PingResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PingResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PingResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PingResp(PingResp other) : this() {
    time_ = other.time_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PingResp Clone() {
    return new PingResp(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private long time_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PingResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PingResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time != 0L) hash ^= Time.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Time != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Time);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PingResp other) {
    if (other == null) {
      return;
    }
    if (other.Time != 0L) {
      Time = other.Time;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Time = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class UpStageRes : pb::IMessage<UpStageRes> {
  private static readonly pb::MessageParser<UpStageRes> _parser = new pb::MessageParser<UpStageRes>(() => new UpStageRes());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpStageRes> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpStageRes() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpStageRes(UpStageRes other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpStageRes Clone() {
    return new UpStageRes(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpStageRes);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpStageRes other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpStageRes other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class UpStageResp : pb::IMessage<UpStageResp> {
  private static readonly pb::MessageParser<UpStageResp> _parser = new pb::MessageParser<UpStageResp>(() => new UpStageResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpStageResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpStageResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpStageResp(UpStageResp other) : this() {
    level_ = other.level_;
    exp_ = other.exp_;
    stage_ = other.stage_;
    addItem_ = other.addItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpStageResp Clone() {
    return new UpStageResp(this);
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 1;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 2;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "stage" field.</summary>
  public const int StageFieldNumber = 3;
  private int stage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stage {
    get { return stage_; }
    set {
      stage_ = value;
    }
  }

  /// <summary>Field number for the "addItem" field.</summary>
  public const int AddItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_addItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> addItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///增加的道具,客户端自己维护增
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> AddItem {
    get { return addItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpStageResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpStageResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    if (Stage != other.Stage) return false;
    if (!AddItem.Equals(other.AddItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (Stage != 0) hash ^= Stage.GetHashCode();
    hash ^= AddItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Level != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Exp);
    }
    if (Stage != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Stage);
    }
    addItem_.WriteTo(output, _map_addItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (Stage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
    }
    size += addItem_.CalculateSize(_map_addItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpStageResp other) {
    if (other == null) {
      return;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.Stage != 0) {
      Stage = other.Stage;
    }
    addItem_.Add(other.addItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Level = input.ReadInt32();
          break;
        }
        case 16: {
          Exp = input.ReadInt32();
          break;
        }
        case 24: {
          Stage = input.ReadInt32();
          break;
        }
        case 34: {
          addItem_.AddEntriesFrom(input, _map_addItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///获取账号玩家数据
/// </summary>
public sealed partial class AccountPlayerDataReq : pb::IMessage<AccountPlayerDataReq> {
  private static readonly pb::MessageParser<AccountPlayerDataReq> _parser = new pb::MessageParser<AccountPlayerDataReq>(() => new AccountPlayerDataReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AccountPlayerDataReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountPlayerDataReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountPlayerDataReq(AccountPlayerDataReq other) : this() {
    account_ = other.account_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountPlayerDataReq Clone() {
    return new AccountPlayerDataReq(this);
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_account_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> account_ = new pbc::RepeatedField<string>();
  /// <summary>
  ///游戏账号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Account {
    get { return account_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AccountPlayerDataReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AccountPlayerDataReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!account_.Equals(other.account_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= account_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    account_.WriteTo(output, _repeated_account_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += account_.CalculateSize(_repeated_account_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AccountPlayerDataReq other) {
    if (other == null) {
      return;
    }
    account_.Add(other.account_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          account_.AddEntriesFrom(input, _repeated_account_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class AccountPlayerDataResp : pb::IMessage<AccountPlayerDataResp> {
  private static readonly pb::MessageParser<AccountPlayerDataResp> _parser = new pb::MessageParser<AccountPlayerDataResp>(() => new AccountPlayerDataResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AccountPlayerDataResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountPlayerDataResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountPlayerDataResp(AccountPlayerDataResp other) : this() {
    acPlayer_ = other.acPlayer_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountPlayerDataResp Clone() {
    return new AccountPlayerDataResp(this);
  }

  /// <summary>Field number for the "acPlayer" field.</summary>
  public const int AcPlayerFieldNumber = 1;
  private static readonly pb::FieldCodec<global::AccountPlayerPb> _repeated_acPlayer_codec
      = pb::FieldCodec.ForMessage(10, global::AccountPlayerPb.Parser);
  private readonly pbc::RepeatedField<global::AccountPlayerPb> acPlayer_ = new pbc::RepeatedField<global::AccountPlayerPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::AccountPlayerPb> AcPlayer {
    get { return acPlayer_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AccountPlayerDataResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AccountPlayerDataResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!acPlayer_.Equals(other.acPlayer_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= acPlayer_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    acPlayer_.WriteTo(output, _repeated_acPlayer_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += acPlayer_.CalculateSize(_repeated_acPlayer_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AccountPlayerDataResp other) {
    if (other == null) {
      return;
    }
    acPlayer_.Add(other.acPlayer_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          acPlayer_.AddEntriesFrom(input, _repeated_acPlayer_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///账号转移  --s3传输方式
/// </summary>
public sealed partial class AccountTransferReq : pb::IMessage<AccountTransferReq> {
  private static readonly pb::MessageParser<AccountTransferReq> _parser = new pb::MessageParser<AccountTransferReq>(() => new AccountTransferReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AccountTransferReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountTransferReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountTransferReq(AccountTransferReq other) : this() {
    oldAccount_ = other.oldAccount_;
    newAccount_ = other.newAccount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountTransferReq Clone() {
    return new AccountTransferReq(this);
  }

  /// <summary>Field number for the "oldAccount" field.</summary>
  public const int OldAccountFieldNumber = 1;
  private string oldAccount_ = "";
  /// <summary>
  ///旧游戏账号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OldAccount {
    get { return oldAccount_; }
    set {
      oldAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "newAccount" field.</summary>
  public const int NewAccountFieldNumber = 2;
  private string newAccount_ = "";
  /// <summary>
  ///新的游戏账号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NewAccount {
    get { return newAccount_; }
    set {
      newAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AccountTransferReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AccountTransferReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OldAccount != other.OldAccount) return false;
    if (NewAccount != other.NewAccount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OldAccount.Length != 0) hash ^= OldAccount.GetHashCode();
    if (NewAccount.Length != 0) hash ^= NewAccount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OldAccount.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(OldAccount);
    }
    if (NewAccount.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(NewAccount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OldAccount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OldAccount);
    }
    if (NewAccount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NewAccount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AccountTransferReq other) {
    if (other == null) {
      return;
    }
    if (other.OldAccount.Length != 0) {
      OldAccount = other.OldAccount;
    }
    if (other.NewAccount.Length != 0) {
      NewAccount = other.NewAccount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          OldAccount = input.ReadString();
          break;
        }
        case 18: {
          NewAccount = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class AccountTransferResp : pb::IMessage<AccountTransferResp> {
  private static readonly pb::MessageParser<AccountTransferResp> _parser = new pb::MessageParser<AccountTransferResp>(() => new AccountTransferResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AccountTransferResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountTransferResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountTransferResp(AccountTransferResp other) : this() {
    newAccount_ = other.newAccount_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountTransferResp Clone() {
    return new AccountTransferResp(this);
  }

  /// <summary>Field number for the "newAccount" field.</summary>
  public const int NewAccountFieldNumber = 2;
  private string newAccount_ = "";
  /// <summary>
  ///新的游戏账号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NewAccount {
    get { return newAccount_; }
    set {
      newAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AccountTransferResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AccountTransferResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NewAccount != other.NewAccount) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NewAccount.Length != 0) hash ^= NewAccount.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NewAccount.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(NewAccount);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NewAccount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NewAccount);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AccountTransferResp other) {
    if (other == null) {
      return;
    }
    if (other.NewAccount.Length != 0) {
      NewAccount = other.NewAccount;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 18: {
          NewAccount = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///改名
/// </summary>
public sealed partial class UpdateNameReq : pb::IMessage<UpdateNameReq> {
  private static readonly pb::MessageParser<UpdateNameReq> _parser = new pb::MessageParser<UpdateNameReq>(() => new UpdateNameReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateNameReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateNameReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateNameReq(UpdateNameReq other) : this() {
    name_ = other.name_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateNameReq Clone() {
    return new UpdateNameReq(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateNameReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateNameReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateNameReq other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class UpdateNameResp : pb::IMessage<UpdateNameResp> {
  private static readonly pb::MessageParser<UpdateNameResp> _parser = new pb::MessageParser<UpdateNameResp>(() => new UpdateNameResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateNameResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateNameResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateNameResp(UpdateNameResp other) : this() {
    name_ = other.name_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateNameResp Clone() {
    return new UpdateNameResp(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateNameResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateNameResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateNameResp other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 玩家查看
/// </summary>
public sealed partial class MiniPlayerInfoReq : pb::IMessage<MiniPlayerInfoReq> {
  private static readonly pb::MessageParser<MiniPlayerInfoReq> _parser = new pb::MessageParser<MiniPlayerInfoReq>(() => new MiniPlayerInfoReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MiniPlayerInfoReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MiniPlayerInfoReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MiniPlayerInfoReq(MiniPlayerInfoReq other) : this() {
    playerId_ = other.playerId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MiniPlayerInfoReq Clone() {
    return new MiniPlayerInfoReq(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private int playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MiniPlayerInfoReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MiniPlayerInfoReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MiniPlayerInfoReq other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PlayerId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MiniPlayerInfoResp : pb::IMessage<MiniPlayerInfoResp> {
  private static readonly pb::MessageParser<MiniPlayerInfoResp> _parser = new pb::MessageParser<MiniPlayerInfoResp>(() => new MiniPlayerInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MiniPlayerInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PlayerReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MiniPlayerInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MiniPlayerInfoResp(MiniPlayerInfoResp other) : this() {
    MiniPlayer = other.miniPlayer_ != null ? other.MiniPlayer.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MiniPlayerInfoResp Clone() {
    return new MiniPlayerInfoResp(this);
  }

  /// <summary>Field number for the "miniPlayer" field.</summary>
  public const int MiniPlayerFieldNumber = 1;
  private global::PlayerMiniInfoPb miniPlayer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerMiniInfoPb MiniPlayer {
    get { return miniPlayer_; }
    set {
      miniPlayer_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MiniPlayerInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MiniPlayerInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(MiniPlayer, other.MiniPlayer)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (miniPlayer_ != null) hash ^= MiniPlayer.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (miniPlayer_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(MiniPlayer);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (miniPlayer_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MiniPlayer);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MiniPlayerInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.miniPlayer_ != null) {
      if (miniPlayer_ == null) {
        miniPlayer_ = new global::PlayerMiniInfoPb();
      }
      MiniPlayer.MergeFrom(other.MiniPlayer);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (miniPlayer_ == null) {
            miniPlayer_ = new global::PlayerMiniInfoPb();
          }
          input.ReadMessage(miniPlayer_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
