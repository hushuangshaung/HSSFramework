// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: magic.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from magic.proto</summary>
public static partial class MagicReflection {

  #region Descriptor
  /// <summary>File descriptor for magic.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MagicReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgttYWdpYy5wcm90bxoKYmVhbi5wcm90byJDCg1BcnJleUluZm9SZXNwEhkK",
          "BnBhcnJleRgBIAEoCzIJLlBBcnJleVBiEhcKBXBmdW5lGAIgASgLMgguUEZ1",
          "bmVQYiIZCgtCdXlBcnJleVJlcRIKCgJpZBgBIAEoBSIxCgxCdXlBcnJleVJl",
          "c3ASCgoCaWQYASABKAUSFQoEaXRlbRgCIAEoCzIHLkl0ZW1QYiIcCg5DaGFu",
          "Z2VBcnJleVJlcRIKCgJpZBgBIAEoBSIdCg9DaGFuZ2VBcnJleVJlc3ASCgoC",
          "aWQYASABKAUiJwoKUHV0RnVuZVJlcRILCgNzcmwYASABKAUSDAoEZ3JpZBgC",
          "IAEoBSImCgtQdXRGdW5lUmVzcBIXCgVhcnJleRgBIAEoCzIILkFycmV5UGIi",
          "GwoLRG93bkZ1bmVSZXESDAoEZ3JpZBgBIAEoBSInCgxEb3duRnVuZVJlc3AS",
          "FwoFYXJyZXkYASABKAsyCC5BcnJleVBiIikKCkJ1eUZ1bmVSZXESDgoGZ29v",
          "ZGlkGAEgASgFEgsKA251bRgCIAEoBSI7CgtCdXlGdW5lUmVzcBIVCgRpdGVt",
          "GAEgASgLMgcuSXRlbVBiEhUKBGZ1bmUYAiADKAsyBy5GdW5lUGIiSwoVRnVu",
          "ZU9uZUtleUNvbWJpbmVSZXNwEhgKB2dldEZ1bmUYASADKAsyBy5GdW5lUGIS",
          "GAoHYWxsRnVuZRgCIAMoCzIHLkZ1bmVQYiIdCg5GdW5lQ29tYmluZVJlcRIL",
          "CgNzcmwYASADKAUiYwoPRnVuZUNvbWJpbmVSZXNwEgsKA3NybBgBIAMoBRIO",
          "CgZyZXN1bHQYAiABKAUSGAoHZ2V0RnVuZRgDIAEoCzIHLkZ1bmVQYhIZCgZw",
          "YXJyZXkYBCABKAsyCS5QQXJyZXlQYiI8CgtGdW5lTW92ZVJlcRILCgNzcmwY",
          "ASABKAUSDwoHb2xkR3JpZBgCIAEoBRIPCgduZXdHcmlkGAMgASgFQhUKCmNv",
          "bS5jYi5tc2dCB1BCTWFnaWNiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ArreyInfoResp), global::ArreyInfoResp.Parser, new[]{ "Parrey", "Pfune" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyArreyReq), global::BuyArreyReq.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyArreyResp), global::BuyArreyResp.Parser, new[]{ "Id", "Item" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChangeArreyReq), global::ChangeArreyReq.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChangeArreyResp), global::ChangeArreyResp.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PutFuneReq), global::PutFuneReq.Parser, new[]{ "Srl", "Grid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PutFuneResp), global::PutFuneResp.Parser, new[]{ "Arrey" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DownFuneReq), global::DownFuneReq.Parser, new[]{ "Grid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DownFuneResp), global::DownFuneResp.Parser, new[]{ "Arrey" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyFuneReq), global::BuyFuneReq.Parser, new[]{ "Goodid", "Num" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuyFuneResp), global::BuyFuneResp.Parser, new[]{ "Item", "Fune" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FuneOneKeyCombineResp), global::FuneOneKeyCombineResp.Parser, new[]{ "GetFune", "AllFune" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FuneCombineReq), global::FuneCombineReq.Parser, new[]{ "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FuneCombineResp), global::FuneCombineResp.Parser, new[]{ "Srl", "Result", "GetFune", "Parrey" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FuneMoveReq), global::FuneMoveReq.Parser, new[]{ "Srl", "OldGrid", "NewGrid" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///法阵信息
/// </summary>
public sealed partial class ArreyInfoResp : pb::IMessage<ArreyInfoResp> {
  private static readonly pb::MessageParser<ArreyInfoResp> _parser = new pb::MessageParser<ArreyInfoResp>(() => new ArreyInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ArreyInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ArreyInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ArreyInfoResp(ArreyInfoResp other) : this() {
    Parrey = other.parrey_ != null ? other.Parrey.Clone() : null;
    Pfune = other.pfune_ != null ? other.Pfune.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ArreyInfoResp Clone() {
    return new ArreyInfoResp(this);
  }

  /// <summary>Field number for the "parrey" field.</summary>
  public const int ParreyFieldNumber = 1;
  private global::PArreyPb parrey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PArreyPb Parrey {
    get { return parrey_; }
    set {
      parrey_ = value;
    }
  }

  /// <summary>Field number for the "pfune" field.</summary>
  public const int PfuneFieldNumber = 2;
  private global::PFunePb pfune_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PFunePb Pfune {
    get { return pfune_; }
    set {
      pfune_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ArreyInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ArreyInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Parrey, other.Parrey)) return false;
    if (!object.Equals(Pfune, other.Pfune)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (parrey_ != null) hash ^= Parrey.GetHashCode();
    if (pfune_ != null) hash ^= Pfune.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (parrey_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Parrey);
    }
    if (pfune_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Pfune);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (parrey_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parrey);
    }
    if (pfune_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pfune);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ArreyInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.parrey_ != null) {
      if (parrey_ == null) {
        parrey_ = new global::PArreyPb();
      }
      Parrey.MergeFrom(other.Parrey);
    }
    if (other.pfune_ != null) {
      if (pfune_ == null) {
        pfune_ = new global::PFunePb();
      }
      Pfune.MergeFrom(other.Pfune);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (parrey_ == null) {
            parrey_ = new global::PArreyPb();
          }
          input.ReadMessage(parrey_);
          break;
        }
        case 18: {
          if (pfune_ == null) {
            pfune_ = new global::PFunePb();
          }
          input.ReadMessage(pfune_);
          break;
        }
      }
    }
  }

}

/// <summary>
///购买法阵
/// </summary>
public sealed partial class BuyArreyReq : pb::IMessage<BuyArreyReq> {
  private static readonly pb::MessageParser<BuyArreyReq> _parser = new pb::MessageParser<BuyArreyReq>(() => new BuyArreyReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyArreyReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyArreyReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyArreyReq(BuyArreyReq other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyArreyReq Clone() {
    return new BuyArreyReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///法阵id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyArreyReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyArreyReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyArreyReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class BuyArreyResp : pb::IMessage<BuyArreyResp> {
  private static readonly pb::MessageParser<BuyArreyResp> _parser = new pb::MessageParser<BuyArreyResp>(() => new BuyArreyResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyArreyResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyArreyResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyArreyResp(BuyArreyResp other) : this() {
    id_ = other.id_;
    Item = other.item_ != null ? other.Item.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyArreyResp Clone() {
    return new BuyArreyResp(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///法阵id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "item" field.</summary>
  public const int ItemFieldNumber = 2;
  private global::ItemPb item_;
  /// <summary>
  ///当前道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ItemPb Item {
    get { return item_; }
    set {
      item_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyArreyResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyArreyResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!object.Equals(Item, other.Item)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (item_ != null) hash ^= Item.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (item_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Item);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (item_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyArreyResp other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.item_ != null) {
      if (item_ == null) {
        item_ = new global::ItemPb();
      }
      Item.MergeFrom(other.Item);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          if (item_ == null) {
            item_ = new global::ItemPb();
          }
          input.ReadMessage(item_);
          break;
        }
      }
    }
  }

}

/// <summary>
///更换法阵
/// </summary>
public sealed partial class ChangeArreyReq : pb::IMessage<ChangeArreyReq> {
  private static readonly pb::MessageParser<ChangeArreyReq> _parser = new pb::MessageParser<ChangeArreyReq>(() => new ChangeArreyReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChangeArreyReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeArreyReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeArreyReq(ChangeArreyReq other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeArreyReq Clone() {
    return new ChangeArreyReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///目标法阵id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChangeArreyReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChangeArreyReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChangeArreyReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ChangeArreyResp : pb::IMessage<ChangeArreyResp> {
  private static readonly pb::MessageParser<ChangeArreyResp> _parser = new pb::MessageParser<ChangeArreyResp>(() => new ChangeArreyResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChangeArreyResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeArreyResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeArreyResp(ChangeArreyResp other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChangeArreyResp Clone() {
    return new ChangeArreyResp(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///目标法阵id, 法阵属性清空，法阵加成清空，玩家所有符文全部下阵(bindArrey=0)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChangeArreyResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChangeArreyResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChangeArreyResp other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///上阵符文
/// </summary>
public sealed partial class PutFuneReq : pb::IMessage<PutFuneReq> {
  private static readonly pb::MessageParser<PutFuneReq> _parser = new pb::MessageParser<PutFuneReq>(() => new PutFuneReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PutFuneReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PutFuneReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PutFuneReq(PutFuneReq other) : this() {
    srl_ = other.srl_;
    grid_ = other.grid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PutFuneReq Clone() {
    return new PutFuneReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  /// <summary>
  ///符文序号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "grid" field.</summary>
  public const int GridFieldNumber = 2;
  private int grid_;
  /// <summary>
  ///法阵格子，符文最顶点的那个格子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Grid {
    get { return grid_; }
    set {
      grid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PutFuneReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PutFuneReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    if (Grid != other.Grid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    if (Grid != 0) hash ^= Grid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
    if (Grid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Grid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    if (Grid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PutFuneReq other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    if (other.Grid != 0) {
      Grid = other.Grid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
        case 16: {
          Grid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PutFuneResp : pb::IMessage<PutFuneResp> {
  private static readonly pb::MessageParser<PutFuneResp> _parser = new pb::MessageParser<PutFuneResp>(() => new PutFuneResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PutFuneResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PutFuneResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PutFuneResp(PutFuneResp other) : this() {
    Arrey = other.arrey_ != null ? other.Arrey.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PutFuneResp Clone() {
    return new PutFuneResp(this);
  }

  /// <summary>Field number for the "arrey" field.</summary>
  public const int ArreyFieldNumber = 1;
  private global::ArreyPb arrey_;
  /// <summary>
  ///法阵
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ArreyPb Arrey {
    get { return arrey_; }
    set {
      arrey_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PutFuneResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PutFuneResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Arrey, other.Arrey)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (arrey_ != null) hash ^= Arrey.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (arrey_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Arrey);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (arrey_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arrey);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PutFuneResp other) {
    if (other == null) {
      return;
    }
    if (other.arrey_ != null) {
      if (arrey_ == null) {
        arrey_ = new global::ArreyPb();
      }
      Arrey.MergeFrom(other.Arrey);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (arrey_ == null) {
            arrey_ = new global::ArreyPb();
          }
          input.ReadMessage(arrey_);
          break;
        }
      }
    }
  }

}

/// <summary>
///下阵符文
/// </summary>
public sealed partial class DownFuneReq : pb::IMessage<DownFuneReq> {
  private static readonly pb::MessageParser<DownFuneReq> _parser = new pb::MessageParser<DownFuneReq>(() => new DownFuneReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DownFuneReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DownFuneReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DownFuneReq(DownFuneReq other) : this() {
    grid_ = other.grid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DownFuneReq Clone() {
    return new DownFuneReq(this);
  }

  /// <summary>Field number for the "grid" field.</summary>
  public const int GridFieldNumber = 1;
  private int grid_;
  /// <summary>
  ///法阵格子，符文最顶点的那个格子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Grid {
    get { return grid_; }
    set {
      grid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DownFuneReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DownFuneReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Grid != other.Grid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Grid != 0) hash ^= Grid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Grid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Grid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Grid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DownFuneReq other) {
    if (other == null) {
      return;
    }
    if (other.Grid != 0) {
      Grid = other.Grid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Grid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DownFuneResp : pb::IMessage<DownFuneResp> {
  private static readonly pb::MessageParser<DownFuneResp> _parser = new pb::MessageParser<DownFuneResp>(() => new DownFuneResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DownFuneResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DownFuneResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DownFuneResp(DownFuneResp other) : this() {
    Arrey = other.arrey_ != null ? other.Arrey.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DownFuneResp Clone() {
    return new DownFuneResp(this);
  }

  /// <summary>Field number for the "arrey" field.</summary>
  public const int ArreyFieldNumber = 1;
  private global::ArreyPb arrey_;
  /// <summary>
  ///法阵
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ArreyPb Arrey {
    get { return arrey_; }
    set {
      arrey_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DownFuneResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DownFuneResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Arrey, other.Arrey)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (arrey_ != null) hash ^= Arrey.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (arrey_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Arrey);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (arrey_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arrey);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DownFuneResp other) {
    if (other == null) {
      return;
    }
    if (other.arrey_ != null) {
      if (arrey_ == null) {
        arrey_ = new global::ArreyPb();
      }
      Arrey.MergeFrom(other.Arrey);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (arrey_ == null) {
            arrey_ = new global::ArreyPb();
          }
          input.ReadMessage(arrey_);
          break;
        }
      }
    }
  }

}

/// <summary>
///购买符文
/// </summary>
public sealed partial class BuyFuneReq : pb::IMessage<BuyFuneReq> {
  private static readonly pb::MessageParser<BuyFuneReq> _parser = new pb::MessageParser<BuyFuneReq>(() => new BuyFuneReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyFuneReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyFuneReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyFuneReq(BuyFuneReq other) : this() {
    goodid_ = other.goodid_;
    num_ = other.num_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyFuneReq Clone() {
    return new BuyFuneReq(this);
  }

  /// <summary>Field number for the "goodid" field.</summary>
  public const int GoodidFieldNumber = 1;
  private int goodid_;
  /// <summary>
  ///商品id  符文商店配置表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Goodid {
    get { return goodid_; }
    set {
      goodid_ = value;
    }
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 2;
  private int num_;
  /// <summary>
  ///数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyFuneReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyFuneReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Goodid != other.Goodid) return false;
    if (Num != other.Num) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Goodid != 0) hash ^= Goodid.GetHashCode();
    if (Num != 0) hash ^= Num.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Goodid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Goodid);
    }
    if (Num != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Num);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Goodid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goodid);
    }
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyFuneReq other) {
    if (other == null) {
      return;
    }
    if (other.Goodid != 0) {
      Goodid = other.Goodid;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Goodid = input.ReadInt32();
          break;
        }
        case 16: {
          Num = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class BuyFuneResp : pb::IMessage<BuyFuneResp> {
  private static readonly pb::MessageParser<BuyFuneResp> _parser = new pb::MessageParser<BuyFuneResp>(() => new BuyFuneResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuyFuneResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyFuneResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyFuneResp(BuyFuneResp other) : this() {
    Item = other.item_ != null ? other.Item.Clone() : null;
    fune_ = other.fune_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuyFuneResp Clone() {
    return new BuyFuneResp(this);
  }

  /// <summary>Field number for the "item" field.</summary>
  public const int ItemFieldNumber = 1;
  private global::ItemPb item_;
  /// <summary>
  ///当前道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ItemPb Item {
    get { return item_; }
    set {
      item_ = value;
    }
  }

  /// <summary>Field number for the "fune" field.</summary>
  public const int FuneFieldNumber = 2;
  private static readonly pb::FieldCodec<global::FunePb> _repeated_fune_codec
      = pb::FieldCodec.ForMessage(18, global::FunePb.Parser);
  private readonly pbc::RepeatedField<global::FunePb> fune_ = new pbc::RepeatedField<global::FunePb>();
  /// <summary>
  ///获得的符文
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FunePb> Fune {
    get { return fune_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuyFuneResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuyFuneResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Item, other.Item)) return false;
    if(!fune_.Equals(other.fune_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (item_ != null) hash ^= Item.GetHashCode();
    hash ^= fune_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (item_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Item);
    }
    fune_.WriteTo(output, _repeated_fune_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (item_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
    }
    size += fune_.CalculateSize(_repeated_fune_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuyFuneResp other) {
    if (other == null) {
      return;
    }
    if (other.item_ != null) {
      if (item_ == null) {
        item_ = new global::ItemPb();
      }
      Item.MergeFrom(other.Item);
    }
    fune_.Add(other.fune_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (item_ == null) {
            item_ = new global::ItemPb();
          }
          input.ReadMessage(item_);
          break;
        }
        case 18: {
          fune_.AddEntriesFrom(input, _repeated_fune_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///符文一键合成 --req nil
/// </summary>
public sealed partial class FuneOneKeyCombineResp : pb::IMessage<FuneOneKeyCombineResp> {
  private static readonly pb::MessageParser<FuneOneKeyCombineResp> _parser = new pb::MessageParser<FuneOneKeyCombineResp>(() => new FuneOneKeyCombineResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FuneOneKeyCombineResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FuneOneKeyCombineResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FuneOneKeyCombineResp(FuneOneKeyCombineResp other) : this() {
    getFune_ = other.getFune_.Clone();
    allFune_ = other.allFune_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FuneOneKeyCombineResp Clone() {
    return new FuneOneKeyCombineResp(this);
  }

  /// <summary>Field number for the "getFune" field.</summary>
  public const int GetFuneFieldNumber = 1;
  private static readonly pb::FieldCodec<global::FunePb> _repeated_getFune_codec
      = pb::FieldCodec.ForMessage(10, global::FunePb.Parser);
  private readonly pbc::RepeatedField<global::FunePb> getFune_ = new pbc::RepeatedField<global::FunePb>();
  /// <summary>
  ///合成获得的符文
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FunePb> GetFune {
    get { return getFune_; }
  }

  /// <summary>Field number for the "allFune" field.</summary>
  public const int AllFuneFieldNumber = 2;
  private static readonly pb::FieldCodec<global::FunePb> _repeated_allFune_codec
      = pb::FieldCodec.ForMessage(18, global::FunePb.Parser);
  private readonly pbc::RepeatedField<global::FunePb> allFune_ = new pbc::RepeatedField<global::FunePb>();
  /// <summary>
  ///所有的符文数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FunePb> AllFune {
    get { return allFune_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FuneOneKeyCombineResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FuneOneKeyCombineResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!getFune_.Equals(other.getFune_)) return false;
    if(!allFune_.Equals(other.allFune_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= getFune_.GetHashCode();
    hash ^= allFune_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    getFune_.WriteTo(output, _repeated_getFune_codec);
    allFune_.WriteTo(output, _repeated_allFune_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += getFune_.CalculateSize(_repeated_getFune_codec);
    size += allFune_.CalculateSize(_repeated_allFune_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FuneOneKeyCombineResp other) {
    if (other == null) {
      return;
    }
    getFune_.Add(other.getFune_);
    allFune_.Add(other.allFune_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          getFune_.AddEntriesFrom(input, _repeated_getFune_codec);
          break;
        }
        case 18: {
          allFune_.AddEntriesFrom(input, _repeated_allFune_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///符文合成 
/// </summary>
public sealed partial class FuneCombineReq : pb::IMessage<FuneCombineReq> {
  private static readonly pb::MessageParser<FuneCombineReq> _parser = new pb::MessageParser<FuneCombineReq>(() => new FuneCombineReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FuneCombineReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FuneCombineReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FuneCombineReq(FuneCombineReq other) : this() {
    srl_ = other.srl_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FuneCombineReq Clone() {
    return new FuneCombineReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_srl_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> srl_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Srl {
    get { return srl_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FuneCombineReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FuneCombineReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!srl_.Equals(other.srl_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= srl_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    srl_.WriteTo(output, _repeated_srl_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += srl_.CalculateSize(_repeated_srl_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FuneCombineReq other) {
    if (other == null) {
      return;
    }
    srl_.Add(other.srl_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          srl_.AddEntriesFrom(input, _repeated_srl_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class FuneCombineResp : pb::IMessage<FuneCombineResp> {
  private static readonly pb::MessageParser<FuneCombineResp> _parser = new pb::MessageParser<FuneCombineResp>(() => new FuneCombineResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FuneCombineResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FuneCombineResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FuneCombineResp(FuneCombineResp other) : this() {
    srl_ = other.srl_.Clone();
    result_ = other.result_;
    GetFune = other.getFune_ != null ? other.GetFune.Clone() : null;
    Parrey = other.parrey_ != null ? other.Parrey.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FuneCombineResp Clone() {
    return new FuneCombineResp(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_srl_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> srl_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Srl {
    get { return srl_; }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  ///0-失败 1-成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "getFune" field.</summary>
  public const int GetFuneFieldNumber = 3;
  private global::FunePb getFune_;
  /// <summary>
  ///合成成功获得的符文,失败不返回
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FunePb GetFune {
    get { return getFune_; }
    set {
      getFune_ = value;
    }
  }

  /// <summary>Field number for the "parrey" field.</summary>
  public const int ParreyFieldNumber = 4;
  private global::PArreyPb parrey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PArreyPb Parrey {
    get { return parrey_; }
    set {
      parrey_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FuneCombineResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FuneCombineResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!srl_.Equals(other.srl_)) return false;
    if (Result != other.Result) return false;
    if (!object.Equals(GetFune, other.GetFune)) return false;
    if (!object.Equals(Parrey, other.Parrey)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= srl_.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (getFune_ != null) hash ^= GetFune.GetHashCode();
    if (parrey_ != null) hash ^= Parrey.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    srl_.WriteTo(output, _repeated_srl_codec);
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (getFune_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(GetFune);
    }
    if (parrey_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Parrey);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += srl_.CalculateSize(_repeated_srl_codec);
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (getFune_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetFune);
    }
    if (parrey_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parrey);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FuneCombineResp other) {
    if (other == null) {
      return;
    }
    srl_.Add(other.srl_);
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.getFune_ != null) {
      if (getFune_ == null) {
        getFune_ = new global::FunePb();
      }
      GetFune.MergeFrom(other.GetFune);
    }
    if (other.parrey_ != null) {
      if (parrey_ == null) {
        parrey_ = new global::PArreyPb();
      }
      Parrey.MergeFrom(other.Parrey);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          srl_.AddEntriesFrom(input, _repeated_srl_codec);
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 26: {
          if (getFune_ == null) {
            getFune_ = new global::FunePb();
          }
          input.ReadMessage(getFune_);
          break;
        }
        case 34: {
          if (parrey_ == null) {
            parrey_ = new global::PArreyPb();
          }
          input.ReadMessage(parrey_);
          break;
        }
      }
    }
  }

}

/// <summary>
///符文移动 --resp nil
/// </summary>
public sealed partial class FuneMoveReq : pb::IMessage<FuneMoveReq> {
  private static readonly pb::MessageParser<FuneMoveReq> _parser = new pb::MessageParser<FuneMoveReq>(() => new FuneMoveReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FuneMoveReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MagicReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FuneMoveReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FuneMoveReq(FuneMoveReq other) : this() {
    srl_ = other.srl_;
    oldGrid_ = other.oldGrid_;
    newGrid_ = other.newGrid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FuneMoveReq Clone() {
    return new FuneMoveReq(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "oldGrid" field.</summary>
  public const int OldGridFieldNumber = 2;
  private int oldGrid_;
  /// <summary>
  ///旧位置
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OldGrid {
    get { return oldGrid_; }
    set {
      oldGrid_ = value;
    }
  }

  /// <summary>Field number for the "newGrid" field.</summary>
  public const int NewGridFieldNumber = 3;
  private int newGrid_;
  /// <summary>
  ///新位置
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NewGrid {
    get { return newGrid_; }
    set {
      newGrid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FuneMoveReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FuneMoveReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    if (OldGrid != other.OldGrid) return false;
    if (NewGrid != other.NewGrid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    if (OldGrid != 0) hash ^= OldGrid.GetHashCode();
    if (NewGrid != 0) hash ^= NewGrid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
    if (OldGrid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OldGrid);
    }
    if (NewGrid != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NewGrid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    if (OldGrid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldGrid);
    }
    if (NewGrid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewGrid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FuneMoveReq other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    if (other.OldGrid != 0) {
      OldGrid = other.OldGrid;
    }
    if (other.NewGrid != 0) {
      NewGrid = other.NewGrid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
        case 16: {
          OldGrid = input.ReadInt32();
          break;
        }
        case 24: {
          NewGrid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
