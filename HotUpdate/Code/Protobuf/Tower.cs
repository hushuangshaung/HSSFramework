// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tower.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from tower.proto</summary>
public static partial class TowerReflection {

  #region Descriptor
  /// <summary>File descriptor for tower.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TowerReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgt0b3dlci5wcm90bxoKYmVhbi5wcm90byIOCgxUb3dlckluZm9SZXAiKAoN",
          "VG93ZXJJbmZvUmVzcBIXCgV0b3dlchgBIAEoCzIILlRvd2VyUGIiIQoTVG93",
          "ZXJCYXR0bGVTdGFydFJlcRIKCgJpZBgBIAEoBSIwChRUb3dlckJhdHRsZVN0",
          "YXJ0UmVzcBIKCgJpZBgBIAEoBRIMCgRzZWVkGAIgASgFIj0KEVRvd2VyQmF0",
          "dGxlRW5kUmVxEgoKAmlkGAEgASgFEgwKBHNlZWQYAiABKAUSDgoGcmVzdWx0",
          "GAMgASgFIpsBChJUb3dlckJhdHRsZUVuZFJlc3ASNwoKY2hhbmdlSXRlbRgB",
          "IAMoCzIjLlRvd2VyQmF0dGxlRW5kUmVzcC5DaGFuZ2VJdGVtRW50cnkSCgoC",
          "aWQYAiABKAUSDQoFbWF4SWQYAyABKAUaMQoPQ2hhbmdlSXRlbUVudHJ5EgsK",
          "A2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiIQoSVG93ZXJSYW5kb21C",
          "dWZmUmVxEgsKA3BvdBgBIAEoBSI4ChNUb3dlclJhbmRvbUJ1ZmZSZXNwEgoK",
          "AmlkGAEgAygFEhUKDXJhbmRvbUJ1ZmZNYXgYAiABKAUiLAoRVG93ZXJDaG9z",
          "ZUJ1ZmZSZXESCgoCaWQYASABKAUSCwoDcG9zGAIgASgFIj0KElRvd2VyQ2hv",
          "c2VCdWZmUmVzcBIaCgRidWZmGAEgASgLMgwuVG93ZXJCdWZmUGISCwoDcG9z",
          "GAIgASgFIhMKEVRvd2VyUXVpY2tQYXNzUmVxIrEBChdSZW1vdlRvd2VyUXVp",
          "Y2tQYXNzUmVzcBIKCgJpZBgBIAEoBRIZChFxdWlja1Bhc3NSZXdhcmRJZBgC",
          "IAEoBRI8CgpjaGFuZ2VJdGVtGAMgAygLMiguUmVtb3ZUb3dlclF1aWNrUGFz",
          "c1Jlc3AuQ2hhbmdlSXRlbUVudHJ5GjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNr",
          "ZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBQhUKCmNvbS5jYi5tc2dCB1BC",
          "VG93ZXJiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerInfoRep), global::TowerInfoRep.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerInfoResp), global::TowerInfoResp.Parser, new[]{ "Tower" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerBattleStartReq), global::TowerBattleStartReq.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerBattleStartResp), global::TowerBattleStartResp.Parser, new[]{ "Id", "Seed" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerBattleEndReq), global::TowerBattleEndReq.Parser, new[]{ "Id", "Seed", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerBattleEndResp), global::TowerBattleEndResp.Parser, new[]{ "ChangeItem", "Id", "MaxId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerRandomBuffReq), global::TowerRandomBuffReq.Parser, new[]{ "Pot" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerRandomBuffResp), global::TowerRandomBuffResp.Parser, new[]{ "Id", "RandomBuffMax" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerChoseBuffReq), global::TowerChoseBuffReq.Parser, new[]{ "Id", "Pos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerChoseBuffResp), global::TowerChoseBuffResp.Parser, new[]{ "Buff", "Pos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerQuickPassReq), global::TowerQuickPassReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RemovTowerQuickPassResp), global::RemovTowerQuickPassResp.Parser, new[]{ "Id", "QuickPassRewardId", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///塔信息 
/// </summary>
public sealed partial class TowerInfoRep : pb::IMessage<TowerInfoRep> {
  private static readonly pb::MessageParser<TowerInfoRep> _parser = new pb::MessageParser<TowerInfoRep>(() => new TowerInfoRep());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerInfoRep> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TowerReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerInfoRep() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerInfoRep(TowerInfoRep other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerInfoRep Clone() {
    return new TowerInfoRep(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerInfoRep);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerInfoRep other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerInfoRep other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class TowerInfoResp : pb::IMessage<TowerInfoResp> {
  private static readonly pb::MessageParser<TowerInfoResp> _parser = new pb::MessageParser<TowerInfoResp>(() => new TowerInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TowerReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerInfoResp(TowerInfoResp other) : this() {
    Tower = other.tower_ != null ? other.Tower.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerInfoResp Clone() {
    return new TowerInfoResp(this);
  }

  /// <summary>Field number for the "tower" field.</summary>
  public const int TowerFieldNumber = 1;
  private global::TowerPb tower_;
  /// <summary>
  ///塔信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TowerPb Tower {
    get { return tower_; }
    set {
      tower_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Tower, other.Tower)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (tower_ != null) hash ^= Tower.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (tower_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Tower);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (tower_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tower);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.tower_ != null) {
      if (tower_ == null) {
        tower_ = new global::TowerPb();
      }
      Tower.MergeFrom(other.Tower);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (tower_ == null) {
            tower_ = new global::TowerPb();
          }
          input.ReadMessage(tower_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 战斗开始
/// </summary>
public sealed partial class TowerBattleStartReq : pb::IMessage<TowerBattleStartReq> {
  private static readonly pb::MessageParser<TowerBattleStartReq> _parser = new pb::MessageParser<TowerBattleStartReq>(() => new TowerBattleStartReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerBattleStartReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TowerReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBattleStartReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBattleStartReq(TowerBattleStartReq other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBattleStartReq Clone() {
    return new TowerBattleStartReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerBattleStartReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerBattleStartReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerBattleStartReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TowerBattleStartResp : pb::IMessage<TowerBattleStartResp> {
  private static readonly pb::MessageParser<TowerBattleStartResp> _parser = new pb::MessageParser<TowerBattleStartResp>(() => new TowerBattleStartResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerBattleStartResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TowerReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBattleStartResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBattleStartResp(TowerBattleStartResp other) : this() {
    id_ = other.id_;
    seed_ = other.seed_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBattleStartResp Clone() {
    return new TowerBattleStartResp(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 2;
  private int seed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerBattleStartResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerBattleStartResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Seed != other.Seed) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Seed != 0) hash ^= Seed.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Seed != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Seed);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerBattleStartResp other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Seed = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 战斗结束
/// </summary>
public sealed partial class TowerBattleEndReq : pb::IMessage<TowerBattleEndReq> {
  private static readonly pb::MessageParser<TowerBattleEndReq> _parser = new pb::MessageParser<TowerBattleEndReq>(() => new TowerBattleEndReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerBattleEndReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TowerReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBattleEndReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBattleEndReq(TowerBattleEndReq other) : this() {
    id_ = other.id_;
    seed_ = other.seed_;
    result_ = other.result_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBattleEndReq Clone() {
    return new TowerBattleEndReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 2;
  private int seed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 3;
  private int result_;
  /// <summary>
  /// 0失败； 1胜利
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerBattleEndReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerBattleEndReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Seed != other.Seed) return false;
    if (Result != other.Result) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Seed != 0) hash ^= Seed.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Seed != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Seed);
    }
    if (Result != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerBattleEndReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Seed = input.ReadInt32();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TowerBattleEndResp : pb::IMessage<TowerBattleEndResp> {
  private static readonly pb::MessageParser<TowerBattleEndResp> _parser = new pb::MessageParser<TowerBattleEndResp>(() => new TowerBattleEndResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerBattleEndResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TowerReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBattleEndResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBattleEndResp(TowerBattleEndResp other) : this() {
    changeItem_ = other.changeItem_.Clone();
    id_ = other.id_;
    maxId_ = other.maxId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBattleEndResp Clone() {
    return new TowerBattleEndResp(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private int id_;
  /// <summary>
  /// Id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "maxId" field.</summary>
  public const int MaxIdFieldNumber = 3;
  private int maxId_;
  /// <summary>
  /// 最大bossId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxId {
    get { return maxId_; }
    set {
      maxId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerBattleEndResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerBattleEndResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (Id != other.Id) return false;
    if (MaxId != other.MaxId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    if (Id != 0) hash ^= Id.GetHashCode();
    if (MaxId != 0) hash ^= MaxId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (Id != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Id);
    }
    if (MaxId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(MaxId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (MaxId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerBattleEndResp other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.MaxId != 0) {
      MaxId = other.MaxId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 16: {
          Id = input.ReadInt32();
          break;
        }
        case 24: {
          MaxId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 随机buff
/// </summary>
public sealed partial class TowerRandomBuffReq : pb::IMessage<TowerRandomBuffReq> {
  private static readonly pb::MessageParser<TowerRandomBuffReq> _parser = new pb::MessageParser<TowerRandomBuffReq>(() => new TowerRandomBuffReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerRandomBuffReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TowerReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerRandomBuffReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerRandomBuffReq(TowerRandomBuffReq other) : this() {
    pot_ = other.pot_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerRandomBuffReq Clone() {
    return new TowerRandomBuffReq(this);
  }

  /// <summary>Field number for the "pot" field.</summary>
  public const int PotFieldNumber = 1;
  private int pot_;
  /// <summary>
  ///1随机2取消；
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pot {
    get { return pot_; }
    set {
      pot_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerRandomBuffReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerRandomBuffReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pot != other.Pot) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pot != 0) hash ^= Pot.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pot != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pot);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pot);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerRandomBuffReq other) {
    if (other == null) {
      return;
    }
    if (other.Pot != 0) {
      Pot = other.Pot;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pot = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TowerRandomBuffResp : pb::IMessage<TowerRandomBuffResp> {
  private static readonly pb::MessageParser<TowerRandomBuffResp> _parser = new pb::MessageParser<TowerRandomBuffResp>(() => new TowerRandomBuffResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerRandomBuffResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TowerReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerRandomBuffResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerRandomBuffResp(TowerRandomBuffResp other) : this() {
    id_ = other.id_.Clone();
    randomBuffMax_ = other.randomBuffMax_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerRandomBuffResp Clone() {
    return new TowerRandomBuffResp(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_id_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> id_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// buffId, 3个
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Id {
    get { return id_; }
  }

  /// <summary>Field number for the "randomBuffMax" field.</summary>
  public const int RandomBuffMaxFieldNumber = 2;
  private int randomBuffMax_;
  /// <summary>
  /// 随机技能最大次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RandomBuffMax {
    get { return randomBuffMax_; }
    set {
      randomBuffMax_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerRandomBuffResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerRandomBuffResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!id_.Equals(other.id_)) return false;
    if (RandomBuffMax != other.RandomBuffMax) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= id_.GetHashCode();
    if (RandomBuffMax != 0) hash ^= RandomBuffMax.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    id_.WriteTo(output, _repeated_id_codec);
    if (RandomBuffMax != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RandomBuffMax);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += id_.CalculateSize(_repeated_id_codec);
    if (RandomBuffMax != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomBuffMax);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerRandomBuffResp other) {
    if (other == null) {
      return;
    }
    id_.Add(other.id_);
    if (other.RandomBuffMax != 0) {
      RandomBuffMax = other.RandomBuffMax;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          id_.AddEntriesFrom(input, _repeated_id_codec);
          break;
        }
        case 16: {
          RandomBuffMax = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 选择buff
/// </summary>
public sealed partial class TowerChoseBuffReq : pb::IMessage<TowerChoseBuffReq> {
  private static readonly pb::MessageParser<TowerChoseBuffReq> _parser = new pb::MessageParser<TowerChoseBuffReq>(() => new TowerChoseBuffReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerChoseBuffReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TowerReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerChoseBuffReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerChoseBuffReq(TowerChoseBuffReq other) : this() {
    id_ = other.id_;
    pos_ = other.pos_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerChoseBuffReq Clone() {
    return new TowerChoseBuffReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 2;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerChoseBuffReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerChoseBuffReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Pos != other.Pos) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Pos != 0) hash ^= Pos.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Pos != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Pos);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerChoseBuffReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Pos = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TowerChoseBuffResp : pb::IMessage<TowerChoseBuffResp> {
  private static readonly pb::MessageParser<TowerChoseBuffResp> _parser = new pb::MessageParser<TowerChoseBuffResp>(() => new TowerChoseBuffResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerChoseBuffResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TowerReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerChoseBuffResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerChoseBuffResp(TowerChoseBuffResp other) : this() {
    Buff = other.buff_ != null ? other.Buff.Clone() : null;
    pos_ = other.pos_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerChoseBuffResp Clone() {
    return new TowerChoseBuffResp(this);
  }

  /// <summary>Field number for the "buff" field.</summary>
  public const int BuffFieldNumber = 1;
  private global::TowerBuffPb buff_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TowerBuffPb Buff {
    get { return buff_; }
    set {
      buff_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 2;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerChoseBuffResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerChoseBuffResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Buff, other.Buff)) return false;
    if (Pos != other.Pos) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (buff_ != null) hash ^= Buff.GetHashCode();
    if (Pos != 0) hash ^= Pos.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (buff_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Buff);
    }
    if (Pos != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Pos);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (buff_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buff);
    }
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerChoseBuffResp other) {
    if (other == null) {
      return;
    }
    if (other.buff_ != null) {
      if (buff_ == null) {
        buff_ = new global::TowerBuffPb();
      }
      Buff.MergeFrom(other.Buff);
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (buff_ == null) {
            buff_ = new global::TowerBuffPb();
          }
          input.ReadMessage(buff_);
          break;
        }
        case 16: {
          Pos = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 速通
/// </summary>
public sealed partial class TowerQuickPassReq : pb::IMessage<TowerQuickPassReq> {
  private static readonly pb::MessageParser<TowerQuickPassReq> _parser = new pb::MessageParser<TowerQuickPassReq>(() => new TowerQuickPassReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerQuickPassReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TowerReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerQuickPassReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerQuickPassReq(TowerQuickPassReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerQuickPassReq Clone() {
    return new TowerQuickPassReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerQuickPassReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerQuickPassReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerQuickPassReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class RemovTowerQuickPassResp : pb::IMessage<RemovTowerQuickPassResp> {
  private static readonly pb::MessageParser<RemovTowerQuickPassResp> _parser = new pb::MessageParser<RemovTowerQuickPassResp>(() => new RemovTowerQuickPassResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RemovTowerQuickPassResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TowerReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemovTowerQuickPassResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemovTowerQuickPassResp(RemovTowerQuickPassResp other) : this() {
    id_ = other.id_;
    quickPassRewardId_ = other.quickPassRewardId_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemovTowerQuickPassResp Clone() {
    return new RemovTowerQuickPassResp(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  /// 速通节点（bossId）id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "quickPassRewardId" field.</summary>
  public const int QuickPassRewardIdFieldNumber = 2;
  private int quickPassRewardId_;
  /// <summary>
  /// 速通奖励id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QuickPassRewardId {
    get { return quickPassRewardId_; }
    set {
      quickPassRewardId_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RemovTowerQuickPassResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RemovTowerQuickPassResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (QuickPassRewardId != other.QuickPassRewardId) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (QuickPassRewardId != 0) hash ^= QuickPassRewardId.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (QuickPassRewardId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(QuickPassRewardId);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (QuickPassRewardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuickPassRewardId);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RemovTowerQuickPassResp other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.QuickPassRewardId != 0) {
      QuickPassRewardId = other.QuickPassRewardId;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          QuickPassRewardId = input.ReadInt32();
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
