// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: partner.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from partner.proto</summary>
public static partial class PartnerReflection {

  #region Descriptor
  /// <summary>File descriptor for partner.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PartnerReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1wYXJ0bmVyLnByb3RvGgpiZWFuLnByb3RvIhMKEUdldFBhcnRuZXJJbmZv",
          "UmVxIjcKEkdldFBhcnRuZXJJbmZvUmVzcBIhCgdwYXJ0bmVyGAEgASgLMhAu",
          "UGxheWVyUGFydG5lclBiIjEKDkRyYXdQYXJ0bmVyUmVxEg4KBmlzRnJlZRgB",
          "IAEoBRIPCgdkcmF3TnVtGAIgASgFIpkDCg9EcmF3UGFydG5lclJlc3ASMAoI",
          "cGFydG5lcnMYASADKAsyHi5EcmF3UGFydG5lclJlc3AuUGFydG5lcnNFbnRy",
          "eRI4CgxwYXJ0bmVyQ2hpcHMYAiADKAsyIi5EcmF3UGFydG5lclJlc3AuUGFy",
          "dG5lckNoaXBzRW50cnkSFAoMZHJhd1RvdGFsTnVtGAQgASgFEhQKDGZyZWVE",
          "cmF3VGltZRgFIAEoAxI0CgpjaGFuZ2VJdGVtGAYgAygLMiAuRHJhd1BhcnRu",
          "ZXJSZXNwLkNoYW5nZUl0ZW1FbnRyeRITCgtpbnRlZ3JhbE51bRgHIAEoBRo7",
          "Cg1QYXJ0bmVyc0VudHJ5EgsKA2tleRgBIAEoBRIZCgV2YWx1ZRgCIAEoCzIK",
          "LlBhcnRuZXJQYjoCOAEaMwoRUGFydG5lckNoaXBzRW50cnkSCwoDa2V5GAEg",
          "ASgFEg0KBXZhbHVlGAIgASgFOgI4ARoxCg9DaGFuZ2VJdGVtRW50cnkSCwoD",
          "a2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIlChFQYXJ0bmVyTGV2ZWxV",
          "cFJlcRIQCghjb25maWdJZBgBIAEoBSKgAgoSUGFydG5lckxldmVsVXBSZXNw",
          "EhsKB3BhcnRuZXIYASABKAsyCi5QYXJ0bmVyUGISLQoFY2hpcHMYAiADKAsy",
          "Hi5QYXJ0bmVyTGV2ZWxVcFJlc3AuQ2hpcHNFbnRyeRISCgp0b0ludGVncmFs",
          "GAMgASgFEjcKCmNoYW5nZUl0ZW0YBCADKAsyIy5QYXJ0bmVyTGV2ZWxVcFJl",
          "c3AuQ2hhbmdlSXRlbUVudHJ5EhAKCGRlbENoaXBzGAUgASgFGiwKCkNoaXBz",
          "RW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARoxCg9DaGFu",
          "Z2VJdGVtRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASI4",
          "ChVQYXJ0bmVyVHJhbW1lbHNPcHRSZXESDQoFb3B0SWQYASABKAUSEAoIY29u",
          "ZmlnSWQYAiABKAUiVAoWUGFydG5lclRyYW1tZWxzT3B0UmVzcBINCgVvcHRJ",
          "ZBgBIAEoBRIrCg9wYXJ0bmVyVHJhbW1lbHMYAiABKAsyEi5QYXJ0bmVyVHJh",
          "bW1lbHNQYiI9Cg9QYXJ0bmVyT25Qb3NSZXESCwoDcG9zGAEgASgFEhAKCGNv",
          "bmZpZ0lkGAIgASgFEgsKA29wdBgDIAEoBSI2ChBQYXJ0bmVyT25Qb3NSZXNw",
          "EiIKB3Bvc0xpc3QYASADKAsyES5QYXJ0bmVyUG9zSW5mb1BiIjkKFFBhcnRu",
          "ZXJPblBvc0JhdGNoUmVxEgsKA29wdBgBIAEoBRIUCgxjb25maWdJZExpc3QY",
          "AiADKAUiOwoVUGFydG5lck9uUG9zQmF0Y2hSZXNwEiIKB3Bvc0xpc3QYASAD",
          "KAsyES5QYXJ0bmVyUG9zSW5mb1BiQhcKCmNvbS5jYi5tc2dCCVBCUGFydG5l",
          "cmIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::GetPartnerInfoReq), global::GetPartnerInfoReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetPartnerInfoResp), global::GetPartnerInfoResp.Parser, new[]{ "Partner" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DrawPartnerReq), global::DrawPartnerReq.Parser, new[]{ "IsFree", "DrawNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DrawPartnerResp), global::DrawPartnerResp.Parser, new[]{ "Partners", "PartnerChips", "DrawTotalNum", "FreeDrawTime", "ChangeItem", "IntegralNum" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PartnerLevelUpReq), global::PartnerLevelUpReq.Parser, new[]{ "ConfigId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PartnerLevelUpResp), global::PartnerLevelUpResp.Parser, new[]{ "Partner", "Chips", "ToIntegral", "ChangeItem", "DelChips" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PartnerTrammelsOptReq), global::PartnerTrammelsOptReq.Parser, new[]{ "OptId", "ConfigId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PartnerTrammelsOptResp), global::PartnerTrammelsOptResp.Parser, new[]{ "OptId", "PartnerTrammels" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PartnerOnPosReq), global::PartnerOnPosReq.Parser, new[]{ "Pos", "ConfigId", "Opt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PartnerOnPosResp), global::PartnerOnPosResp.Parser, new[]{ "PosList" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PartnerOnPosBatchReq), global::PartnerOnPosBatchReq.Parser, new[]{ "Opt", "ConfigIdList" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PartnerOnPosBatchResp), global::PartnerOnPosBatchResp.Parser, new[]{ "PosList" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// 伙伴信息
/// </summary>
public sealed partial class GetPartnerInfoReq : pb::IMessage<GetPartnerInfoReq> {
  private static readonly pb::MessageParser<GetPartnerInfoReq> _parser = new pb::MessageParser<GetPartnerInfoReq>(() => new GetPartnerInfoReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetPartnerInfoReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartnerReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPartnerInfoReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPartnerInfoReq(GetPartnerInfoReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPartnerInfoReq Clone() {
    return new GetPartnerInfoReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetPartnerInfoReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetPartnerInfoReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetPartnerInfoReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GetPartnerInfoResp : pb::IMessage<GetPartnerInfoResp> {
  private static readonly pb::MessageParser<GetPartnerInfoResp> _parser = new pb::MessageParser<GetPartnerInfoResp>(() => new GetPartnerInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetPartnerInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartnerReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPartnerInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPartnerInfoResp(GetPartnerInfoResp other) : this() {
    Partner = other.partner_ != null ? other.Partner.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPartnerInfoResp Clone() {
    return new GetPartnerInfoResp(this);
  }

  /// <summary>Field number for the "partner" field.</summary>
  public const int PartnerFieldNumber = 1;
  private global::PlayerPartnerPb partner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerPartnerPb Partner {
    get { return partner_; }
    set {
      partner_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetPartnerInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetPartnerInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Partner, other.Partner)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (partner_ != null) hash ^= Partner.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (partner_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Partner);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (partner_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Partner);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetPartnerInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.partner_ != null) {
      if (partner_ == null) {
        partner_ = new global::PlayerPartnerPb();
      }
      Partner.MergeFrom(other.Partner);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (partner_ == null) {
            partner_ = new global::PlayerPartnerPb();
          }
          input.ReadMessage(partner_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 抽伙伴
/// </summary>
public sealed partial class DrawPartnerReq : pb::IMessage<DrawPartnerReq> {
  private static readonly pb::MessageParser<DrawPartnerReq> _parser = new pb::MessageParser<DrawPartnerReq>(() => new DrawPartnerReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DrawPartnerReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartnerReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawPartnerReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawPartnerReq(DrawPartnerReq other) : this() {
    isFree_ = other.isFree_;
    drawNum_ = other.drawNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawPartnerReq Clone() {
    return new DrawPartnerReq(this);
  }

  /// <summary>Field number for the "isFree" field.</summary>
  public const int IsFreeFieldNumber = 1;
  private int isFree_;
  /// <summary>
  /// 1免费， 0使用抽奖券
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsFree {
    get { return isFree_; }
    set {
      isFree_ = value;
    }
  }

  /// <summary>Field number for the "drawNum" field.</summary>
  public const int DrawNumFieldNumber = 2;
  private int drawNum_;
  /// <summary>
  /// 抽卡数量，验证：1或者10
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DrawNum {
    get { return drawNum_; }
    set {
      drawNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DrawPartnerReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DrawPartnerReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsFree != other.IsFree) return false;
    if (DrawNum != other.DrawNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsFree != 0) hash ^= IsFree.GetHashCode();
    if (DrawNum != 0) hash ^= DrawNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsFree != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(IsFree);
    }
    if (DrawNum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DrawNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsFree != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFree);
    }
    if (DrawNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DrawPartnerReq other) {
    if (other == null) {
      return;
    }
    if (other.IsFree != 0) {
      IsFree = other.IsFree;
    }
    if (other.DrawNum != 0) {
      DrawNum = other.DrawNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          IsFree = input.ReadInt32();
          break;
        }
        case 16: {
          DrawNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DrawPartnerResp : pb::IMessage<DrawPartnerResp> {
  private static readonly pb::MessageParser<DrawPartnerResp> _parser = new pb::MessageParser<DrawPartnerResp>(() => new DrawPartnerResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DrawPartnerResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartnerReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawPartnerResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawPartnerResp(DrawPartnerResp other) : this() {
    partners_ = other.partners_.Clone();
    partnerChips_ = other.partnerChips_.Clone();
    drawTotalNum_ = other.drawTotalNum_;
    freeDrawTime_ = other.freeDrawTime_;
    changeItem_ = other.changeItem_.Clone();
    integralNum_ = other.integralNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawPartnerResp Clone() {
    return new DrawPartnerResp(this);
  }

  /// <summary>Field number for the "partners" field.</summary>
  public const int PartnersFieldNumber = 1;
  private static readonly pbc::MapField<int, global::PartnerPb>.Codec _map_partners_codec
      = new pbc::MapField<int, global::PartnerPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PartnerPb.Parser), 10);
  private readonly pbc::MapField<int, global::PartnerPb> partners_ = new pbc::MapField<int, global::PartnerPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::PartnerPb> Partners {
    get { return partners_; }
  }

  /// <summary>Field number for the "partnerChips" field.</summary>
  public const int PartnerChipsFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_partnerChips_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> partnerChips_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> PartnerChips {
    get { return partnerChips_; }
  }

  /// <summary>Field number for the "drawTotalNum" field.</summary>
  public const int DrawTotalNumFieldNumber = 4;
  private int drawTotalNum_;
  /// <summary>
  /// 抽卡次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DrawTotalNum {
    get { return drawTotalNum_; }
    set {
      drawTotalNum_ = value;
    }
  }

  /// <summary>Field number for the "freeDrawTime" field.</summary>
  public const int FreeDrawTimeFieldNumber = 5;
  private long freeDrawTime_;
  /// <summary>
  /// 使用免费抽卡时间戳，毫秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FreeDrawTime {
    get { return freeDrawTime_; }
    set {
      freeDrawTime_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 6;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 50);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具,客户端直接k,v覆盖掉道具原有的k,v
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "integralNum" field.</summary>
  public const int IntegralNumFieldNumber = 7;
  private int integralNum_;
  /// <summary>
  /// 获得的积分;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IntegralNum {
    get { return integralNum_; }
    set {
      integralNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DrawPartnerResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DrawPartnerResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Partners.Equals(other.Partners)) return false;
    if (!PartnerChips.Equals(other.PartnerChips)) return false;
    if (DrawTotalNum != other.DrawTotalNum) return false;
    if (FreeDrawTime != other.FreeDrawTime) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (IntegralNum != other.IntegralNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Partners.GetHashCode();
    hash ^= PartnerChips.GetHashCode();
    if (DrawTotalNum != 0) hash ^= DrawTotalNum.GetHashCode();
    if (FreeDrawTime != 0L) hash ^= FreeDrawTime.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    if (IntegralNum != 0) hash ^= IntegralNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    partners_.WriteTo(output, _map_partners_codec);
    partnerChips_.WriteTo(output, _map_partnerChips_codec);
    if (DrawTotalNum != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(DrawTotalNum);
    }
    if (FreeDrawTime != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(FreeDrawTime);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (IntegralNum != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(IntegralNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += partners_.CalculateSize(_map_partners_codec);
    size += partnerChips_.CalculateSize(_map_partnerChips_codec);
    if (DrawTotalNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawTotalNum);
    }
    if (FreeDrawTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FreeDrawTime);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (IntegralNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntegralNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DrawPartnerResp other) {
    if (other == null) {
      return;
    }
    partners_.Add(other.partners_);
    partnerChips_.Add(other.partnerChips_);
    if (other.DrawTotalNum != 0) {
      DrawTotalNum = other.DrawTotalNum;
    }
    if (other.FreeDrawTime != 0L) {
      FreeDrawTime = other.FreeDrawTime;
    }
    changeItem_.Add(other.changeItem_);
    if (other.IntegralNum != 0) {
      IntegralNum = other.IntegralNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          partners_.AddEntriesFrom(input, _map_partners_codec);
          break;
        }
        case 18: {
          partnerChips_.AddEntriesFrom(input, _map_partnerChips_codec);
          break;
        }
        case 32: {
          DrawTotalNum = input.ReadInt32();
          break;
        }
        case 40: {
          FreeDrawTime = input.ReadInt64();
          break;
        }
        case 50: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 56: {
          IntegralNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// level up
/// </summary>
public sealed partial class PartnerLevelUpReq : pb::IMessage<PartnerLevelUpReq> {
  private static readonly pb::MessageParser<PartnerLevelUpReq> _parser = new pb::MessageParser<PartnerLevelUpReq>(() => new PartnerLevelUpReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PartnerLevelUpReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartnerReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerLevelUpReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerLevelUpReq(PartnerLevelUpReq other) : this() {
    configId_ = other.configId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerLevelUpReq Clone() {
    return new PartnerLevelUpReq(this);
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 1;
  private int configId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PartnerLevelUpReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PartnerLevelUpReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigId != other.ConfigId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConfigId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PartnerLevelUpReq other) {
    if (other == null) {
      return;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ConfigId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PartnerLevelUpResp : pb::IMessage<PartnerLevelUpResp> {
  private static readonly pb::MessageParser<PartnerLevelUpResp> _parser = new pb::MessageParser<PartnerLevelUpResp>(() => new PartnerLevelUpResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PartnerLevelUpResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartnerReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerLevelUpResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerLevelUpResp(PartnerLevelUpResp other) : this() {
    Partner = other.partner_ != null ? other.Partner.Clone() : null;
    chips_ = other.chips_.Clone();
    toIntegral_ = other.toIntegral_;
    changeItem_ = other.changeItem_.Clone();
    delChips_ = other.delChips_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerLevelUpResp Clone() {
    return new PartnerLevelUpResp(this);
  }

  /// <summary>Field number for the "partner" field.</summary>
  public const int PartnerFieldNumber = 1;
  private global::PartnerPb partner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PartnerPb Partner {
    get { return partner_; }
    set {
      partner_ = value;
    }
  }

  /// <summary>Field number for the "chips" field.</summary>
  public const int ChipsFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_chips_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> chips_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Chips {
    get { return chips_; }
  }

  /// <summary>Field number for the "toIntegral" field.</summary>
  public const int ToIntegralFieldNumber = 3;
  private int toIntegral_;
  /// <summary>
  /// 最终积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToIntegral {
    get { return toIntegral_; }
    set {
      toIntegral_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  /// 获得卡时，有数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "delChips" field.</summary>
  public const int DelChipsFieldNumber = 5;
  private int delChips_;
  /// <summary>
  /// 升级后，删除掉的碎片
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DelChips {
    get { return delChips_; }
    set {
      delChips_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PartnerLevelUpResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PartnerLevelUpResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Partner, other.Partner)) return false;
    if (!Chips.Equals(other.Chips)) return false;
    if (ToIntegral != other.ToIntegral) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (DelChips != other.DelChips) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (partner_ != null) hash ^= Partner.GetHashCode();
    hash ^= Chips.GetHashCode();
    if (ToIntegral != 0) hash ^= ToIntegral.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    if (DelChips != 0) hash ^= DelChips.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (partner_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Partner);
    }
    chips_.WriteTo(output, _map_chips_codec);
    if (ToIntegral != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ToIntegral);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (DelChips != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(DelChips);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (partner_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Partner);
    }
    size += chips_.CalculateSize(_map_chips_codec);
    if (ToIntegral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToIntegral);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (DelChips != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelChips);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PartnerLevelUpResp other) {
    if (other == null) {
      return;
    }
    if (other.partner_ != null) {
      if (partner_ == null) {
        partner_ = new global::PartnerPb();
      }
      Partner.MergeFrom(other.Partner);
    }
    chips_.Add(other.chips_);
    if (other.ToIntegral != 0) {
      ToIntegral = other.ToIntegral;
    }
    changeItem_.Add(other.changeItem_);
    if (other.DelChips != 0) {
      DelChips = other.DelChips;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (partner_ == null) {
            partner_ = new global::PartnerPb();
          }
          input.ReadMessage(partner_);
          break;
        }
        case 18: {
          chips_.AddEntriesFrom(input, _map_chips_codec);
          break;
        }
        case 24: {
          ToIntegral = input.ReadInt32();
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 40: {
          DelChips = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 伙伴羁绊操作
/// </summary>
public sealed partial class PartnerTrammelsOptReq : pb::IMessage<PartnerTrammelsOptReq> {
  private static readonly pb::MessageParser<PartnerTrammelsOptReq> _parser = new pb::MessageParser<PartnerTrammelsOptReq>(() => new PartnerTrammelsOptReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PartnerTrammelsOptReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartnerReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerTrammelsOptReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerTrammelsOptReq(PartnerTrammelsOptReq other) : this() {
    optId_ = other.optId_;
    configId_ = other.configId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerTrammelsOptReq Clone() {
    return new PartnerTrammelsOptReq(this);
  }

  /// <summary>Field number for the "optId" field.</summary>
  public const int OptIdFieldNumber = 1;
  private int optId_;
  /// <summary>
  /// 1：激活；2：升级；
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OptId {
    get { return optId_; }
    set {
      optId_ = value;
    }
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 2;
  private int configId_;
  /// <summary>
  ///羁绊表id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PartnerTrammelsOptReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PartnerTrammelsOptReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OptId != other.OptId) return false;
    if (ConfigId != other.ConfigId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OptId != 0) hash ^= OptId.GetHashCode();
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OptId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(OptId);
    }
    if (ConfigId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ConfigId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OptId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptId);
    }
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PartnerTrammelsOptReq other) {
    if (other == null) {
      return;
    }
    if (other.OptId != 0) {
      OptId = other.OptId;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          OptId = input.ReadInt32();
          break;
        }
        case 16: {
          ConfigId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PartnerTrammelsOptResp : pb::IMessage<PartnerTrammelsOptResp> {
  private static readonly pb::MessageParser<PartnerTrammelsOptResp> _parser = new pb::MessageParser<PartnerTrammelsOptResp>(() => new PartnerTrammelsOptResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PartnerTrammelsOptResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartnerReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerTrammelsOptResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerTrammelsOptResp(PartnerTrammelsOptResp other) : this() {
    optId_ = other.optId_;
    PartnerTrammels = other.partnerTrammels_ != null ? other.PartnerTrammels.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerTrammelsOptResp Clone() {
    return new PartnerTrammelsOptResp(this);
  }

  /// <summary>Field number for the "optId" field.</summary>
  public const int OptIdFieldNumber = 1;
  private int optId_;
  /// <summary>
  /// 1：激活；2：升级；
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OptId {
    get { return optId_; }
    set {
      optId_ = value;
    }
  }

  /// <summary>Field number for the "partnerTrammels" field.</summary>
  public const int PartnerTrammelsFieldNumber = 2;
  private global::PartnerTrammelsPb partnerTrammels_;
  /// <summary>
  ///羁绊
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PartnerTrammelsPb PartnerTrammels {
    get { return partnerTrammels_; }
    set {
      partnerTrammels_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PartnerTrammelsOptResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PartnerTrammelsOptResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OptId != other.OptId) return false;
    if (!object.Equals(PartnerTrammels, other.PartnerTrammels)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OptId != 0) hash ^= OptId.GetHashCode();
    if (partnerTrammels_ != null) hash ^= PartnerTrammels.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OptId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(OptId);
    }
    if (partnerTrammels_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PartnerTrammels);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OptId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptId);
    }
    if (partnerTrammels_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartnerTrammels);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PartnerTrammelsOptResp other) {
    if (other == null) {
      return;
    }
    if (other.OptId != 0) {
      OptId = other.OptId;
    }
    if (other.partnerTrammels_ != null) {
      if (partnerTrammels_ == null) {
        partnerTrammels_ = new global::PartnerTrammelsPb();
      }
      PartnerTrammels.MergeFrom(other.PartnerTrammels);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          OptId = input.ReadInt32();
          break;
        }
        case 18: {
          if (partnerTrammels_ == null) {
            partnerTrammels_ = new global::PartnerTrammelsPb();
          }
          input.ReadMessage(partnerTrammels_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 上阵
/// </summary>
public sealed partial class PartnerOnPosReq : pb::IMessage<PartnerOnPosReq> {
  private static readonly pb::MessageParser<PartnerOnPosReq> _parser = new pb::MessageParser<PartnerOnPosReq>(() => new PartnerOnPosReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PartnerOnPosReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartnerReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerOnPosReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerOnPosReq(PartnerOnPosReq other) : this() {
    pos_ = other.pos_;
    configId_ = other.configId_;
    opt_ = other.opt_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerOnPosReq Clone() {
    return new PartnerOnPosReq(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private int pos_;
  /// <summary>
  /// 目前需求： 1、
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 2;
  private int configId_;
  /// <summary>
  /// 伙伴id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "opt" field.</summary>
  public const int OptFieldNumber = 3;
  private int opt_;
  /// <summary>
  /// 1上阵、2下阵
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Opt {
    get { return opt_; }
    set {
      opt_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PartnerOnPosReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PartnerOnPosReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    if (ConfigId != other.ConfigId) return false;
    if (Opt != other.Opt) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (Opt != 0) hash ^= Opt.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pos != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
    if (ConfigId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ConfigId);
    }
    if (Opt != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Opt);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (Opt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opt);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PartnerOnPosReq other) {
    if (other == null) {
      return;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.Opt != 0) {
      Opt = other.Opt;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
        case 16: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 24: {
          Opt = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PartnerOnPosResp : pb::IMessage<PartnerOnPosResp> {
  private static readonly pb::MessageParser<PartnerOnPosResp> _parser = new pb::MessageParser<PartnerOnPosResp>(() => new PartnerOnPosResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PartnerOnPosResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartnerReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerOnPosResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerOnPosResp(PartnerOnPosResp other) : this() {
    posList_ = other.posList_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerOnPosResp Clone() {
    return new PartnerOnPosResp(this);
  }

  /// <summary>Field number for the "posList" field.</summary>
  public const int PosListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PartnerPosInfoPb> _repeated_posList_codec
      = pb::FieldCodec.ForMessage(10, global::PartnerPosInfoPb.Parser);
  private readonly pbc::RepeatedField<global::PartnerPosInfoPb> posList_ = new pbc::RepeatedField<global::PartnerPosInfoPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PartnerPosInfoPb> PosList {
    get { return posList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PartnerOnPosResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PartnerOnPosResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!posList_.Equals(other.posList_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= posList_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    posList_.WriteTo(output, _repeated_posList_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += posList_.CalculateSize(_repeated_posList_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PartnerOnPosResp other) {
    if (other == null) {
      return;
    }
    posList_.Add(other.posList_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          posList_.AddEntriesFrom(input, _repeated_posList_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 上阵batch
/// </summary>
public sealed partial class PartnerOnPosBatchReq : pb::IMessage<PartnerOnPosBatchReq> {
  private static readonly pb::MessageParser<PartnerOnPosBatchReq> _parser = new pb::MessageParser<PartnerOnPosBatchReq>(() => new PartnerOnPosBatchReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PartnerOnPosBatchReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartnerReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerOnPosBatchReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerOnPosBatchReq(PartnerOnPosBatchReq other) : this() {
    opt_ = other.opt_;
    configIdList_ = other.configIdList_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerOnPosBatchReq Clone() {
    return new PartnerOnPosBatchReq(this);
  }

  /// <summary>Field number for the "opt" field.</summary>
  public const int OptFieldNumber = 1;
  private int opt_;
  /// <summary>
  /// 1上阵、2下阵
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Opt {
    get { return opt_; }
    set {
      opt_ = value;
    }
  }

  /// <summary>Field number for the "configIdList" field.</summary>
  public const int ConfigIdListFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_configIdList_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> configIdList_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 伙伴id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> ConfigIdList {
    get { return configIdList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PartnerOnPosBatchReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PartnerOnPosBatchReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Opt != other.Opt) return false;
    if(!configIdList_.Equals(other.configIdList_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Opt != 0) hash ^= Opt.GetHashCode();
    hash ^= configIdList_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Opt != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Opt);
    }
    configIdList_.WriteTo(output, _repeated_configIdList_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Opt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opt);
    }
    size += configIdList_.CalculateSize(_repeated_configIdList_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PartnerOnPosBatchReq other) {
    if (other == null) {
      return;
    }
    if (other.Opt != 0) {
      Opt = other.Opt;
    }
    configIdList_.Add(other.configIdList_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Opt = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          configIdList_.AddEntriesFrom(input, _repeated_configIdList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PartnerOnPosBatchResp : pb::IMessage<PartnerOnPosBatchResp> {
  private static readonly pb::MessageParser<PartnerOnPosBatchResp> _parser = new pb::MessageParser<PartnerOnPosBatchResp>(() => new PartnerOnPosBatchResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PartnerOnPosBatchResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PartnerReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerOnPosBatchResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerOnPosBatchResp(PartnerOnPosBatchResp other) : this() {
    posList_ = other.posList_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerOnPosBatchResp Clone() {
    return new PartnerOnPosBatchResp(this);
  }

  /// <summary>Field number for the "posList" field.</summary>
  public const int PosListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PartnerPosInfoPb> _repeated_posList_codec
      = pb::FieldCodec.ForMessage(10, global::PartnerPosInfoPb.Parser);
  private readonly pbc::RepeatedField<global::PartnerPosInfoPb> posList_ = new pbc::RepeatedField<global::PartnerPosInfoPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PartnerPosInfoPb> PosList {
    get { return posList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PartnerOnPosBatchResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PartnerOnPosBatchResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!posList_.Equals(other.posList_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= posList_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    posList_.WriteTo(output, _repeated_posList_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += posList_.CalculateSize(_repeated_posList_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PartnerOnPosBatchResp other) {
    if (other == null) {
      return;
    }
    posList_.Add(other.posList_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          posList_.AddEntriesFrom(input, _repeated_posList_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
