// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from push.proto</summary>
public static partial class PushReflection {

  #region Descriptor
  /// <summary>File descriptor for push.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PushReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpwdXNoLnByb3RvGgpiZWFuLnByb3RvIkQKFVB1c2hHdWlsZEJvc3NSZXdh",
          "cmRQYhIPCgdndWlsZElkGAEgASgFEhoKBGJvc3MYAiABKAsyDC5HdWlsZEJv",
          "c3NQYiIwCgtQdXNoR3VpbGRQYhIQCghwdXNoVHlwZRgBIAEoBRIPCgdndWls",
          "ZElkGAIgASgFKl4KEVB1c2hHdWlsZFR5cGVFbnVtEgkKBWVtcHl0EAASCAoE",
          "am9pbhABEgoKBmFjY2VwdBACEgoKBnJlZnVzZRADEg8KC2Rpc3NvbHV0aW9u",
          "EAQSCwoHa2lja291dBAFQhQKCmNvbS5jYi5tc2dCBlBCUHVzaGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PushGuildTypeEnum), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PushGuildBossRewardPb), global::PushGuildBossRewardPb.Parser, new[]{ "GuildId", "Boss" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PushGuildPb), global::PushGuildPb.Parser, new[]{ "PushType", "GuildId" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum PushGuildTypeEnum {
  /// <summary>
  /// 
  /// </summary>
  [pbr::OriginalName("empyt")] Empyt = 0,
  /// <summary>
  ///申请加入
  /// </summary>
  [pbr::OriginalName("join")] Join = 1,
  /// <summary>
  ///通过
  /// </summary>
  [pbr::OriginalName("accept")] Accept = 2,
  [pbr::OriginalName("refuse")] Refuse = 3,
  [pbr::OriginalName("dissolution")] Dissolution = 4,
  /// <summary>
  /// 踢人
  /// </summary>
  [pbr::OriginalName("kickout")] Kickout = 5,
}

#endregion

#region Messages
public sealed partial class PushGuildBossRewardPb : pb::IMessage<PushGuildBossRewardPb> {
  private static readonly pb::MessageParser<PushGuildBossRewardPb> _parser = new pb::MessageParser<PushGuildBossRewardPb>(() => new PushGuildBossRewardPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PushGuildBossRewardPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PushReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushGuildBossRewardPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushGuildBossRewardPb(PushGuildBossRewardPb other) : this() {
    guildId_ = other.guildId_;
    Boss = other.boss_ != null ? other.Boss.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushGuildBossRewardPb Clone() {
    return new PushGuildBossRewardPb(this);
  }

  /// <summary>Field number for the "guildId" field.</summary>
  public const int GuildIdFieldNumber = 1;
  private int guildId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuildId {
    get { return guildId_; }
    set {
      guildId_ = value;
    }
  }

  /// <summary>Field number for the "boss" field.</summary>
  public const int BossFieldNumber = 2;
  private global::GuildBossPb boss_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildBossPb Boss {
    get { return boss_; }
    set {
      boss_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PushGuildBossRewardPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PushGuildBossRewardPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GuildId != other.GuildId) return false;
    if (!object.Equals(Boss, other.Boss)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GuildId != 0) hash ^= GuildId.GetHashCode();
    if (boss_ != null) hash ^= Boss.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GuildId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GuildId);
    }
    if (boss_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Boss);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GuildId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
    }
    if (boss_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Boss);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PushGuildBossRewardPb other) {
    if (other == null) {
      return;
    }
    if (other.GuildId != 0) {
      GuildId = other.GuildId;
    }
    if (other.boss_ != null) {
      if (boss_ == null) {
        boss_ = new global::GuildBossPb();
      }
      Boss.MergeFrom(other.Boss);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GuildId = input.ReadInt32();
          break;
        }
        case 18: {
          if (boss_ == null) {
            boss_ = new global::GuildBossPb();
          }
          input.ReadMessage(boss_);
          break;
        }
      }
    }
  }

}

public sealed partial class PushGuildPb : pb::IMessage<PushGuildPb> {
  private static readonly pb::MessageParser<PushGuildPb> _parser = new pb::MessageParser<PushGuildPb>(() => new PushGuildPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PushGuildPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PushReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushGuildPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushGuildPb(PushGuildPb other) : this() {
    pushType_ = other.pushType_;
    guildId_ = other.guildId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushGuildPb Clone() {
    return new PushGuildPb(this);
  }

  /// <summary>Field number for the "pushType" field.</summary>
  public const int PushTypeFieldNumber = 1;
  private int pushType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PushType {
    get { return pushType_; }
    set {
      pushType_ = value;
    }
  }

  /// <summary>Field number for the "guildId" field.</summary>
  public const int GuildIdFieldNumber = 2;
  private int guildId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuildId {
    get { return guildId_; }
    set {
      guildId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PushGuildPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PushGuildPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PushType != other.PushType) return false;
    if (GuildId != other.GuildId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PushType != 0) hash ^= PushType.GetHashCode();
    if (GuildId != 0) hash ^= GuildId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PushType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PushType);
    }
    if (GuildId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GuildId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PushType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PushType);
    }
    if (GuildId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PushGuildPb other) {
    if (other == null) {
      return;
    }
    if (other.PushType != 0) {
      PushType = other.PushType;
    }
    if (other.GuildId != 0) {
      GuildId = other.GuildId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PushType = input.ReadInt32();
          break;
        }
        case 16: {
          GuildId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
