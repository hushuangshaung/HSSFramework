// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bean.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from bean.proto</summary>
public static partial class BeanReflection {

  #region Descriptor
  /// <summary>File descriptor for bean.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BeanReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpiZWFuLnByb3RvIksKB0Vycm9yUGISDAoEY29kZRgBIAEoBRINCgVyZWRJ",
          "ZBgCIAEoBRIRCgllcnJvckNvZGUYAyABKAUSEAoIZXJyb3JNc2cYBCABKAki",
          "WAoHTWFwSUlQYhIgCgRkYXRhGAEgAygLMhIuTWFwSUlQYi5EYXRhRW50cnka",
          "KwoJRGF0YUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEi",
          "FwoHTGlzdElQYhIMCgRkYXRhGAEgAygFIpICCghQbGF5ZXJQYhILCgNwaWQY",
          "ASABKAUSDwoHYWNjb3VudBgCIAEoCRIOCgZjb21iYXQYAyABKAMSEQoJZWdn",
          "QnlXZWVrGAQgASgFEhAKCHZpcExldmVsGAUgASgFEg0KBWxldmVsGAYgASgF",
          "EgsKA2V4cBgHIAEoBRIMCgRuYW1lGAsgASgJEgwKBGhlYWQYDCABKAkSEQoJ",
          "Z3VpbGROYW1lGA8gASgJEg8KB2d1aWxkSWQYECABKAUSFgoOZ3VpbGRMZWF2",
          "ZVRpbWUYESABKAMSEAoIaW50ZWdyYWwYEiABKAUSDQoFc3RhZ2UYEyABKAUS",
          "CwoDc2lkGBQgASgFEhEKCWxvZ2luVGltZRgVIAEoAyKyAQoNUGxheWVyRXh0",
          "cmFQYhIWCg5vcGVyYXRpb25UaW1lcxgBIAEoBRIRCglsb2dpblRpbWUYAiAB",
          "KAUSEgoKY3JlYXRlVGltZRgDIAEoBRIUCgxyZXNBdXRvUnRpbWUYBCABKAUS",
          "EgoKbGV2ZWw1VGltZRgFIAEoBRIQCghyZXNldERheRgGIAEoBRISCgpqb2lu",
          "QWxseUNkGAcgASgFEhIKCnVwZGF0ZU5hbWUYCCABKAgiawoJQ3VyVGFsZW50",
          "EiwKCWN1clRhbGVudBgYIAMoCzIZLkN1clRhbGVudC5DdXJUYWxlbnRFbnRy",
          "eRowCg5DdXJUYWxlbnRFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiAB",
          "KAU6AjgBInwKDU5vSGFuZGxlRXF1aXASLgoIZXF1aXBNYXAYASADKAsyHC5O",
          "b0hhbmRsZUVxdWlwLkVxdWlwTWFwRW50cnkaOwoNRXF1aXBNYXBFbnRyeRIL",
          "CgNrZXkYASABKAUSGQoFdmFsdWUYAiABKAsyCi5FcXVpcFYyUGI6AjgBIoEC",
          "Cg5QbGF5ZXJFcXVpcHNWMhIvCghlcXVpcE1hcBgBIAMoCzIdLlBsYXllckVx",
          "dWlwc1YyLkVxdWlwTWFwRW50cnkSEQoJZHJhd1RpbWVzGAIgASgFEhIKCmFw",
          "cGVhclR5cGUYAyADKAUSKwoGYmF0dGxlGAQgAygLMhsuUGxheWVyRXF1aXBz",
          "VjIuQmF0dGxlRW50cnkaOwoNRXF1aXBNYXBFbnRyeRILCgNrZXkYASABKAUS",
          "GQoFdmFsdWUYAiABKAsyCi5FcXVpcFYyUGI6AjgBGi0KC0JhdHRsZUVudHJ5",
          "EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiWQoGSXRlbVBiEiEK",
          "BWl0ZW1zGAEgAygLMhIuSXRlbVBiLkl0ZW1zRW50cnkaLAoKSXRlbXNFbnRy",
          "eRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIhgKB0d1aWRlUGIS",
          "DQoFZ3VpZGUYASADKAUieAoNUGxheWVyVGFsZW50cxIsCgd0YWxlbnRzGAEg",
          "AygLMhsuUGxheWVyVGFsZW50cy5UYWxlbnRzRW50cnkaOQoMVGFsZW50c0Vu",
          "dHJ5EgsKA2tleRgBIAEoBRIYCgV2YWx1ZRgCIAEoCzIJLlRhbGVudFBiOgI4",
          "ASKJAQoLUFRyZWFzdXJlUGISCwoDc3JsGAEgASgFEi4KCXRyZWFzdXJlcxgC",
          "IAMoCzIbLlBUcmVhc3VyZVBiLlRyZWFzdXJlc0VudHJ5Gj0KDlRyZWFzdXJl",
          "c0VudHJ5EgsKA2tleRgBIAEoBRIaCgV2YWx1ZRgCIAEoCzILLlRyZWFzdXJl",
          "UGI6AjgBIsMBCghQRXF1aXBQYhIpCghjdXJFcXVpcBgBIAMoCzIXLlBFcXVp",
          "cFBiLkN1ckVxdWlwRW50cnkSIwoFZXF1aXAYAiADKAsyFC5QRXF1aXBQYi5F",
          "cXVpcEVudHJ5Gi8KDUN1ckVxdWlwRW50cnkSCwoDa2V5GAEgASgFEg0KBXZh",
          "bHVlGAIgASgFOgI4ARo2CgpFcXVpcEVudHJ5EgsKA2tleRgBIAEoBRIXCgV2",
          "YWx1ZRgCIAEoCzIILkVxdWlwUGI6AjgBIjUKD1BUcmVhc3VyZUJvb2tQYhIO",
          "CgZib29raWQYASADKAUSEgoKdHJlYXN1cmVpZBgCIAMoBSJnCghQUm91Z2hQ",
          "YhIjCgVyb3VnaBgBIAMoCzIULlBSb3VnaFBiLlJvdWdoRW50cnkaNgoKUm91",
          "Z2hFbnRyeRILCgNrZXkYASABKAUSFwoFdmFsdWUYAiABKAsyCC5Sb3VnaFBi",
          "OgI4ASI1Cg9DaGFwdGVyUmV3YXJkUGISEAoIZ2V0dGVkSWQYASABKAUSEAoI",
          "dW5sb2NrSWQYAiABKAUiJwoGQm9zc1BiEg4KBmJvc3NJZBgBIAEoBRINCgV0",
          "aW1lcxgCIAEoBSIzCghUYWxlbnRQYhIKCgJpZBgBIAEoBRIKCgJsdhgCIAEo",
          "BRIPCgdpc0NhblVwGAQgASgFIlYKBkF0dHJQYhIfCgRkYXRhGAEgAygLMhEu",
          "QXR0clBiLkRhdGFFbnRyeRorCglEYXRhRW50cnkSCwoDa2V5GAEgASgFEg0K",
          "BXZhbHVlGAIgASgDOgI4ASJsCglFcXVpcFYyUGISCgoCaWQYASABKAUSEQoJ",
          "YmF0dGxlUG9zGAIgASgFEhUKBGF0dHIYAyABKAsyBy5BdHRyUGISDQoFbGV2",
          "ZWwYBCABKAUSDQoFZ3JhZGUYBSABKAUSCwoDc3JsGAYgASgFIl0KCUhhdGNo",
          "UG9vbBINCgVsZXZlbBgBIAEoBRILCgNleHAYAiABKAUSEwoLYWR2YW5jZVRp",
          "bWUYAyABKAMSEAoIYWRzQ2RFbmQYBCABKAUSDQoFdGltZXMYBSABKAUiXAoJ",
          "QWNjb3VudFBiEiIKBHBpZHMYASADKAsyFC5BY2NvdW50UGIuUGlkc0VudHJ5",
          "GisKCVBpZHNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgB",
          "IuQBCgxCb3hTZXR0aW5nUGISDwoHcXVhbGl0eRgBIAEoBRITCgtvcHRpb24x",
          "QXR0MRgCIAEoBRITCgtvcHRpb24xQXR0MhgDIAEoBRITCgtvcHRpb24yQXR0",
          "MRgEIAEoBRITCgtvcHRpb24yQXR0MhgFIAEoBRIRCglvcGVuVGltZXMYBiAB",
          "KAUSFAoMcmV3YXJkTm90U2F0GAcgASgFEhQKDGlmVGlja2V0RnVsbBgIIAEo",
          "BRIVCg1rZWVwSWZRdWFsaXR5GAkgASgFEhkKEWFsbEF0dHJWYWx1ZUxhcmdl",
          "GAogASgFIogBCgdPZmZlclBiEhgKA25wYxgBIAMoCzILLk9mZmVyTnBjUGIS",
          "EgoKY2F0Y2hUaW1lcxgCIAEoBRIPCgdjYXRjaENkGAMgASgFEhEKCXJlZnJl",
          "c2hDZBgEIAEoBRIUCgxyZWZyZXNoVGltZXMYBSABKAUSFQoNY2F0Y2hUaW1l",
          "c01heBgGIAEoBSK+AQoKT2ZmZXJOcGNQYhINCgVucGNpZBgBIAEoBRINCgVz",
          "dGFnZRgCIAEoBRIMCgRzdGFyGAMgASgFEiMKBGF0dHIYBCADKAsyFS5PZmZl",
          "ck5wY1BiLkF0dHJFbnRyeRILCgNwb3MYBSABKAUSDwoHaXNDYXRjaBgGIAEo",
          "CBIUCgxxdWFsaXR5VGFiSWQYByABKAUaKwoJQXR0ckVudHJ5EgsKA2tleRgB",
          "IAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiZwoITW91bnRzUGISDgoGbW91bnRz",
          "GAEgAygFEhAKCGN1ck1vdW50GAIgASgFEg0KBWxldmVsGAMgASgFEgsKA2V4",
          "cBgEIAEoBRIMCgRzdGVwGAUgASgFEg8KB2xldmVsSWQYBiABKAUihAEKCUhv",
          "bGVSZXNQYhINCgVyZXNpZBgBIAEoBRINCgVsZXZlbBgCIAEoBRISCgpnYXRo",
          "ZXJUaW1lGAMgASgFEhMKC2dhdGhlckNoaWxkGAQgAygFEhQKDGdhdGhlclBs",
          "YXllchgFIAEoBRINCgVzdGF0ZRgGIAEoBRILCgNwb3MYByABKAUikwEKBkhv",
          "bGVQYhIKCgJpZBgBIAEoBRIMCgRuYW1lGAIgASgJEgwKBGhlYWQYAyABKAkS",
          "JQoHaG9sZVJlcxgEIAMoCzIULkhvbGVQYi5Ib2xlUmVzRW50cnkaOgoMSG9s",
          "ZVJlc0VudHJ5EgsKA2tleRgBIAEoBRIZCgV2YWx1ZRgCIAEoCzIKLkhvbGVS",
          "ZXNQYjoCOAEiVAoJSG9sZUxvZ1BiEgoKAmlkGAEgASgFEgwKBHRpbWUYAiAB",
          "KAUSDAoEdHlwZRgDIAEoBRINCgVyZXNpZBgEIAEoBRIQCghyZXNMZXZlbBgF",
          "IAEoBSJxCgdDaGlsZFBiEgoKAmlkGAEgASgFEg0KBXN0YXRlGAIgASgFEhIK",
          "CmJpbmRQbGF5ZXIYAyABKAUSEgoKYmluZFJlc1BvcxgEIAEoBRIjCgtjbGll",
          "bnRDaGlsZBgFIAEoCzIOLkNsaWVudENoaWxkUGIigwEKDUNoaWxkRGV0YWls",
          "UGISDQoFdGlyZWQYASABKAUSKgoGY2hpbGRzGAIgAygLMhouQ2hpbGREZXRh",
          "aWxQYi5DaGlsZHNFbnRyeRo3CgtDaGlsZHNFbnRyeRILCgNrZXkYASABKAUS",
          "FwoFdmFsdWUYAiABKAsyCC5DaGlsZFBiOgI4ASJBCg1DbGllbnRDaGlsZFBi",
          "Eg0KBXJlc0lkGAEgASgFEg0KBXJlc0x2GAIgASgFEhIKCmdhdGhlcnRpbWUY",
          "AyABKAUiogoKDkRhaWx5UmVmcmVzaFBiEgwKBHRpbWUYASABKAMSMQoJZGFp",
          "bHlOdW1zGAIgAygLMh4uRGFpbHlSZWZyZXNoUGIuRGFpbHlOdW1zRW50cnkS",
          "EwoLYWRSZXNSVGltZXMYAyABKAUSFAoMaXRlbVJlc1JDb3N0GAQgASgFEhYK",
          "DnJvdWdoRnJlZVRpbWVzGAUgASgFEhgKEHJvdWdoTm9ybWFsVGltZXMYBiAB",
          "KAUSGQoRcm91Z2hTcGVjaWFsVGltZXMYByABKAUSNwoMc2hvcEJ1eVRpbWVz",
          "GAggAygLMiEuRGFpbHlSZWZyZXNoUGIuU2hvcEJ1eVRpbWVzRW50cnkSFQoN",
          "ZGV2aWxCdXlUaW1lcxgJIAEoBRIRCgllZ2dSZXdhcmQYCiADKAUSHAoUaW1t",
          "b3J0YWxTY2VuZU9wVGltZXMYCyABKAUSFgoObGF1bmNoQWxseUhlbHAYDCAB",
          "KAUSGAoQc3VycHJpc2VCb3hUaW1lcxgOIAEoBRIQCghlZ2dCeURheRgPIAEo",
          "BRIUCgxwb29sSXRlbVJhdGUYECABKAUSFgoOdHNSZWZyZXNoVGltZXMYESAB",
          "KAUSOQoNYWRSZXdhcmRUaW1lcxgSIAMoCzIiLkRhaWx5UmVmcmVzaFBiLkFk",
          "UmV3YXJkVGltZXNFbnRyeRJBChF4eUdpdEJhZ0ZyZWVUaW1lcxgTIAMoCzIm",
          "LkRhaWx5UmVmcmVzaFBiLlh5R2l0QmFnRnJlZVRpbWVzRW50cnkSQQoRZXZl",
          "cnlEYXlHaWZ0VGltZXMYFCADKAsyJi5EYWlseVJlZnJlc2hQYi5FdmVyeURh",
          "eUdpZnRUaW1lc0VudHJ5EhMKC2RheVJlY2hhcmdlGBUgASgFEhkKEWRheVJl",
          "Y2hhcmdlUmV3YXJkGBYgAygFEhUKDW9mZmVyQnV5VGltZXMYFyABKAUSPQoP",
          "bGltaXRUaW1lR2lmdENkGBggAygLMiQuRGFpbHlSZWZyZXNoUGIuTGltaXRU",
          "aW1lR2lmdENkRW50cnkSOwoOY2xvdWRHaWZ0VGltZXMYGSADKAsyIy5EYWls",
          "eVJlZnJlc2hQYi5DbG91ZEdpZnRUaW1lc0VudHJ5EiIKGmNsb3VkUHJpdmls",
          "ZWdlR2lmdFRlc3RUaW1lGBogASgFEiEKGWNsb3VkUHJpdmlsZWdlR2lmdFRl",
          "c3ROdW0YGyABKAUSGQoRaHVtYW5TY2VuZU9wVGltZXMYHCABKAUaMAoORGFp",
          "bHlOdW1zRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARoz",
          "ChFTaG9wQnV5VGltZXNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiAB",
          "KAU6AjgBGjQKEkFkUmV3YXJkVGltZXNFbnRyeRILCgNrZXkYASABKAUSDQoF",
          "dmFsdWUYAiABKAU6AjgBGjgKFlh5R2l0QmFnRnJlZVRpbWVzRW50cnkSCwoD",
          "a2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARo4ChZFdmVyeURheUdpZnRU",
          "aW1lc0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEaNgoU",
          "TGltaXRUaW1lR2lmdENkRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
          "ASgFOgI4ARo1ChNDbG91ZEdpZnRUaW1lc0VudHJ5EgsKA2tleRgBIAEoBRIN",
          "CgV2YWx1ZRgCIAEoBToCOAEijQIKDVdlZWtSZWZyZXNoUGISDAoEd2VlaxgB",
          "IAEoBRILCgNlZ2cYAiABKAUSNAoLd2Vla0dpZnRCdXkYAyADKAsyHy5XZWVr",
          "UmVmcmVzaFBiLldlZWtHaWZ0QnV5RW50cnkSPgoQZGV2aWxSYW5rTWFpbERh",
          "eRgEIAMoCzIkLldlZWtSZWZyZXNoUGIuRGV2aWxSYW5rTWFpbERheUVudHJ5",
          "GjIKEFdlZWtHaWZ0QnV5RW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
          "ASgFOgI4ARo3ChVEZXZpbFJhbmtNYWlsRGF5RW50cnkSCwoDa2V5GAEgASgF",
          "Eg0KBXZhbHVlGAIgASgFOgI4ASKlAQoKVHJlYXN1cmVQYhILCgNzcmwYASAB",
          "KAUSCgoCaWQYAiABKAUSDAoEc3RlcBgDIAEoBRINCgVsZXZlbBgEIAEoBRIM",
          "CgRncmlkGAUgASgFEiUKBWFkZGVkGAYgAygLMhYuVHJlYXN1cmVQYi5BZGRl",
          "ZEVudHJ5GiwKCkFkZGVkRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
          "ASgFOgI4ASJFCgdSb3VnaFBiEgsKA3NybBgBIAEoBRIKCgJpZBgCIAEoBRIN",
          "CgVsYXllchgDIAEoBRISCgp0cmVhc3VyZUlkGAQgASgFIo8BCgdFcXVpcFBi",
          "EgsKA3NybBgBIAEoBRIKCgJpZBgCIAEoBRIgCgRhdHRyGAMgAygLMhIuRXF1",
          "aXBQYi5BdHRyRW50cnkSDQoFZ3JhZGUYBCABKAUSDQoFbGV2ZWwYBSABKAUa",
          "KwoJQXR0ckVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEi",
          "9AEKBk1pbmVQYhItCgtwdXRUcmVhc3VyZRgBIAMoCzIYLk1pbmVQYi5QdXRU",
          "cmVhc3VyZUVudHJ5EiUKB3B1dFRpbWUYAiADKAsyFC5NaW5lUGIuUHV0VGlt",
          "ZUVudHJ5EhcKBXJvdWdoGAMgAygLMgguUm91Z2hQYhIXCgZyZXdhcmQYBCAB",
          "KAsyBy5JdGVtUGIaMgoQUHV0VHJlYXN1cmVFbnRyeRILCgNrZXkYASABKAUS",
          "DQoFdmFsdWUYAiABKAU6AjgBGi4KDFB1dFRpbWVFbnRyeRILCgNrZXkYASAB",
          "KAUSDQoFdmFsdWUYAiABKAU6AjgBIlQKCk1haW5UYXNrUGISCgoCaWQYASAB",
          "KAUSDgoGcGFyYW0xGAIgASgFEg4KBnBhcmFtMhgDIAEoBRINCgVzdGF0ZRgE",
          "IAEoBRILCgNleDEYBSADKAUimQEKB1BUYXNrUGISDgoGbWFpbklkGAEgASgF",
          "EioKCXRyYWNlVGFzaxgCIAMoCzIXLlBUYXNrUGIuVHJhY2VUYXNrRW50cnkS",
          "EwoLZmluaXNoVGFza3MYAyADKAUaPQoOVHJhY2VUYXNrRW50cnkSCwoDa2V5",
          "GAEgASgFEhoKBXZhbHVlGAIgASgLMgsuTWFpblRhc2tQYjoCOAEibQoHU2Nl",
          "bmVQYhIVCg1pbW1vcnRhbFNjZW5lGA0gASgFEg0KBXNjZW5lGA4gASgFEhIK",
          "Cmh1bWFuU2NlbmUYDyABKAUSFQoNcmV3YXJkQ2hhcHRlchgGIAEoBRIRCglo",
          "YXNSZXdhcmQYByABKAUiRQoKQWxseUhlbHBQYhILCgNwaWQYASABKAUSDAoE",
          "bmFtZRgCIAEoCRIOCgZoZWxwZXIYAyADKAUSDAoEdHlwZRgEIAEoBSKrAQoG",
          "QWxseVBiEgoKAmlkGAEgASgFEgwKBG5hbWUYAiABKAkSDgoGam9pbkx2GAMg",
          "ASgFEgsKA251bRgEIAEoBRIKCgJsdhgFIAEoBRINCgVsaW1pdBgGIAEoBRIO",
          "CgZub3RpY2UYByABKAkSCwoDZWdnGAggASgFEg8KB21lbWJlcnMYCSADKAUS",
          "EAoIZWdnQnlEYXkYCiABKAUSDwoHZWdnVGltZRgLIAEoBSJ/ChBBbGx5TWVt",
          "YmVySW5mb1BiEi0KBm1lbWJlchgBIAMoCzIdLkFsbHlNZW1iZXJJbmZvUGIu",
          "TWVtYmVyRW50cnkaPAoLTWVtYmVyRW50cnkSCwoDa2V5GAEgASgFEhwKBXZh",
          "bHVlGAIgASgLMg0uQWxseU1lbWJlclBiOgI4ASJmCgxBbGx5TWVtYmVyUGIS",
          "CwoDcGlkGAEgASgFEgsKA3BvcxgCIAEoBRINCgVsZXZlbBgDIAEoBRIMCgRo",
          "ZWFkGAQgASgJEgwKBG5hbWUYBSABKAkSEQoJZWdnQnlXZWVrGAYgASgFIjMK",
          "EkFsbHlNZW1iZXJTZXJ2ZXJQYhILCgNwb3MYASABKAUSEAoIaW50ZWdyYWwY",
          "AiABKAUiWgoHRGV2aWxQYhIWCg5jYW5DaGFsbGVuZ2VDZBgBIAEoBRIWCg5j",
          "aGFsbGVuZ2VUaW1lcxgCIAEoBRIfChdjaGFsbGVuZ2VUaW1lc1JlY292ZXJD",
          "ZBgDIAEoBSJJCgpBbGx5UmFua1BiEgsKA3NpZBgBIAEoBRIMCgRuYW1lGAIg",
          "ASgJEhAKCGludGVncmFsGAMgASgFEg4KBmFsbHlJZBgEIAEoBSLWAQoJU3lz",
          "TWFpbFBiEgoKAmlkGAEgASgFEhAKCHNlbmRUaW1lGAIgASgDEhIKCnRlbXBs",
          "YXRlSWQYAyABKAUSEgoKZXhwaXJlVGltZRgEIAEoAxINCgV0aXRsZRgFIAEo",
          "CRIPCgdjb250ZW50GAYgASgJEiYKBnJld2FyZBgHIAMoCzIWLlN5c01haWxQ",
          "Yi5SZXdhcmRFbnRyeRIMCgR0eXBlGAggASgFGi0KC1Jld2FyZEVudHJ5EgsK",
          "A2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEi7QEKBk1haWxQYhIKCgJp",
          "ZBgBIAEoBRISCgp0ZW1wbGF0ZUlkGAIgASgFEhAKCHNlbmRUaW1lGAMgASgD",
          "EhIKCmV4cGlyZVRpbWUYBCABKAMSDQoFdGl0bGUYBSABKAkSDwoHY29udGVu",
          "dBgGIAEoCRIjCgZyZXdhcmQYByADKAsyEy5NYWlsUGIuUmV3YXJkRW50cnkS",
          "DQoFc3RhdGUYCCABKAUSDAoEZnJvbRgJIAEoCRIMCgR0eXBlGAogASgFGi0K",
          "C1Jld2FyZEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEi",
          "JwoGU2lnblBiEgsKA2RheRgBIAEoBRIQCghzaWduVGltZRgCIAEoBSL5AQoH",
          "VG93ZXJQYhIOCgZib3NzSWQYASABKAUSGQoRcXVpY2tQYXNzUmV3YXJkSWQY",
          "AiABKAUSKgoJdG93ZXJCdWZmGAMgAygLMhcuVG93ZXJQYi5Ub3dlckJ1ZmZF",
          "bnRyeRINCgVtYXhJZBgFIAEoBRIVCg1yYW5kb21CdWZmTWF4GAYgASgFEg8K",
          "B2J1ZmZJZHMYByADKAUSEgoKaXNGaXJzdERheRgIIAEoBRIMCgRzZWVkGAkg",
          "ASgFGj4KDlRvd2VyQnVmZkVudHJ5EgsKA2tleRgBIAEoBRIbCgV2YWx1ZRgC",
          "IAEoCzIMLlRvd2VyQnVmZlBiOgI4ASIsCgtUb3dlckJ1ZmZQYhIOCgZidWZm",
          "SWQYASABKAUSDQoFbGV2ZWwYAiABKAUiYgoKQWN0aXZpdHlQYhIQCgh4eUJ1",
          "eUlkcxgBIAMoBRIMCgR4eUNkGAIgASgFEhEKCXdlbGZhcmVJZBgDIAEoBRIh",
          "ChljbG91ZFByaXZpbGVnZUdpZnRFbmRUaW1lGAQgASgFIkwKD0FjY291bnRQ",
          "bGF5ZXJQYhIPCgdhY2NvdW50GAEgASgJEgwKBG5hbWUYAiABKAkSDQoFbGV2",
          "ZWwYAyABKAUSCwoDc2lkGAQgASgFImwKBkZ1bmRQYhIUCgxmdW5kVW5sb2Nr",
          "SWQYASADKAUSHwoEZnVuZBgCIAMoCzIRLkZ1bmRQYi5GdW5kRW50cnkaKwoJ",
          "RnVuZEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiuQEK",
          "B0FycmV5UGISCgoCaWQYASABKAUSIgoFZnVuZXMYAiADKAsyEy5BcnJleVBi",
          "LkZ1bmVzRW50cnkSIgoFYWRkZWQYAyADKAsyEy5BcnJleVBiLkFkZGVkRW50",
          "cnkaLAoKRnVuZXNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6",
          "AjgBGiwKCkFkZGVkRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgF",
          "OgI4ASKCAQoIUEFycmV5UGISEAoIY3VyQXJyZXkYASABKAUSKQoIYWxsQXJy",
          "ZXkYAiADKAsyFy5QQXJyZXlQYi5BbGxBcnJleUVudHJ5GjkKDUFsbEFycmV5",
          "RW50cnkSCwoDa2V5GAEgASgFEhcKBXZhbHVlGAIgASgLMgguQXJyZXlQYjoC",
          "OAEikQEKBkZ1bmVQYhILCgNzcmwYASABKAUSCgoCaWQYAiABKAUSHwoEYXR0",
          "chgDIAMoCzIRLkZ1bmVQYi5BdHRyRW50cnkSDQoFbGV2ZWwYBCABKAUSEQoJ",
          "YmluZEFycmV5GAUgASgFGisKCUF0dHJFbnRyeRILCgNrZXkYASABKAUSDQoF",
          "dmFsdWUYAiABKAU6AjgBImEKB1BGdW5lUGISIAoEZnVuZRgBIAMoCzISLlBG",
          "dW5lUGIuRnVuZUVudHJ5GjQKCUZ1bmVFbnRyeRILCgNrZXkYASABKAUSFgoF",
          "dmFsdWUYAiABKAsyBy5GdW5lUGI6AjgBIsgCCgtDbG91ZFRvb2xQYhIMCgR1",
          "cElkGAEgASgFEjQKDHN1Y2NpbmN0QXR0chgCIAMoCzIeLkNsb3VkVG9vbFBi",
          "LlN1Y2NpbmN0QXR0ckVudHJ5EiQKBGF0dHIYAyADKAsyFi5DbG91ZFRvb2xQ",
          "Yi5BdHRyRW50cnkSLAoIc3RlcFRhc2sYBCADKAsyGi5DbG91ZFRvb2xQYi5T",
          "dGVwVGFza0VudHJ5Eg4KBnRvb2xJZBgFIAEoBRozChFTdWNjaW5jdEF0dHJF",
          "bnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBGisKCUF0dHJF",
          "bnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBGi8KDVN0ZXBU",
          "YXNrRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASJ5CgpN",
          "YXRlcmlhbFBiEgoKAmlkGAEgASgFEiMKBGF0dHIYAiADKAsyFS5NYXRlcmlh",
          "bFBiLkF0dHJFbnRyeRINCgVsb29rcxgDIAEoBRorCglBdHRyRW50cnkSCwoD",
          "a2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASJeChBDbG91ZERhaWx5VGFz",
          "a1BiEgoKAmlkGAEgASgFEg0KBWxldmVsGAIgASgFEhAKCHByb2dyZXNzGAMg",
          "ASgFEhAKCGlzcmV3YXJkGAQgASgFEgsKA3NybBgFIAEoBSJyCg5DbG91ZE1h",
          "cFRhc2tQYhIvCghwcm9ncmVzcxgBIAMoCzIdLkNsb3VkTWFwVGFza1BiLlBy",
          "b2dyZXNzRW50cnkaLwoNUHJvZ3Jlc3NFbnRyeRILCgNrZXkYASABKAUSDQoF",
          "dmFsdWUYAiABKAU6AjgBIpYCCgtDbG91ZEJhc2VQYhINCgVtYXBpZBgBIAEo",
          "BRIQCghtYXhNYXBJZBgCIAEoBRIQCghwYXZMZXZlbBgDIAEoBRIPCgdjbG91",
          "ZENkGAQgASgFEg8KB3BhdkdyaWQYBSABKAUSEgoKcGF2TGV2ZWxDZBgGIAEo",
          "BRIPCgdwYXZBZENkGAcgASgFEjIKC21hdExvb2tzTWF4GAggAygLMh0uQ2xv",
          "dWRCYXNlUGIuTWF0TG9va3NNYXhFbnRyeRIQCghiYXR0bGVJZBgJIAEoBRIT",
          "CgtiYXR0bGVTdGF0ZRgKIAEoBRoyChBNYXRMb29rc01heEVudHJ5EgsKA2tl",
          "eRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiggEKEVBDbG91ZERhaWx5VGFz",
          "a1BiEiwKBXRhc2tzGAEgAygLMh0uUENsb3VkRGFpbHlUYXNrUGIuVGFza3NF",
          "bnRyeRo/CgpUYXNrc0VudHJ5EgsKA2tleRgBIAEoBRIgCgV2YWx1ZRgCIAEo",
          "CzIRLkNsb3VkRGFpbHlUYXNrUGI6AjgBImoKC1BNYXRlcmlhbFBiEiIKA21h",
          "dBgBIAMoCzIVLlBNYXRlcmlhbFBiLk1hdEVudHJ5GjcKCE1hdEVudHJ5EgsK",
          "A2tleRgBIAEoBRIaCgV2YWx1ZRgCIAEoCzILLk1hdGVyaWFsUGI6AjgBInMK",
          "DFBDbG91ZFRvb2xQYhInCgV0b29scxgBIAMoCzIYLlBDbG91ZFRvb2xQYi5U",
          "b29sc0VudHJ5GjoKClRvb2xzRW50cnkSCwoDa2V5GAEgASgFEhsKBXZhbHVl",
          "GAIgASgLMgwuQ2xvdWRUb29sUGI6AjgBIssDCg9QbGF5ZXJQYXJ0bmVyUGIS",
          "MAoIcGFydG5lcnMYASADKAsyHi5QbGF5ZXJQYXJ0bmVyUGIuUGFydG5lcnNF",
          "bnRyeRI4CgxwYXJ0bmVyQ2hpcHMYAiADKAsyIi5QbGF5ZXJQYXJ0bmVyUGIu",
          "UGFydG5lckNoaXBzRW50cnkSFAoMZnJlZURyYXdUaW1lGAQgASgDEjAKCHRy",
          "YW1tZWxzGAUgAygLMh4uUGxheWVyUGFydG5lclBiLlRyYW1tZWxzRW50cnkS",
          "IgoHcG9zTGlzdBgGIAMoCzIRLlBhcnRuZXJQb3NJbmZvUGISFAoMZHJhd1Rv",
          "dGFsTnVtGAcgASgFEhMKC2ludGVncmFsTnVtGAggASgFGjsKDVBhcnRuZXJz",
          "RW50cnkSCwoDa2V5GAEgASgFEhkKBXZhbHVlGAIgASgLMgouUGFydG5lclBi",
          "OgI4ARozChFQYXJ0bmVyQ2hpcHNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFs",
          "dWUYAiABKAU6AjgBGkMKDVRyYW1tZWxzRW50cnkSCwoDa2V5GAEgASgFEiEK",
          "BXZhbHVlGAIgASgLMhIuUGFydG5lclRyYW1tZWxzUGI6AjgBIlYKCVBhcnRu",
          "ZXJQYhIQCghjb25maWdJZBgBIAEoBRINCgVsZXZlbBgCIAEoBRIVCgRhdHRy",
          "GAMgASgLMgcuQXR0clBiEhEKCXNraWxsTGV2ZRgEIAEoBSJDChBQYXJ0bmVy",
          "UG9zSW5mb1BiEg0KBXBvc0lkGAEgASgFEhAKCGNvbmZpZ0lkGAIgASgFEg4K",
          "BmlzT3BlbhgDIAEoBSJLChFQYXJ0bmVyVHJhbW1lbHNQYhIQCghjb25maWdJ",
          "ZBgBIAEoBRINCgVsZXZlbBgCIAEoBRIVCgRhdHRyGAMgASgLMgcuQXR0clBi",
          "IuwDChVQbGF5ZXJTYWNyZWRWZXNzZWxzUGISQAoNc2FjcmVkVmVzc2VscxgB",
          "IAMoCzIpLlBsYXllclNhY3JlZFZlc3NlbHNQYi5TYWNyZWRWZXNzZWxzRW50",
          "cnkSMAoFY2hpcHMYAiADKAsyIS5QbGF5ZXJTYWNyZWRWZXNzZWxzUGIuQ2hp",
          "cHNFbnRyeRIwCgVib29rcxgDIAMoCzIhLlBsYXllclNhY3JlZFZlc3NlbHNQ",
          "Yi5Cb29rc0VudHJ5EhUKDXB1dE9uQ29uZmlnSWQYBCABKAUSEAoIZWxpdGVO",
          "dW0YBSABKAUSDwoHZnJlZU51bRgGIAEoBRIQCghmcmVlVGltZRgHIAEoAxIn",
          "CgdyZWNvcmRzGAggAygLMhYuU2FjcmVkVmVzc2Vsc1JlY29yZFBiGkYKElNh",
          "Y3JlZFZlc3NlbHNFbnRyeRILCgNrZXkYASABKAUSHwoFdmFsdWUYAiABKAsy",
          "EC5TYWNyZWRWZXNzZWxzUGI6AjgBGiwKCkNoaXBzRW50cnkSCwoDa2V5GAEg",
          "ASgFEg0KBXZhbHVlGAIgASgFOgI4ARpCCgpCb29rc0VudHJ5EgsKA2tleRgB",
          "IAEoBRIjCgV2YWx1ZRgCIAEoCzIULlNhY3JlZFZlc3NlbHNCb29rUGI6AjgB",
          "IkkKD1NhY3JlZFZlc3NlbHNQYhIQCghjb25maWdJZBgBIAEoBRINCgVsZXZl",
          "bBgCIAEoBRIVCgRhdHRyGAMgASgLMgcuQXR0clBiIj4KE1NhY3JlZFZlc3Nl",
          "bHNCb29rUGISEAoIY29uZmlnSWQYASABKAUSFQoEYXR0chgCIAEoCzIHLkF0",
          "dHJQYiJJChVTYWNyZWRWZXNzZWxzUmVjb3JkUGISEAoIY29uZmlnSWQYASAB",
          "KAUSEAoIZWxpdGVOdW0YAiABKAUSDAoEdGltZRgDIAEoAyKvAwoLUGxheWVy",
          "UGV0UGISEwoLZnJlZUdyaWROdW0YASABKAUSFgoOZGlhbW9uZEdyaWROdW0Y",
          "AiABKAUSKAoGcGV0TWFwGAMgAygLMhguUGxheWVyUGV0UGIuUGV0TWFwRW50",
          "cnkSFQoNb25CYXR0bGVQZXRJZBgEIAEoBRIcCghzaG9wUGV0cxgFIAEoCzIK",
          "LlNob3BQZXRQYhIWCg5yZWZyZXNoU2hvcE51bRgGIAEoBRIUCgxvcGVuQ2hl",
          "ZXJOdW0YByABKAUSEAoIdG1wUGV0SWQYCCABKAUSPAoQdG1wUGFzc2l2ZVNr",
          "aWxscxgJIAMoCzIiLlBsYXllclBldFBiLlRtcFBhc3NpdmVTa2lsbHNFbnRy",
          "eRISCgpvd25QZXRMaXN0GAogAygFEhIKCnRyYW1tZWxzSWQYCyADKAUaNQoL",
          "UGV0TWFwRW50cnkSCwoDa2V5GAEgASgFEhUKBXZhbHVlGAIgASgLMgYuUGV0",
          "UGI6AjgBGjcKFVRtcFBhc3NpdmVTa2lsbHNFbnRyeRILCgNrZXkYASABKAUS",
          "DQoFdmFsdWUYAiABKAU6AjgBIjcKCVNob3BQZXRQYhIXCgdwZXRMaXN0GAEg",
          "AygLMgYuUGV0UGISEQoJYnV5UGV0SWRzGAIgAygFIvcCCgVQZXRQYhIKCgJp",
          "ZBgBIAEoBRIQCghjb25maWdJZBgCIAEoBRINCgVsZXZlbBgDIAEoBRINCgVn",
          "cmFkZRgEIAEoBRIMCgRzdGFyGAUgASgFEhoKBXNraWxsGAYgASgLMgsuUGV0",
          "U2tpbGxQYhIwCg1wYXNzaXZlU2tpbGxzGAcgAygLMhkuUGV0UGIuUGFzc2l2",
          "ZVNraWxsc0VudHJ5Eg4KBmlzTG9jaxgIIAEoBRIiCgZjaGVlcnMYCSADKAsy",
          "Ei5QZXRQYi5DaGVlcnNFbnRyeRISCgpib29sZUxldmVsGAogASgFEhwKFGJs",
          "b29kUGFzc2l2ZVNraWxsTnVtGAsgASgFGkEKElBhc3NpdmVTa2lsbHNFbnRy",
          "eRILCgNrZXkYASABKAUSGgoFdmFsdWUYAiABKAsyCy5QZXRTa2lsbFBiOgI4",
          "ARotCgtDaGVlcnNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6",
          "AjgBIjkKClBldFNraWxsUGISDwoHc2tpbGxJZBgBIAEoBRINCgVsZXZlbBgC",
          "IAEoBRILCgNrZXkYAyABKAUiaQoLU3lzVW5sb2NrUGISKgoHdW5sb2NrcxgB",
          "IAMoCzIZLlN5c1VubG9ja1BiLlVubG9ja3NFbnRyeRouCgxVbmxvY2tzRW50",
          "cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASKeAQoOUGxheWVy",
          "RnJpZW5kUGISLQoHZnJpZW5kcxgBIAMoCzIcLlBsYXllckZyaWVuZFBiLkZy",
          "aWVuZHNFbnRyeRINCgVwb3dlchgCIAEoBRITCgtsYXN0Q2FsVGltZRgDIAEo",
          "Axo5CgxGcmllbmRzRW50cnkSCwoDa2V5GAEgASgFEhgKBXZhbHVlGAIgASgL",
          "MgkuRnJpZW5kUGI6AjgBIqkBCghGcmllbmRQYhIQCghjb25maWdJZBgBIAEo",
          "BRINCgVsZXZlbBgCIAEoBRIQCghpc1VubG9jaxgDIAEoBRIrCglwYXNzQm9z",
          "ZXMYBCADKAsyGC5GcmllbmRQYi5QYXNzQm9zZXNFbnRyeRILCgNleHAYBSAB",
          "KAUaMAoOUGFzc0Jvc2VzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
          "ASgFOgI4ASKSAQoTUGxheWVyU3RhZ2VUYXNrSW5mbxI6Cgt0YXNrU3RhdHVz",
          "cxgBIAMoCzIlLlBsYXllclN0YWdlVGFza0luZm8uVGFza1N0YXR1c3NFbnRy",
          "eRo/ChBUYXNrU3RhdHVzc0VudHJ5EgsKA2tleRgBIAEoBRIaCgV2YWx1ZRgC",
          "IAEoCzILLk1haW5UYXNrUGI6AjgBIosBCghTZXJ2ZXJQYhIKCgJpZBgBIAEo",
          "BRINCgVpc05ldxgCIAEoBRILCgN1cmwYAyABKAkSEQoJc3RhcnRUaW1lGAQg",
          "ASgDEg4KBnN0YXR1cxgFIAEoBRIUCgxpbXBvcnRXZWlnaHQYBiABKAUSDwoH",
          "Y3Jvc3NJZBgHIAMoBRINCgVpc0hvdBgIIAEoBSJFCglTZXJ2ZXJzUGISHQoK",
          "c2VydmVyTGlzdBgBIAMoCzIJLlNlcnZlclBiEhkKBm15TGlzdBgCIAMoCzIJ",
          "LlNlcnZlclBiIkwKEFBsYXllck92ZXJJbmZvUGISCwoDcGlkGAEgASgFEgwK",
          "BG5hbWUYAiABKAkSDgoGYXZhdGFyGAMgASgJEg0KBXN0YWdlGAQgASgFIm8K",
          "BkNoYXRQYhIKCgJpZBgBIAEoBRIPCgdjaGFubmVsGAIgASgFEgsKA21zZxgD",
          "IAEoCRIQCghkYXRlbGluZRgEIAEoAxIpCg5wbGF5ZXJPdmVySW5mbxgFIAEo",
          "CzIRLlBsYXllck92ZXJJbmZvUGIiJgoHQ2hhdFBicxIbCgpjaGF0UGJMaXN0",
          "GAEgAygLMgcuQ2hhdFBiIn4KDENoYXRSZWNvcmRQYhIxCgpyZWNvcmRMaXN0",
          "GAEgAygLMh0uQ2hhdFJlY29yZFBiLlJlY29yZExpc3RFbnRyeRo7Cg9SZWNv",
          "cmRMaXN0RW50cnkSCwoDa2V5GAEgASgFEhcKBXZhbHVlGAIgASgLMgguQ2hh",
          "dFBiczoCOAEiNAoPQ2hhbGxlbmdlSW5mb1BiEhMKC2ZpZWxkQm9zc0lkGAEg",
          "ASgFEgwKBHNlZWQYAiABKAUiowEKDlBsYXRmb3JtVXNlclBiEg4KBnVzZXJJ",
          "ZBgBIAEoCRIPCgdjb3VudHJ5GAMgASgJEgwKBGxhbmcYBCABKAkSEAoIY3Vy",
          "cmVuY3kYBSABKAkSFAoMaXNDcmVhdGVSb2xlGAYgASgFEg8KB3NlcnZlcnMY",
          "ByADKAUSFwoPbGFzdExvZ2luU2VydmVyGAggASgFEhAKCGxvZ2luTnVtGAkg",
          "ASgFIqQCChBQbGF5ZXJNaW5pSW5mb1BiEgsKA3BpZBgBIAEoBRINCgVsZXZl",
          "bBgCIAEoBRIMCgRoZWFkGAMgASgJEgwKBG5hbWUYBCABKAkSKQoEYXR0chgF",
          "IAMoCzIbLlBsYXllck1pbmlJbmZvUGIuQXR0ckVudHJ5EhAKCGN1ck1vdW50",
          "GAYgASgFEhEKCWJhdHRsZVBldBgHIAEoBRIfCghwYXJ0bmVycxgIIAMoCzIN",
          "LlBhcnRuZXJQdnBQYhIaCgZlcXVpcHMYCSADKAsyCi5FcXVpcFYyUGISHgoE",
          "b2JqcxgKIAMoCzIQLkNvbW1vbk9iakluZm9QYhorCglBdHRyRW50cnkSCwoD",
          "a2V5GAEgASgFEg0KBXZhbHVlGAIgASgDOgI4ASI+Cg9Db21tb25PYmpJbmZv",
          "UGISDAoEdHlwZRgBIAEoBRIOCgZjb25mSWQYAiABKAUSDQoFbGV2ZWwYAyAB",
          "KAUiNwoPUHZwUGxheWVySW5mb1BiEhIKCnJhbmtJZExpc3QYASADKAUSEAoI",
          "aW50ZWdyYWwYAiABKAUitwEKEFBsYXllclJhbmtJbmZvUGISCwoDcElkGAEg",
          "ASgFEg0KBWxldmVsGAIgASgFEgwKBGhlYWQYAyABKAkSDAoEbmFtZRgEIAEo",
          "CRIQCghpbnRlZ3JhbBgFIAEoBRILCgNwb3MYBiABKAUSEAoIYWxseU5hbWUY",
          "ByABKAkSCwoDc0lkGAggASgFEg4KBmNvbWJhdBgJIAEoAxIMCgRyYW5rGAog",
          "ASgFEg8KB2lzUm9ib3QYCyABKAUimQEKE1BsYXllckluZm9ybWF0aW9uUGIS",
          "CwoDcElkGAEgASgFEgwKBG5hbWUYAiABKAkSDAoEaGVhZBgDIAEoCRINCgVy",
          "ZWFsbRgEIAEoBRINCgVsZXZlbBgFIAEoBRIKCgJzZBgGIAEoBRIQCghpbnRl",
          "Z3JhbBgHIAEoBRILCgNwb3MYCCABKAUSEAoIYWxseU5hbWUYCSABKAkiUAoM",
          "UGFydG5lclB2cFBiEhAKCGNvbmZpZ0lkGAEgASgFEg0KBWxldmVsGAIgASgF",
          "EhIKCnNraWxsTGV2ZWwYAyABKAUSCwoDcG9zGAQgASgFIpQCCgtQdnBQbGF5",
          "ZXJQYhILCgNwaWQYASABKAUSDQoFbGV2ZWwYAiABKAUSDAoEaGVhZBgDIAEo",
          "CRIQCghhbGx5TmFtZRgEIAEoCRIQCghpbnRlZ3JhbBgFIAEoBRINCgVwTmFt",
          "ZRgGIAEoCRIkCgRhdHRyGAcgAygLMhYuUHZwUGxheWVyUGIuQXR0ckVudHJ5",
          "Eg8KB2lzUm9ib3QYCCABKAUSEAoIY3VyTW91bnQYCSABKAUSEQoJYmF0dGxl",
          "UGV0GAogASgFEh8KCHBhcnRuZXJzGAsgAygLMg0uUGFydG5lclB2cFBiGisK",
          "CUF0dHJFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAM6AjgBIpYB",
          "CghQdnBMb2dQYhILCgNwaWQYASABKAUSDQoFbGV2ZWwYAiABKAUSDAoEaGVh",
          "ZBgDIAEoCRINCgVwTmFtZRgGIAEoCRIMCgR0aW1lGAcgASgFEg4KBnJlc3Vs",
          "dBgIIAEoBRIQCghpbnRlZ3JhbBgJIAEoBRIRCglpc1JldmVuZ2UYCiABKAUS",
          "DgoGY29tYmF0GAsgASgFIqoBCg5HdWlsZFJlY29yZHNQYhIMCgRuYW1lGAEg",
          "ASgJEg4KBmJvc3NJZBgCIAEoBRISCgpib3NzRGFtYWdlGAMgASgDEjMKCmNo",
          "YW5nZUl0ZW0YBCADKAsyHy5HdWlsZFJlY29yZHNQYi5DaGFuZ2VJdGVtRW50",
          "cnkaMQoPQ2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgC",
          "IAEoBToCOAEivQMKB0d1aWxkUGISCgoCaWQYASABKAUSDAoEbmFtZRgCIAEo",
          "CRINCgVsZXZlbBgDIAEoBRILCgNleHAYBCABKAUSDgoGbm90aWNlGAUgASgJ",
          "Eg8KB2JhZGdlSWQYBiABKAUSEQoJY3JlYXRUaW1lGAcgASgDEhUKDWFsbG93",
          "QXV0b0pvaW4YCCABKAUSFAoMam9pbk1pbkxldmVsGAkgASgFEg0KBW9yZGVy",
          "GAogASgFEhEKCW1lbWJlcklkcxgLIAMoBRIOCgZjb21iYXQYDCABKAMSDAoE",
          "cmFuaxgNIAEoBRIkCgdhcHBsaWVzGA4gASgLMhMuR3VpbGRBcHBseVBsYXll",
          "clBiEigKCGFzc2lzTWFwGA8gAygLMhYuR3VpbGRQYi5Bc3Npc01hcEVudHJ5",
          "EhoKBGJvc3MYECABKAsyDC5HdWlsZEJvc3NQYhIXCg90b2RheUpvaW5OdW1i",
          "ZXIYESABKAUSFQoNcHJlc2lkZW50TmFtZRgSIAEoCRo/Cg1Bc3Npc01hcEVu",
          "dHJ5EgsKA2tleRgBIAEoBRIdCgV2YWx1ZRgCIAEoCzIOLkd1aWxkQXNzaXN0",
          "UGI6AjgBIqYECg1HdWlsZE1lbWJlclBiEgoKAmlkGAEgASgFEgwKBG5hbWUY",
          "AiABKAkSDQoFbGV2ZWwYAyABKAUSEAoIZHV0aWVzSWQYBCABKAUSDAoEaGVh",
          "ZBgFIAEoCRILCgNleHAYBiABKAUSDwoHZ3VpbGRJZBgHIAEoBRIOCgZjb21i",
          "YXQYCCABKAMSEAoIaXNPbmxpbmUYCSABKAUSEQoJbG9naW5UaW1lGAogASgD",
          "EhkKEXRvZGF5Q29udHJpYnV0aW9uGAsgASgDEhcKD2hpc0NvbnRyaWJ1dGlv",
          "bhgMIAEoAxI6Cg5ib3NzSHVydFJld2FyZBgNIAMoCzIiLkd1aWxkTWVtYmVy",
          "UGIuQm9zc0h1cnRSZXdhcmRFbnRyeRI4Cg1jcnVzYWRlUmV3YXJkGA4gAygL",
          "MiEuR3VpbGRNZW1iZXJQYi5DcnVzYWRlUmV3YXJkRW50cnkSMAoJbnVtUmV3",
          "YXJkGA8gAygLMh0uR3VpbGRNZW1iZXJQYi5OdW1SZXdhcmRFbnRyeRo1ChNC",
          "b3NzSHVydFJld2FyZEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEo",
          "BToCOAEaNAoSQ3J1c2FkZVJld2FyZEVudHJ5EgsKA2tleRgBIAEoBRINCgV2",
          "YWx1ZRgCIAEoBToCOAEaMAoOTnVtUmV3YXJkRW50cnkSCwoDa2V5GAEgASgF",
          "Eg0KBXZhbHVlGAIgASgFOgI4ASJ3CgxHdWlsZEFwcGx5UGISCgoCaWQYASAB",
          "KAMSCwoDcElkGAIgASgFEg8KB2d1aWxkSWQYAyABKAUSEQoJYXBwbHlUaW1l",
          "GAQgASgDEg4KBmNvbWJhdBgFIAEoAxIMCgRuYW1lGAYgASgJEgwKBGhlYWQY",
          "ByABKAki1AEKDUd1aWxkQXNzaXN0UGISEAoIcGxheWVySWQYASABKAUSDwoH",
          "Z3VpbGRJZBgCIAEoBRIRCgljcmF0ZVRpbWUYAyABKAMSDwoHcG9vbEx2bBgE",
          "IAEoBRI4Cg1hc3Npc3RQbGF5ZXJzGAUgAygLMiEuR3VpbGRBc3Npc3RQYi5B",
          "c3Npc3RQbGF5ZXJzRW50cnkSDAoEbmFtZRgGIAEoCRo0ChJBc3Npc3RQbGF5",
          "ZXJzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASKGAQoS",
          "R3VpbGRBcHBseVBsYXllclBiEjEKB2FwcGxpZXMYASADKAsyIC5HdWlsZEFw",
          "cGx5UGxheWVyUGIuQXBwbGllc0VudHJ5Gj0KDEFwcGxpZXNFbnRyeRILCgNr",
          "ZXkYASABKAMSHAoFdmFsdWUYAiABKAsyDS5HdWlsZEFwcGx5UGI6AjgBIocB",
          "ChVHdWlsZEFzc2lzdFBiUGxheWVyUGISMAoFYXNzaXMYASADKAsyIS5HdWls",
          "ZEFzc2lzdFBiUGxheWVyUGIuQXNzaXNFbnRyeRo8CgpBc3Npc0VudHJ5EgsK",
          "A2tleRgBIAEoBRIdCgV2YWx1ZRgCIAEoCzIOLkd1aWxkQXNzaXN0UGI6AjgB",
          "ItsCCgtHdWlsZEJvc3NQYhIKCgJpZBgBIAEoBRIZChFhY2N1bXVsYXRlZERh",
          "bWFnZRgCIAEoAxI2Cg1wbGF5ZXJEYW1hZ2VzGAMgAygLMh8uR3VpbGRCb3Nz",
          "UGIuUGxheWVyRGFtYWdlc0VudHJ5EhYKDnRvdGFsQmF0dGxlTnVtGAQgASgF",
          "EgoKAmhwGAUgASgDEiYKCmJvc3NSZXdhcmQYBiABKAsyEi5HdWlsZEJvc3NS",
          "ZXdhcmRQYhIqCgdyZWNvcmRzGAcgAygLMhkuR3VpbGRCb3NzUGIuUmVjb3Jk",
          "c0VudHJ5GjQKElBsYXllckRhbWFnZXNFbnRyeRILCgNrZXkYASABKAUSDQoF",
          "dmFsdWUYAiABKAM6AjgBGj8KDFJlY29yZHNFbnRyeRILCgNrZXkYASABKAUS",
          "HgoFdmFsdWUYAiABKAsyDy5HdWlsZFJlY29yZHNQYjoCOAEi7wEKEUd1aWxk",
          "Qm9zc1Jld2FyZFBiEjwKDWNydXNhZGVSZXdhcmQYASADKAsyJS5HdWlsZEJv",
          "c3NSZXdhcmRQYi5DcnVzYWRlUmV3YXJkRW50cnkSNAoJbnVtUmV3YXJkGAIg",
          "AygLMiEuR3VpbGRCb3NzUmV3YXJkUGIuTnVtUmV3YXJkRW50cnkaNAoSQ3J1",
          "c2FkZVJld2FyZEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToC",
          "OAEaMAoOTnVtUmV3YXJkRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
          "ASgFOgI4ASJmCg1HdWlsZFBsYXllclBiEiQKB2FwcGxpZXMYASABKAsyEy5H",
          "dWlsZEFwcGx5UGxheWVyUGISLwoPaW5pdGlhdGVBc3Npc3RzGAIgASgLMhYu",
          "R3VpbGRBc3Npc3RQYlBsYXllclBiIsIDCghHbUluZm9QYhIOCgZtb2R1bGUY",
          "ASABKAUSEAoIZXJyb3JNc2cYAiABKAkSIwoFaXRlbXMYAyADKAsyFC5HbUlu",
          "Zm9QYi5JdGVtc0VudHJ5EikKCHBhcnRuZXJzGAQgAygLMhcuR21JbmZvUGIu",
          "UGFydG5lcnNFbnRyeRIxCgxwYXJ0bmVyQ2hpcHMYBSADKAsyGy5HbUluZm9Q",
          "Yi5QYXJ0bmVyQ2hpcHNFbnRyeRIZCgZtb3VudHMYBiABKAsyCS5Nb3VudHNQ",
          "YhISCgpvd25QZXRMaXN0GAcgAygFEicKDXNhY3JlZFZlc3NlbHMYCCABKAsy",
          "EC5TYWNyZWRWZXNzZWxzUGISGQoGZnJpZW5kGAkgASgLMgkuRnJpZW5kUGIa",
          "LAoKSXRlbXNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgB",
          "GjsKDVBhcnRuZXJzRW50cnkSCwoDa2V5GAEgASgFEhkKBXZhbHVlGAIgASgL",
          "MgouUGFydG5lclBiOgI4ARozChFQYXJ0bmVyQ2hpcHNFbnRyeRILCgNrZXkY",
          "ASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIpACChJSZWNoYXJnZUFjdGl2aXR5",
          "UGISNQoJYnV5TnVtTWFwGAEgAygLMiIuUmVjaGFyZ2VBY3Rpdml0eVBiLkJ1",
          "eU51bU1hcEVudHJ5EkUKEWZpcnN0UmVjaGFyZ2VJbmZvGAIgAygLMiouUmVj",
          "aGFyZ2VBY3Rpdml0eVBiLkZpcnN0UmVjaGFyZ2VJbmZvRW50cnkaMAoOQnV5",
          "TnVtTWFwRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARpK",
          "ChZGaXJzdFJlY2hhcmdlSW5mb0VudHJ5EgsKA2tleRgBIAEoBRIfCgV2YWx1",
          "ZRgCIAEoCzIQLkZpcnN0UmVjaGFyZ2VQYjoCOAEiSQoPRmlyc3RSZWNoYXJn",
          "ZVBiEhIKCnJlY2hhcmdlSWQYASABKAUSDwoHYnV5VGltZRgCIAEoAxIRCglk",
          "YXlTdGF0dXMYAyADKAUijQEKEFByaXZpbGVnZUNhcmRzUGISMwoJY2FyZElu",
          "Zm9zGAEgAygLMiAuUHJpdmlsZWdlQ2FyZHNQYi5DYXJkSW5mb3NFbnRyeRpE",
          "Cg5DYXJkSW5mb3NFbnRyeRILCgNrZXkYASABKAUSIQoFdmFsdWUYAiABKAsy",
          "Ei5Qcml2aWxlZ2VDYXJkSW5mbzoCOAEiagoRUHJpdmlsZWdlQ2FyZEluZm8S",
          "CgoCaWQYASABKAUSEAoIY2FyZFR5cGUYAiABKAUSEgoKZXhwaXJlVGltZRgD",
          "IAEoAxITCgt0b2RheVJld2FyZBgEIAEoBRIOCgZzdGF0dXMYBSABKAUiiAEK",
          "EFBsYXllclNob3BJbmZvUGISMwoJc2hvcEl0ZW1zGAEgAygLMiAuUGxheWVy",
          "U2hvcEluZm9QYi5TaG9wSXRlbXNFbnRyeRo/Cg5TaG9wSXRlbXNFbnRyeRIL",
          "CgNrZXkYASABKAUSHAoFdmFsdWUYAiABKAsyDS5QbGF5ZXJTaG9wUGI6AjgB",
          "Ij8KDFBsYXllclNob3BQYhIPCgdnb29kc0lkGAEgASgFEgsKA251bRgCIAEo",
          "BRIRCglmcmVzaFRpbWUYAyABKANCEwoPY29tLmNiLm1zZy5iZWFuUAFiBnBy",
          "b3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ErrorPb), global::ErrorPb.Parser, new[]{ "Code", "RedId", "ErrorCode", "ErrorMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MapIIPb), global::MapIIPb.Parser, new[]{ "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListIPb), global::ListIPb.Parser, new[]{ "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerPb), global::PlayerPb.Parser, new[]{ "Pid", "Account", "Combat", "EggByWeek", "VipLevel", "Level", "Exp", "Name", "Head", "GuildName", "GuildId", "GuildLeaveTime", "Integral", "Stage", "Sid", "LoginTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerExtraPb), global::PlayerExtraPb.Parser, new[]{ "OperationTimes", "LoginTime", "CreateTime", "ResAutoRtime", "Level5Time", "ResetDay", "JoinAllyCd", "UpdateName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CurTalent), global::CurTalent.Parser, new[]{ "CurTalent_" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::NoHandleEquip), global::NoHandleEquip.Parser, new[]{ "EquipMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerEquipsV2), global::PlayerEquipsV2.Parser, new[]{ "EquipMap", "DrawTimes", "AppearType", "Battle" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ItemPb), global::ItemPb.Parser, new[]{ "Items" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuidePb), global::GuidePb.Parser, new[]{ "Guide" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerTalents), global::PlayerTalents.Parser, new[]{ "Talents" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PTreasurePb), global::PTreasurePb.Parser, new[]{ "Srl", "Treasures" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PEquipPb), global::PEquipPb.Parser, new[]{ "CurEquip", "Equip" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PTreasureBookPb), global::PTreasureBookPb.Parser, new[]{ "Bookid", "Treasureid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PRoughPb), global::PRoughPb.Parser, new[]{ "Rough" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChapterRewardPb), global::ChapterRewardPb.Parser, new[]{ "GettedId", "UnlockId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BossPb), global::BossPb.Parser, new[]{ "BossId", "Times" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TalentPb), global::TalentPb.Parser, new[]{ "Id", "Lv", "IsCanUp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AttrPb), global::AttrPb.Parser, new[]{ "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::EquipV2Pb), global::EquipV2Pb.Parser, new[]{ "Id", "BattlePos", "Attr", "Level", "Grade", "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HatchPool), global::HatchPool.Parser, new[]{ "Level", "Exp", "AdvanceTime", "AdsCdEnd", "Times" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AccountPb), global::AccountPb.Parser, new[]{ "Pids" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::BoxSettingPb), global::BoxSettingPb.Parser, new[]{ "Quality", "Option1Att1", "Option1Att2", "Option2Att1", "Option2Att2", "OpenTimes", "RewardNotSat", "IfTicketFull", "KeepIfQuality", "AllAttrValueLarge" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferPb), global::OfferPb.Parser, new[]{ "Npc", "CatchTimes", "CatchCd", "RefreshCd", "RefreshTimes", "CatchTimesMax" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfferNpcPb), global::OfferNpcPb.Parser, new[]{ "Npcid", "Stage", "Star", "Attr", "Pos", "IsCatch", "QualityTabId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::MountsPb), global::MountsPb.Parser, new[]{ "Mounts", "CurMount", "Level", "Exp", "Step", "LevelId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HoleResPb), global::HoleResPb.Parser, new[]{ "Resid", "Level", "GatherTime", "GatherChild", "GatherPlayer", "State", "Pos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HolePb), global::HolePb.Parser, new[]{ "Id", "Name", "Head", "HoleRes" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::HoleLogPb), global::HoleLogPb.Parser, new[]{ "Id", "Time", "Type", "Resid", "ResLevel" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChildPb), global::ChildPb.Parser, new[]{ "Id", "State", "BindPlayer", "BindResPos", "ClientChild" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChildDetailPb), global::ChildDetailPb.Parser, new[]{ "Tired", "Childs" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientChildPb), global::ClientChildPb.Parser, new[]{ "ResId", "ResLv", "Gathertime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DailyRefreshPb), global::DailyRefreshPb.Parser, new[]{ "Time", "DailyNums", "AdResRTimes", "ItemResRCost", "RoughFreeTimes", "RoughNormalTimes", "RoughSpecialTimes", "ShopBuyTimes", "DevilBuyTimes", "EggReward", "ImmortalSceneOpTimes", "LaunchAllyHelp", "SurpriseBoxTimes", "EggByDay", "PoolItemRate", "TsRefreshTimes", "AdRewardTimes", "XyGitBagFreeTimes", "EveryDayGiftTimes", "DayRecharge", "DayRechargeReward", "OfferBuyTimes", "LimitTimeGiftCd", "CloudGiftTimes", "CloudPrivilegeGiftTestTime", "CloudPrivilegeGiftTestNum", "HumanSceneOpTimes" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, null, null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::WeekRefreshPb), global::WeekRefreshPb.Parser, new[]{ "Week", "Egg", "WeekGiftBuy", "DevilRankMailDay" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::TreasurePb), global::TreasurePb.Parser, new[]{ "Srl", "Id", "Step", "Level", "Grid", "Added" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoughPb), global::RoughPb.Parser, new[]{ "Srl", "Id", "Layer", "TreasureId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EquipPb), global::EquipPb.Parser, new[]{ "Srl", "Id", "Attr", "Grade", "Level" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::MinePb), global::MinePb.Parser, new[]{ "PutTreasure", "PutTime", "Rough", "Reward" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::MainTaskPb), global::MainTaskPb.Parser, new[]{ "Id", "Param1", "Param2", "State", "Ex1" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PTaskPb), global::PTaskPb.Parser, new[]{ "MainId", "TraceTask", "FinishTasks" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ScenePb), global::ScenePb.Parser, new[]{ "ImmortalScene", "Scene", "HumanScene", "RewardChapter", "HasReward" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AllyHelpPb), global::AllyHelpPb.Parser, new[]{ "Pid", "Name", "Helper", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AllyPb), global::AllyPb.Parser, new[]{ "Id", "Name", "JoinLv", "Num", "Lv", "Limit", "Notice", "Egg", "Members", "EggByDay", "EggTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AllyMemberInfoPb), global::AllyMemberInfoPb.Parser, new[]{ "Member" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::AllyMemberPb), global::AllyMemberPb.Parser, new[]{ "Pid", "Pos", "Level", "Head", "Name", "EggByWeek" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AllyMemberServerPb), global::AllyMemberServerPb.Parser, new[]{ "Pos", "Integral" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DevilPb), global::DevilPb.Parser, new[]{ "CanChallengeCd", "ChallengeTimes", "ChallengeTimesRecoverCd" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AllyRankPb), global::AllyRankPb.Parser, new[]{ "Sid", "Name", "Integral", "AllyId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SysMailPb), global::SysMailPb.Parser, new[]{ "Id", "SendTime", "TemplateId", "ExpireTime", "Title", "Content", "Reward", "Type" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::MailPb), global::MailPb.Parser, new[]{ "Id", "TemplateId", "SendTime", "ExpireTime", "Title", "Content", "Reward", "State", "From", "Type" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::SignPb), global::SignPb.Parser, new[]{ "Day", "SignTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerPb), global::TowerPb.Parser, new[]{ "BossId", "QuickPassRewardId", "TowerBuff", "MaxId", "RandomBuffMax", "BuffIds", "IsFirstDay", "Seed" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::TowerBuffPb), global::TowerBuffPb.Parser, new[]{ "BuffId", "Level" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ActivityPb), global::ActivityPb.Parser, new[]{ "XyBuyIds", "XyCd", "WelfareId", "CloudPrivilegeGiftEndTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AccountPlayerPb), global::AccountPlayerPb.Parser, new[]{ "Account", "Name", "Level", "Sid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FundPb), global::FundPb.Parser, new[]{ "FundUnlockId", "Fund" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ArreyPb), global::ArreyPb.Parser, new[]{ "Id", "Funes", "Added" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PArreyPb), global::PArreyPb.Parser, new[]{ "CurArrey", "AllArrey" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::FunePb), global::FunePb.Parser, new[]{ "Srl", "Id", "Attr", "Level", "BindArrey" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PFunePb), global::PFunePb.Parser, new[]{ "Fune" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::CloudToolPb), global::CloudToolPb.Parser, new[]{ "UpId", "SuccinctAttr", "Attr", "StepTask", "ToolId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::MaterialPb), global::MaterialPb.Parser, new[]{ "Id", "Attr", "Looks" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::CloudDailyTaskPb), global::CloudDailyTaskPb.Parser, new[]{ "Id", "Level", "Progress", "Isreward", "Srl" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CloudMapTaskPb), global::CloudMapTaskPb.Parser, new[]{ "Progress" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::CloudBasePb), global::CloudBasePb.Parser, new[]{ "Mapid", "MaxMapId", "PavLevel", "CloudCd", "PavGrid", "PavLevelCd", "PavAdCd", "MatLooksMax", "BattleId", "BattleState" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PCloudDailyTaskPb), global::PCloudDailyTaskPb.Parser, new[]{ "Tasks" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PMaterialPb), global::PMaterialPb.Parser, new[]{ "Mat" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PCloudToolPb), global::PCloudToolPb.Parser, new[]{ "Tools" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerPartnerPb), global::PlayerPartnerPb.Parser, new[]{ "Partners", "PartnerChips", "FreeDrawTime", "Trammels", "PosList", "DrawTotalNum", "IntegralNum" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PartnerPb), global::PartnerPb.Parser, new[]{ "ConfigId", "Level", "Attr", "SkillLeve" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PartnerPosInfoPb), global::PartnerPosInfoPb.Parser, new[]{ "PosId", "ConfigId", "IsOpen" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PartnerTrammelsPb), global::PartnerTrammelsPb.Parser, new[]{ "ConfigId", "Level", "Attr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerSacredVesselsPb), global::PlayerSacredVesselsPb.Parser, new[]{ "SacredVessels", "Chips", "Books", "PutOnConfigId", "EliteNum", "FreeNum", "FreeTime", "Records" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::SacredVesselsPb), global::SacredVesselsPb.Parser, new[]{ "ConfigId", "Level", "Attr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SacredVesselsBookPb), global::SacredVesselsBookPb.Parser, new[]{ "ConfigId", "Attr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SacredVesselsRecordPb), global::SacredVesselsRecordPb.Parser, new[]{ "ConfigId", "EliteNum", "Time" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerPetPb), global::PlayerPetPb.Parser, new[]{ "FreeGridNum", "DiamondGridNum", "PetMap", "OnBattlePetId", "ShopPets", "RefreshShopNum", "OpenCheerNum", "TmpPetId", "TmpPassiveSkills", "OwnPetList", "TrammelsId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ShopPetPb), global::ShopPetPb.Parser, new[]{ "PetList", "BuyPetIds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetPb), global::PetPb.Parser, new[]{ "Id", "ConfigId", "Level", "Grade", "Star", "Skill", "PassiveSkills", "IsLock", "Cheers", "BooleLevel", "BloodPassiveSkillNum" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PetSkillPb), global::PetSkillPb.Parser, new[]{ "SkillId", "Level", "Key" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SysUnlockPb), global::SysUnlockPb.Parser, new[]{ "Unlocks" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerFriendPb), global::PlayerFriendPb.Parser, new[]{ "Friends", "Power", "LastCalTime" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::FriendPb), global::FriendPb.Parser, new[]{ "ConfigId", "Level", "IsUnlock", "PassBoses", "Exp" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerStageTaskInfo), global::PlayerStageTaskInfo.Parser, new[]{ "TaskStatuss" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerPb), global::ServerPb.Parser, new[]{ "Id", "IsNew", "Url", "StartTime", "Status", "ImportWeight", "CrossId", "IsHot" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServersPb), global::ServersPb.Parser, new[]{ "ServerList", "MyList" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerOverInfoPb), global::PlayerOverInfoPb.Parser, new[]{ "Pid", "Name", "Avatar", "Stage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChatPb), global::ChatPb.Parser, new[]{ "Id", "Channel", "Msg", "Dateline", "PlayerOverInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChatPbs), global::ChatPbs.Parser, new[]{ "ChatPbList" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChatRecordPb), global::ChatRecordPb.Parser, new[]{ "RecordList" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChallengeInfoPb), global::ChallengeInfoPb.Parser, new[]{ "FieldBossId", "Seed" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlatformUserPb), global::PlatformUserPb.Parser, new[]{ "UserId", "Country", "Lang", "Currency", "IsCreateRole", "Servers", "LastLoginServer", "LoginNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerMiniInfoPb), global::PlayerMiniInfoPb.Parser, new[]{ "Pid", "Level", "Head", "Name", "Attr", "CurMount", "BattlePet", "Partners", "Equips", "Objs" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::CommonObjInfoPb), global::CommonObjInfoPb.Parser, new[]{ "Type", "ConfId", "Level" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpPlayerInfoPb), global::PvpPlayerInfoPb.Parser, new[]{ "RankIdList", "Integral" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerRankInfoPb), global::PlayerRankInfoPb.Parser, new[]{ "PId", "Level", "Head", "Name", "Integral", "Pos", "AllyName", "SId", "Combat", "Rank", "IsRobot" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerInformationPb), global::PlayerInformationPb.Parser, new[]{ "PId", "Name", "Head", "Realm", "Level", "Sd", "Integral", "Pos", "AllyName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PartnerPvpPb), global::PartnerPvpPb.Parser, new[]{ "ConfigId", "Level", "SkillLevel", "Pos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpPlayerPb), global::PvpPlayerPb.Parser, new[]{ "Pid", "Level", "Head", "AllyName", "Integral", "PName", "Attr", "IsRobot", "CurMount", "BattlePet", "Partners" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PvpLogPb), global::PvpLogPb.Parser, new[]{ "Pid", "Level", "Head", "PName", "Time", "Result", "Integral", "IsRevenge", "Combat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildRecordsPb), global::GuildRecordsPb.Parser, new[]{ "Name", "BossId", "BossDamage", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildPb), global::GuildPb.Parser, new[]{ "Id", "Name", "Level", "Exp", "Notice", "BadgeId", "CreatTime", "AllowAutoJoin", "JoinMinLevel", "Order", "MemberIds", "Combat", "Rank", "Applies", "AssisMap", "Boss", "TodayJoinNumber", "PresidentName" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildMemberPb), global::GuildMemberPb.Parser, new[]{ "Id", "Name", "Level", "DutiesId", "Head", "Exp", "GuildId", "Combat", "IsOnline", "LoginTime", "TodayContribution", "HisContribution", "BossHurtReward", "CrusadeReward", "NumReward" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildApplyPb), global::GuildApplyPb.Parser, new[]{ "Id", "PId", "GuildId", "ApplyTime", "Combat", "Name", "Head" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildAssistPb), global::GuildAssistPb.Parser, new[]{ "PlayerId", "GuildId", "CrateTime", "PoolLvl", "AssistPlayers", "Name" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildApplyPlayerPb), global::GuildApplyPlayerPb.Parser, new[]{ "Applies" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildAssistPbPlayerPb), global::GuildAssistPbPlayerPb.Parser, new[]{ "Assis" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossPb), global::GuildBossPb.Parser, new[]{ "Id", "AccumulatedDamage", "PlayerDamages", "TotalBattleNum", "Hp", "BossReward", "Records" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildBossRewardPb), global::GuildBossRewardPb.Parser, new[]{ "CrusadeReward", "NumReward" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::GuildPlayerPb), global::GuildPlayerPb.Parser, new[]{ "Applies", "InitiateAssists" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GmInfoPb), global::GmInfoPb.Parser, new[]{ "Module", "ErrorMsg", "Items", "Partners", "PartnerChips", "Mounts", "OwnPetList", "SacredVessels", "Friend" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::RechargeActivityPb), global::RechargeActivityPb.Parser, new[]{ "BuyNumMap", "FirstRechargeInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::FirstRechargePb), global::FirstRechargePb.Parser, new[]{ "RechargeId", "BuyTime", "DayStatus" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PrivilegeCardsPb), global::PrivilegeCardsPb.Parser, new[]{ "CardInfos" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PrivilegeCardInfo), global::PrivilegeCardInfo.Parser, new[]{ "Id", "CardType", "ExpireTime", "TodayReward", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerShopInfoPb), global::PlayerShopInfoPb.Parser, new[]{ "ShopItems" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerShopPb), global::PlayerShopPb.Parser, new[]{ "GoodsId", "Num", "FreshTime" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ErrorPb : pb::IMessage<ErrorPb> {
  private static readonly pb::MessageParser<ErrorPb> _parser = new pb::MessageParser<ErrorPb>(() => new ErrorPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ErrorPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ErrorPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ErrorPb(ErrorPb other) : this() {
    code_ = other.code_;
    redId_ = other.redId_;
    errorCode_ = other.errorCode_;
    errorMsg_ = other.errorMsg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ErrorPb Clone() {
    return new ErrorPb(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private int code_;
  /// <summary>
  ///成功：0  
  ///失败：1 
  ///重新登录(连接有效，但是要重新登录)：2  
  ///永久关闭连接 （连接无效了，不要重连,例如非法连接，黑名单，被顶号....）3  
  ///失败订单 (1. 重复orderid请求  2.逻辑或者配置表错误 ，3.无效orderid等, 4.非法请求... 客户端需要取消补单逻辑)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Code {
    get { return code_; }
    set {
      code_ = value;
    }
  }

  /// <summary>Field number for the "redId" field.</summary>
  public const int RedIdFieldNumber = 2;
  private int redId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RedId {
    get { return redId_; }
    set {
      redId_ = value;
    }
  }

  /// <summary>Field number for the "errorCode" field.</summary>
  public const int ErrorCodeFieldNumber = 3;
  private int errorCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ErrorCode {
    get { return errorCode_; }
    set {
      errorCode_ = value;
    }
  }

  /// <summary>Field number for the "errorMsg" field.</summary>
  public const int ErrorMsgFieldNumber = 4;
  private string errorMsg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMsg {
    get { return errorMsg_; }
    set {
      errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ErrorPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ErrorPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (RedId != other.RedId) return false;
    if (ErrorCode != other.ErrorCode) return false;
    if (ErrorMsg != other.ErrorMsg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Code != 0) hash ^= Code.GetHashCode();
    if (RedId != 0) hash ^= RedId.GetHashCode();
    if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
    if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Code != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (RedId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(RedId);
    }
    if (ErrorCode != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ErrorCode);
    }
    if (ErrorMsg.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(ErrorMsg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Code != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (RedId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RedId);
    }
    if (ErrorCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
    }
    if (ErrorMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ErrorPb other) {
    if (other == null) {
      return;
    }
    if (other.Code != 0) {
      Code = other.Code;
    }
    if (other.RedId != 0) {
      RedId = other.RedId;
    }
    if (other.ErrorCode != 0) {
      ErrorCode = other.ErrorCode;
    }
    if (other.ErrorMsg.Length != 0) {
      ErrorMsg = other.ErrorMsg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 16: {
          RedId = input.ReadInt32();
          break;
        }
        case 24: {
          ErrorCode = input.ReadInt32();
          break;
        }
        case 34: {
          ErrorMsg = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///基本数据类型 
/// </summary>
public sealed partial class MapIIPb : pb::IMessage<MapIIPb> {
  private static readonly pb::MessageParser<MapIIPb> _parser = new pb::MessageParser<MapIIPb>(() => new MapIIPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MapIIPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MapIIPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MapIIPb(MapIIPb other) : this() {
    data_ = other.data_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MapIIPb Clone() {
    return new MapIIPb(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_data_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> data_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Data {
    get { return data_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MapIIPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MapIIPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Data.Equals(other.Data)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    data_.WriteTo(output, _map_data_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += data_.CalculateSize(_map_data_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MapIIPb other) {
    if (other == null) {
      return;
    }
    data_.Add(other.data_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          data_.AddEntriesFrom(input, _map_data_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///基本数据类型 
/// </summary>
public sealed partial class ListIPb : pb::IMessage<ListIPb> {
  private static readonly pb::MessageParser<ListIPb> _parser = new pb::MessageParser<ListIPb>(() => new ListIPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ListIPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListIPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListIPb(ListIPb other) : this() {
    data_ = other.data_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ListIPb Clone() {
    return new ListIPb(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_data_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> data_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Data {
    get { return data_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ListIPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ListIPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!data_.Equals(other.data_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= data_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    data_.WriteTo(output, _repeated_data_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += data_.CalculateSize(_repeated_data_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ListIPb other) {
    if (other == null) {
      return;
    }
    data_.Add(other.data_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          data_.AddEntriesFrom(input, _repeated_data_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerPb : pb::IMessage<PlayerPb> {
  private static readonly pb::MessageParser<PlayerPb> _parser = new pb::MessageParser<PlayerPb>(() => new PlayerPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPb(PlayerPb other) : this() {
    pid_ = other.pid_;
    account_ = other.account_;
    combat_ = other.combat_;
    eggByWeek_ = other.eggByWeek_;
    vipLevel_ = other.vipLevel_;
    level_ = other.level_;
    exp_ = other.exp_;
    name_ = other.name_;
    head_ = other.head_;
    guildName_ = other.guildName_;
    guildId_ = other.guildId_;
    guildLeaveTime_ = other.guildLeaveTime_;
    integral_ = other.integral_;
    stage_ = other.stage_;
    sid_ = other.sid_;
    loginTime_ = other.loginTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPb Clone() {
    return new PlayerPb(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 2;
  private string account_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "combat" field.</summary>
  public const int CombatFieldNumber = 3;
  private long combat_;
  /// <summary>
  /// 战力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Combat {
    get { return combat_; }
    set {
      combat_ = value;
    }
  }

  /// <summary>Field number for the "eggByWeek" field.</summary>
  public const int EggByWeekFieldNumber = 4;
  private int eggByWeek_;
  /// <summary>
  ///冗余，方便仙盟成员查询
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EggByWeek {
    get { return eggByWeek_; }
    set {
      eggByWeek_ = value;
    }
  }

  /// <summary>Field number for the "vipLevel" field.</summary>
  public const int VipLevelFieldNumber = 5;
  private int vipLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VipLevel {
    get { return vipLevel_; }
    set {
      vipLevel_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 6;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 7;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 11;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "head" field.</summary>
  public const int HeadFieldNumber = 12;
  private string head_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Head {
    get { return head_; }
    set {
      head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "guildName" field.</summary>
  public const int GuildNameFieldNumber = 15;
  private string guildName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GuildName {
    get { return guildName_; }
    set {
      guildName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "guildId" field.</summary>
  public const int GuildIdFieldNumber = 16;
  private int guildId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuildId {
    get { return guildId_; }
    set {
      guildId_ = value;
    }
  }

  /// <summary>Field number for the "guildLeaveTime" field.</summary>
  public const int GuildLeaveTimeFieldNumber = 17;
  private long guildLeaveTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long GuildLeaveTime {
    get { return guildLeaveTime_; }
    set {
      guildLeaveTime_ = value;
    }
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 18;
  private int integral_;
  /// <summary>
  ///冗余，方便排行榜查询，伐魔积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  /// <summary>Field number for the "stage" field.</summary>
  public const int StageFieldNumber = 19;
  private int stage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stage {
    get { return stage_; }
    set {
      stage_ = value;
    }
  }

  /// <summary>Field number for the "sid" field.</summary>
  public const int SidFieldNumber = 20;
  private int sid_;
  /// <summary>
  ///服务器ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sid {
    get { return sid_; }
    set {
      sid_ = value;
    }
  }

  /// <summary>Field number for the "loginTime" field.</summary>
  public const int LoginTimeFieldNumber = 21;
  private long loginTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LoginTime {
    get { return loginTime_; }
    set {
      loginTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Account != other.Account) return false;
    if (Combat != other.Combat) return false;
    if (EggByWeek != other.EggByWeek) return false;
    if (VipLevel != other.VipLevel) return false;
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    if (Name != other.Name) return false;
    if (Head != other.Head) return false;
    if (GuildName != other.GuildName) return false;
    if (GuildId != other.GuildId) return false;
    if (GuildLeaveTime != other.GuildLeaveTime) return false;
    if (Integral != other.Integral) return false;
    if (Stage != other.Stage) return false;
    if (Sid != other.Sid) return false;
    if (LoginTime != other.LoginTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (Combat != 0L) hash ^= Combat.GetHashCode();
    if (EggByWeek != 0) hash ^= EggByWeek.GetHashCode();
    if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Head.Length != 0) hash ^= Head.GetHashCode();
    if (GuildName.Length != 0) hash ^= GuildName.GetHashCode();
    if (GuildId != 0) hash ^= GuildId.GetHashCode();
    if (GuildLeaveTime != 0L) hash ^= GuildLeaveTime.GetHashCode();
    if (Integral != 0) hash ^= Integral.GetHashCode();
    if (Stage != 0) hash ^= Stage.GetHashCode();
    if (Sid != 0) hash ^= Sid.GetHashCode();
    if (LoginTime != 0L) hash ^= LoginTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Account.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Account);
    }
    if (Combat != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(Combat);
    }
    if (EggByWeek != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(EggByWeek);
    }
    if (VipLevel != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(VipLevel);
    }
    if (Level != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Exp);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(Name);
    }
    if (Head.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(Head);
    }
    if (GuildName.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(GuildName);
    }
    if (GuildId != 0) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(GuildId);
    }
    if (GuildLeaveTime != 0L) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(GuildLeaveTime);
    }
    if (Integral != 0) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(Integral);
    }
    if (Stage != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(Stage);
    }
    if (Sid != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(Sid);
    }
    if (LoginTime != 0L) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(LoginTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (Combat != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Combat);
    }
    if (EggByWeek != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EggByWeek);
    }
    if (VipLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VipLevel);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Head.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
    }
    if (GuildName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GuildName);
    }
    if (GuildId != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
    }
    if (GuildLeaveTime != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(GuildLeaveTime);
    }
    if (Integral != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    if (Stage != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Stage);
    }
    if (Sid != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Sid);
    }
    if (LoginTime != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LoginTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerPb other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.Combat != 0L) {
      Combat = other.Combat;
    }
    if (other.EggByWeek != 0) {
      EggByWeek = other.EggByWeek;
    }
    if (other.VipLevel != 0) {
      VipLevel = other.VipLevel;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Head.Length != 0) {
      Head = other.Head;
    }
    if (other.GuildName.Length != 0) {
      GuildName = other.GuildName;
    }
    if (other.GuildId != 0) {
      GuildId = other.GuildId;
    }
    if (other.GuildLeaveTime != 0L) {
      GuildLeaveTime = other.GuildLeaveTime;
    }
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
    if (other.Stage != 0) {
      Stage = other.Stage;
    }
    if (other.Sid != 0) {
      Sid = other.Sid;
    }
    if (other.LoginTime != 0L) {
      LoginTime = other.LoginTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 18: {
          Account = input.ReadString();
          break;
        }
        case 24: {
          Combat = input.ReadInt64();
          break;
        }
        case 32: {
          EggByWeek = input.ReadInt32();
          break;
        }
        case 40: {
          VipLevel = input.ReadInt32();
          break;
        }
        case 48: {
          Level = input.ReadInt32();
          break;
        }
        case 56: {
          Exp = input.ReadInt32();
          break;
        }
        case 90: {
          Name = input.ReadString();
          break;
        }
        case 98: {
          Head = input.ReadString();
          break;
        }
        case 122: {
          GuildName = input.ReadString();
          break;
        }
        case 128: {
          GuildId = input.ReadInt32();
          break;
        }
        case 136: {
          GuildLeaveTime = input.ReadInt64();
          break;
        }
        case 144: {
          Integral = input.ReadInt32();
          break;
        }
        case 152: {
          Stage = input.ReadInt32();
          break;
        }
        case 160: {
          Sid = input.ReadInt32();
          break;
        }
        case 168: {
          LoginTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerExtraPb : pb::IMessage<PlayerExtraPb> {
  private static readonly pb::MessageParser<PlayerExtraPb> _parser = new pb::MessageParser<PlayerExtraPb>(() => new PlayerExtraPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerExtraPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerExtraPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerExtraPb(PlayerExtraPb other) : this() {
    operationTimes_ = other.operationTimes_;
    loginTime_ = other.loginTime_;
    createTime_ = other.createTime_;
    resAutoRtime_ = other.resAutoRtime_;
    level5Time_ = other.level5Time_;
    resetDay_ = other.resetDay_;
    joinAllyCd_ = other.joinAllyCd_;
    updateName_ = other.updateName_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerExtraPb Clone() {
    return new PlayerExtraPb(this);
  }

  /// <summary>Field number for the "operationTimes" field.</summary>
  public const int OperationTimesFieldNumber = 1;
  private int operationTimes_;
  /// <summary>
  ///扫荡次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OperationTimes {
    get { return operationTimes_; }
    set {
      operationTimes_ = value;
    }
  }

  /// <summary>Field number for the "loginTime" field.</summary>
  public const int LoginTimeFieldNumber = 2;
  private int loginTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LoginTime {
    get { return loginTime_; }
    set {
      loginTime_ = value;
    }
  }

  /// <summary>Field number for the "createTime" field.</summary>
  public const int CreateTimeFieldNumber = 3;
  private int createTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CreateTime {
    get { return createTime_; }
    set {
      createTime_ = value;
    }
  }

  /// <summary>Field number for the "resAutoRtime" field.</summary>
  public const int ResAutoRtimeFieldNumber = 4;
  private int resAutoRtime_;
  /// <summary>
  ///资源自动刷新时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResAutoRtime {
    get { return resAutoRtime_; }
    set {
      resAutoRtime_ = value;
    }
  }

  /// <summary>Field number for the "level5Time" field.</summary>
  public const int Level5TimeFieldNumber = 5;
  private int level5Time_;
  /// <summary>
  ///升第5级的时间，7日签到活动从这个time开始倒计时
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level5Time {
    get { return level5Time_; }
    set {
      level5Time_ = value;
    }
  }

  /// <summary>Field number for the "resetDay" field.</summary>
  public const int ResetDayFieldNumber = 6;
  private int resetDay_;
  /// <summary>
  ///重置day 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResetDay {
    get { return resetDay_; }
    set {
      resetDay_ = value;
    }
  }

  /// <summary>Field number for the "joinAllyCd" field.</summary>
  public const int JoinAllyCdFieldNumber = 7;
  private int joinAllyCd_;
  /// <summary>
  ///重新进入仙盟的cd 退出后2h
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int JoinAllyCd {
    get { return joinAllyCd_; }
    set {
      joinAllyCd_ = value;
    }
  }

  /// <summary>Field number for the "updateName" field.</summary>
  public const int UpdateNameFieldNumber = 8;
  private bool updateName_;
  /// <summary>
  ///是否改过名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool UpdateName {
    get { return updateName_; }
    set {
      updateName_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerExtraPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerExtraPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OperationTimes != other.OperationTimes) return false;
    if (LoginTime != other.LoginTime) return false;
    if (CreateTime != other.CreateTime) return false;
    if (ResAutoRtime != other.ResAutoRtime) return false;
    if (Level5Time != other.Level5Time) return false;
    if (ResetDay != other.ResetDay) return false;
    if (JoinAllyCd != other.JoinAllyCd) return false;
    if (UpdateName != other.UpdateName) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OperationTimes != 0) hash ^= OperationTimes.GetHashCode();
    if (LoginTime != 0) hash ^= LoginTime.GetHashCode();
    if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
    if (ResAutoRtime != 0) hash ^= ResAutoRtime.GetHashCode();
    if (Level5Time != 0) hash ^= Level5Time.GetHashCode();
    if (ResetDay != 0) hash ^= ResetDay.GetHashCode();
    if (JoinAllyCd != 0) hash ^= JoinAllyCd.GetHashCode();
    if (UpdateName != false) hash ^= UpdateName.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OperationTimes != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(OperationTimes);
    }
    if (LoginTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LoginTime);
    }
    if (CreateTime != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CreateTime);
    }
    if (ResAutoRtime != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ResAutoRtime);
    }
    if (Level5Time != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Level5Time);
    }
    if (ResetDay != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(ResetDay);
    }
    if (JoinAllyCd != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(JoinAllyCd);
    }
    if (UpdateName != false) {
      output.WriteRawTag(64);
      output.WriteBool(UpdateName);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OperationTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperationTimes);
    }
    if (LoginTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginTime);
    }
    if (CreateTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateTime);
    }
    if (ResAutoRtime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResAutoRtime);
    }
    if (Level5Time != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level5Time);
    }
    if (ResetDay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResetDay);
    }
    if (JoinAllyCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinAllyCd);
    }
    if (UpdateName != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerExtraPb other) {
    if (other == null) {
      return;
    }
    if (other.OperationTimes != 0) {
      OperationTimes = other.OperationTimes;
    }
    if (other.LoginTime != 0) {
      LoginTime = other.LoginTime;
    }
    if (other.CreateTime != 0) {
      CreateTime = other.CreateTime;
    }
    if (other.ResAutoRtime != 0) {
      ResAutoRtime = other.ResAutoRtime;
    }
    if (other.Level5Time != 0) {
      Level5Time = other.Level5Time;
    }
    if (other.ResetDay != 0) {
      ResetDay = other.ResetDay;
    }
    if (other.JoinAllyCd != 0) {
      JoinAllyCd = other.JoinAllyCd;
    }
    if (other.UpdateName != false) {
      UpdateName = other.UpdateName;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          OperationTimes = input.ReadInt32();
          break;
        }
        case 16: {
          LoginTime = input.ReadInt32();
          break;
        }
        case 24: {
          CreateTime = input.ReadInt32();
          break;
        }
        case 32: {
          ResAutoRtime = input.ReadInt32();
          break;
        }
        case 40: {
          Level5Time = input.ReadInt32();
          break;
        }
        case 48: {
          ResetDay = input.ReadInt32();
          break;
        }
        case 56: {
          JoinAllyCd = input.ReadInt32();
          break;
        }
        case 64: {
          UpdateName = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
///当前天赋
/// </summary>
public sealed partial class CurTalent : pb::IMessage<CurTalent> {
  private static readonly pb::MessageParser<CurTalent> _parser = new pb::MessageParser<CurTalent>(() => new CurTalent());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CurTalent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurTalent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurTalent(CurTalent other) : this() {
    curTalent_ = other.curTalent_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurTalent Clone() {
    return new CurTalent(this);
  }

  /// <summary>Field number for the "curTalent" field.</summary>
  public const int CurTalent_FieldNumber = 24;
  private static readonly pbc::MapField<int, int>.Codec _map_curTalent_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 194);
  private readonly pbc::MapField<int, int> curTalent_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> CurTalent_ {
    get { return curTalent_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CurTalent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CurTalent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!CurTalent_.Equals(other.CurTalent_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= CurTalent_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    curTalent_.WriteTo(output, _map_curTalent_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += curTalent_.CalculateSize(_map_curTalent_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CurTalent other) {
    if (other == null) {
      return;
    }
    curTalent_.Add(other.curTalent_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 194: {
          curTalent_.AddEntriesFrom(input, _map_curTalent_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class NoHandleEquip : pb::IMessage<NoHandleEquip> {
  private static readonly pb::MessageParser<NoHandleEquip> _parser = new pb::MessageParser<NoHandleEquip>(() => new NoHandleEquip());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NoHandleEquip> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NoHandleEquip() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NoHandleEquip(NoHandleEquip other) : this() {
    equipMap_ = other.equipMap_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NoHandleEquip Clone() {
    return new NoHandleEquip(this);
  }

  /// <summary>Field number for the "equipMap" field.</summary>
  public const int EquipMapFieldNumber = 1;
  private static readonly pbc::MapField<int, global::EquipV2Pb>.Codec _map_equipMap_codec
      = new pbc::MapField<int, global::EquipV2Pb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::EquipV2Pb.Parser), 10);
  private readonly pbc::MapField<int, global::EquipV2Pb> equipMap_ = new pbc::MapField<int, global::EquipV2Pb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::EquipV2Pb> EquipMap {
    get { return equipMap_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NoHandleEquip);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NoHandleEquip other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!EquipMap.Equals(other.EquipMap)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= EquipMap.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    equipMap_.WriteTo(output, _map_equipMap_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += equipMap_.CalculateSize(_map_equipMap_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NoHandleEquip other) {
    if (other == null) {
      return;
    }
    equipMap_.Add(other.equipMap_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          equipMap_.AddEntriesFrom(input, _map_equipMap_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerEquipsV2 : pb::IMessage<PlayerEquipsV2> {
  private static readonly pb::MessageParser<PlayerEquipsV2> _parser = new pb::MessageParser<PlayerEquipsV2>(() => new PlayerEquipsV2());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerEquipsV2> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerEquipsV2() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerEquipsV2(PlayerEquipsV2 other) : this() {
    equipMap_ = other.equipMap_.Clone();
    drawTimes_ = other.drawTimes_;
    appearType_ = other.appearType_.Clone();
    battle_ = other.battle_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerEquipsV2 Clone() {
    return new PlayerEquipsV2(this);
  }

  /// <summary>Field number for the "equipMap" field.</summary>
  public const int EquipMapFieldNumber = 1;
  private static readonly pbc::MapField<int, global::EquipV2Pb>.Codec _map_equipMap_codec
      = new pbc::MapField<int, global::EquipV2Pb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::EquipV2Pb.Parser), 10);
  private readonly pbc::MapField<int, global::EquipV2Pb> equipMap_ = new pbc::MapField<int, global::EquipV2Pb>();
  /// <summary>
  ///宠物 (key:type,value:pet)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::EquipV2Pb> EquipMap {
    get { return equipMap_; }
  }

  /// <summary>Field number for the "drawTimes" field.</summary>
  public const int DrawTimesFieldNumber = 2;
  private int drawTimes_;
  /// <summary>
  ///服务器用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DrawTimes {
    get { return drawTimes_; }
    set {
      drawTimes_ = value;
    }
  }

  /// <summary>Field number for the "appearType" field.</summary>
  public const int AppearTypeFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_appearType_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> appearType_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///服务器用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> AppearType {
    get { return appearType_; }
  }

  /// <summary>Field number for the "battle" field.</summary>
  public const int BattleFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_battle_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> battle_ = new pbc::MapField<int, int>();
  /// <summary>
  ///(key:battlepos,value:type)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Battle {
    get { return battle_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerEquipsV2);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerEquipsV2 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!EquipMap.Equals(other.EquipMap)) return false;
    if (DrawTimes != other.DrawTimes) return false;
    if(!appearType_.Equals(other.appearType_)) return false;
    if (!Battle.Equals(other.Battle)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= EquipMap.GetHashCode();
    if (DrawTimes != 0) hash ^= DrawTimes.GetHashCode();
    hash ^= appearType_.GetHashCode();
    hash ^= Battle.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    equipMap_.WriteTo(output, _map_equipMap_codec);
    if (DrawTimes != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DrawTimes);
    }
    appearType_.WriteTo(output, _repeated_appearType_codec);
    battle_.WriteTo(output, _map_battle_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += equipMap_.CalculateSize(_map_equipMap_codec);
    if (DrawTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawTimes);
    }
    size += appearType_.CalculateSize(_repeated_appearType_codec);
    size += battle_.CalculateSize(_map_battle_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerEquipsV2 other) {
    if (other == null) {
      return;
    }
    equipMap_.Add(other.equipMap_);
    if (other.DrawTimes != 0) {
      DrawTimes = other.DrawTimes;
    }
    appearType_.Add(other.appearType_);
    battle_.Add(other.battle_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          equipMap_.AddEntriesFrom(input, _map_equipMap_codec);
          break;
        }
        case 16: {
          DrawTimes = input.ReadInt32();
          break;
        }
        case 26:
        case 24: {
          appearType_.AddEntriesFrom(input, _repeated_appearType_codec);
          break;
        }
        case 34: {
          battle_.AddEntriesFrom(input, _map_battle_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ItemPb : pb::IMessage<ItemPb> {
  private static readonly pb::MessageParser<ItemPb> _parser = new pb::MessageParser<ItemPb>(() => new ItemPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ItemPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ItemPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ItemPb(ItemPb other) : this() {
    items_ = other.items_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ItemPb Clone() {
    return new ItemPb(this);
  }

  /// <summary>Field number for the "items" field.</summary>
  public const int ItemsFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_items_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> items_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Items {
    get { return items_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ItemPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ItemPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Items.Equals(other.Items)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Items.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    items_.WriteTo(output, _map_items_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += items_.CalculateSize(_map_items_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ItemPb other) {
    if (other == null) {
      return;
    }
    items_.Add(other.items_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          items_.AddEntriesFrom(input, _map_items_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GuidePb : pb::IMessage<GuidePb> {
  private static readonly pb::MessageParser<GuidePb> _parser = new pb::MessageParser<GuidePb>(() => new GuidePb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuidePb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuidePb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuidePb(GuidePb other) : this() {
    guide_ = other.guide_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuidePb Clone() {
    return new GuidePb(this);
  }

  /// <summary>Field number for the "guide" field.</summary>
  public const int GuideFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_guide_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> guide_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Guide {
    get { return guide_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuidePb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuidePb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!guide_.Equals(other.guide_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= guide_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    guide_.WriteTo(output, _repeated_guide_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += guide_.CalculateSize(_repeated_guide_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuidePb other) {
    if (other == null) {
      return;
    }
    guide_.Add(other.guide_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          guide_.AddEntriesFrom(input, _repeated_guide_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerTalents : pb::IMessage<PlayerTalents> {
  private static readonly pb::MessageParser<PlayerTalents> _parser = new pb::MessageParser<PlayerTalents>(() => new PlayerTalents());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerTalents> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerTalents() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerTalents(PlayerTalents other) : this() {
    talents_ = other.talents_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerTalents Clone() {
    return new PlayerTalents(this);
  }

  /// <summary>Field number for the "talents" field.</summary>
  public const int TalentsFieldNumber = 1;
  private static readonly pbc::MapField<int, global::TalentPb>.Codec _map_talents_codec
      = new pbc::MapField<int, global::TalentPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::TalentPb.Parser), 10);
  private readonly pbc::MapField<int, global::TalentPb> talents_ = new pbc::MapField<int, global::TalentPb>();
  /// <summary>
  ///key:talentId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::TalentPb> Talents {
    get { return talents_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerTalents);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerTalents other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Talents.Equals(other.Talents)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Talents.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    talents_.WriteTo(output, _map_talents_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += talents_.CalculateSize(_map_talents_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerTalents other) {
    if (other == null) {
      return;
    }
    talents_.Add(other.talents_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          talents_.AddEntriesFrom(input, _map_talents_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PTreasurePb : pb::IMessage<PTreasurePb> {
  private static readonly pb::MessageParser<PTreasurePb> _parser = new pb::MessageParser<PTreasurePb>(() => new PTreasurePb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PTreasurePb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PTreasurePb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PTreasurePb(PTreasurePb other) : this() {
    srl_ = other.srl_;
    treasures_ = other.treasures_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PTreasurePb Clone() {
    return new PTreasurePb(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  /// <summary>
  ///当前序号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "treasures" field.</summary>
  public const int TreasuresFieldNumber = 2;
  private static readonly pbc::MapField<int, global::TreasurePb>.Codec _map_treasures_codec
      = new pbc::MapField<int, global::TreasurePb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::TreasurePb.Parser), 18);
  private readonly pbc::MapField<int, global::TreasurePb> treasures_ = new pbc::MapField<int, global::TreasurePb>();
  /// <summary>
  ///所有法宝 srl,pb
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::TreasurePb> Treasures {
    get { return treasures_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PTreasurePb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PTreasurePb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    if (!Treasures.Equals(other.Treasures)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    hash ^= Treasures.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
    treasures_.WriteTo(output, _map_treasures_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    size += treasures_.CalculateSize(_map_treasures_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PTreasurePb other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    treasures_.Add(other.treasures_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
        case 18: {
          treasures_.AddEntriesFrom(input, _map_treasures_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家装备
/// </summary>
public sealed partial class PEquipPb : pb::IMessage<PEquipPb> {
  private static readonly pb::MessageParser<PEquipPb> _parser = new pb::MessageParser<PEquipPb>(() => new PEquipPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PEquipPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PEquipPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PEquipPb(PEquipPb other) : this() {
    curEquip_ = other.curEquip_.Clone();
    equip_ = other.equip_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PEquipPb Clone() {
    return new PEquipPb(this);
  }

  /// <summary>Field number for the "curEquip" field.</summary>
  public const int CurEquipFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_curEquip_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> curEquip_ = new pbc::MapField<int, int>();
  /// <summary>
  ///pos,srl 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> CurEquip {
    get { return curEquip_; }
  }

  /// <summary>Field number for the "equip" field.</summary>
  public const int EquipFieldNumber = 2;
  private static readonly pbc::MapField<int, global::EquipPb>.Codec _map_equip_codec
      = new pbc::MapField<int, global::EquipPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::EquipPb.Parser), 18);
  private readonly pbc::MapField<int, global::EquipPb> equip_ = new pbc::MapField<int, global::EquipPb>();
  /// <summary>
  /// srl,pb
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::EquipPb> Equip {
    get { return equip_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PEquipPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PEquipPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!CurEquip.Equals(other.CurEquip)) return false;
    if (!Equip.Equals(other.Equip)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= CurEquip.GetHashCode();
    hash ^= Equip.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    curEquip_.WriteTo(output, _map_curEquip_codec);
    equip_.WriteTo(output, _map_equip_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += curEquip_.CalculateSize(_map_curEquip_codec);
    size += equip_.CalculateSize(_map_equip_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PEquipPb other) {
    if (other == null) {
      return;
    }
    curEquip_.Add(other.curEquip_);
    equip_.Add(other.equip_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          curEquip_.AddEntriesFrom(input, _map_curEquip_codec);
          break;
        }
        case 18: {
          equip_.AddEntriesFrom(input, _map_equip_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家法宝图鉴
/// </summary>
public sealed partial class PTreasureBookPb : pb::IMessage<PTreasureBookPb> {
  private static readonly pb::MessageParser<PTreasureBookPb> _parser = new pb::MessageParser<PTreasureBookPb>(() => new PTreasureBookPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PTreasureBookPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PTreasureBookPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PTreasureBookPb(PTreasureBookPb other) : this() {
    bookid_ = other.bookid_.Clone();
    treasureid_ = other.treasureid_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PTreasureBookPb Clone() {
    return new PTreasureBookPb(this);
  }

  /// <summary>Field number for the "bookid" field.</summary>
  public const int BookidFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_bookid_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> bookid_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Bookid {
    get { return bookid_; }
  }

  /// <summary>Field number for the "treasureid" field.</summary>
  public const int TreasureidFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_treasureid_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> treasureid_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Treasureid {
    get { return treasureid_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PTreasureBookPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PTreasureBookPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!bookid_.Equals(other.bookid_)) return false;
    if(!treasureid_.Equals(other.treasureid_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= bookid_.GetHashCode();
    hash ^= treasureid_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    bookid_.WriteTo(output, _repeated_bookid_codec);
    treasureid_.WriteTo(output, _repeated_treasureid_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += bookid_.CalculateSize(_repeated_bookid_codec);
    size += treasureid_.CalculateSize(_repeated_treasureid_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PTreasureBookPb other) {
    if (other == null) {
      return;
    }
    bookid_.Add(other.bookid_);
    treasureid_.Add(other.treasureid_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          bookid_.AddEntriesFrom(input, _repeated_bookid_codec);
          break;
        }
        case 18:
        case 16: {
          treasureid_.AddEntriesFrom(input, _repeated_treasureid_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家原石
/// </summary>
public sealed partial class PRoughPb : pb::IMessage<PRoughPb> {
  private static readonly pb::MessageParser<PRoughPb> _parser = new pb::MessageParser<PRoughPb>(() => new PRoughPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PRoughPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRoughPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRoughPb(PRoughPb other) : this() {
    rough_ = other.rough_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRoughPb Clone() {
    return new PRoughPb(this);
  }

  /// <summary>Field number for the "rough" field.</summary>
  public const int RoughFieldNumber = 1;
  private static readonly pbc::MapField<int, global::RoughPb>.Codec _map_rough_codec
      = new pbc::MapField<int, global::RoughPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::RoughPb.Parser), 10);
  private readonly pbc::MapField<int, global::RoughPb> rough_ = new pbc::MapField<int, global::RoughPb>();
  /// <summary>
  ///所有原石 srl,pb
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::RoughPb> Rough {
    get { return rough_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PRoughPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PRoughPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Rough.Equals(other.Rough)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Rough.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    rough_.WriteTo(output, _map_rough_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += rough_.CalculateSize(_map_rough_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PRoughPb other) {
    if (other == null) {
      return;
    }
    rough_.Add(other.rough_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          rough_.AddEntriesFrom(input, _map_rough_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///章节奖励
/// </summary>
public sealed partial class ChapterRewardPb : pb::IMessage<ChapterRewardPb> {
  private static readonly pb::MessageParser<ChapterRewardPb> _parser = new pb::MessageParser<ChapterRewardPb>(() => new ChapterRewardPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChapterRewardPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterRewardPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterRewardPb(ChapterRewardPb other) : this() {
    gettedId_ = other.gettedId_;
    unlockId_ = other.unlockId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterRewardPb Clone() {
    return new ChapterRewardPb(this);
  }

  /// <summary>Field number for the "gettedId" field.</summary>
  public const int GettedIdFieldNumber = 1;
  private int gettedId_;
  /// <summary>
  ///已领章节id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GettedId {
    get { return gettedId_; }
    set {
      gettedId_ = value;
    }
  }

  /// <summary>Field number for the "unlockId" field.</summary>
  public const int UnlockIdFieldNumber = 2;
  private int unlockId_;
  /// <summary>
  ///已解锁章节id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UnlockId {
    get { return unlockId_; }
    set {
      unlockId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChapterRewardPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChapterRewardPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GettedId != other.GettedId) return false;
    if (UnlockId != other.UnlockId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GettedId != 0) hash ^= GettedId.GetHashCode();
    if (UnlockId != 0) hash ^= UnlockId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GettedId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GettedId);
    }
    if (UnlockId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UnlockId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GettedId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GettedId);
    }
    if (UnlockId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnlockId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChapterRewardPb other) {
    if (other == null) {
      return;
    }
    if (other.GettedId != 0) {
      GettedId = other.GettedId;
    }
    if (other.UnlockId != 0) {
      UnlockId = other.UnlockId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GettedId = input.ReadInt32();
          break;
        }
        case 16: {
          UnlockId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///野外boss
/// </summary>
public sealed partial class BossPb : pb::IMessage<BossPb> {
  private static readonly pb::MessageParser<BossPb> _parser = new pb::MessageParser<BossPb>(() => new BossPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BossPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BossPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BossPb(BossPb other) : this() {
    bossId_ = other.bossId_;
    times_ = other.times_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BossPb Clone() {
    return new BossPb(this);
  }

  /// <summary>Field number for the "bossId" field.</summary>
  public const int BossIdFieldNumber = 1;
  private int bossId_;
  /// <summary>
  ///当前可扫荡id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossId {
    get { return bossId_; }
    set {
      bossId_ = value;
    }
  }

  /// <summary>Field number for the "times" field.</summary>
  public const int TimesFieldNumber = 2;
  private int times_;
  /// <summary>
  ///扫荡次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Times {
    get { return times_; }
    set {
      times_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BossPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BossPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BossId != other.BossId) return false;
    if (Times != other.Times) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BossId != 0) hash ^= BossId.GetHashCode();
    if (Times != 0) hash ^= Times.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BossId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BossId);
    }
    if (Times != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Times);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
    }
    if (Times != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BossPb other) {
    if (other == null) {
      return;
    }
    if (other.BossId != 0) {
      BossId = other.BossId;
    }
    if (other.Times != 0) {
      Times = other.Times;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BossId = input.ReadInt32();
          break;
        }
        case 16: {
          Times = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///天赋
/// </summary>
public sealed partial class TalentPb : pb::IMessage<TalentPb> {
  private static readonly pb::MessageParser<TalentPb> _parser = new pb::MessageParser<TalentPb>(() => new TalentPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TalentPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TalentPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TalentPb(TalentPb other) : this() {
    id_ = other.id_;
    lv_ = other.lv_;
    isCanUp_ = other.isCanUp_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TalentPb Clone() {
    return new TalentPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "lv" field.</summary>
  public const int LvFieldNumber = 2;
  private int lv_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Lv {
    get { return lv_; }
    set {
      lv_ = value;
    }
  }

  /// <summary>Field number for the "isCanUp" field.</summary>
  public const int IsCanUpFieldNumber = 4;
  private int isCanUp_;
  /// <summary>
  ///0-不能升级 1-可以升级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsCanUp {
    get { return isCanUp_; }
    set {
      isCanUp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TalentPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TalentPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Lv != other.Lv) return false;
    if (IsCanUp != other.IsCanUp) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Lv != 0) hash ^= Lv.GetHashCode();
    if (IsCanUp != 0) hash ^= IsCanUp.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Lv != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Lv);
    }
    if (IsCanUp != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(IsCanUp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Lv != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
    }
    if (IsCanUp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsCanUp);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TalentPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Lv != 0) {
      Lv = other.Lv;
    }
    if (other.IsCanUp != 0) {
      IsCanUp = other.IsCanUp;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Lv = input.ReadInt32();
          break;
        }
        case 32: {
          IsCanUp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///属性
/// </summary>
public sealed partial class AttrPb : pb::IMessage<AttrPb> {
  private static readonly pb::MessageParser<AttrPb> _parser = new pb::MessageParser<AttrPb>(() => new AttrPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AttrPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AttrPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AttrPb(AttrPb other) : this() {
    data_ = other.data_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AttrPb Clone() {
    return new AttrPb(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private static readonly pbc::MapField<int, long>.Codec _map_data_codec
      = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt64(16), 10);
  private readonly pbc::MapField<int, long> data_ = new pbc::MapField<int, long>();
  /// <summary>
  ///属性id 属性值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, long> Data {
    get { return data_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AttrPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AttrPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Data.Equals(other.Data)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Data.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    data_.WriteTo(output, _map_data_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += data_.CalculateSize(_map_data_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AttrPb other) {
    if (other == null) {
      return;
    }
    data_.Add(other.data_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          data_.AddEntriesFrom(input, _map_data_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 宠物逻辑改为装备
/// </summary>
public sealed partial class EquipV2Pb : pb::IMessage<EquipV2Pb> {
  private static readonly pb::MessageParser<EquipV2Pb> _parser = new pb::MessageParser<EquipV2Pb>(() => new EquipV2Pb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EquipV2Pb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EquipV2Pb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EquipV2Pb(EquipV2Pb other) : this() {
    id_ = other.id_;
    battlePos_ = other.battlePos_;
    Attr = other.attr_ != null ? other.Attr.Clone() : null;
    level_ = other.level_;
    grade_ = other.grade_;
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EquipV2Pb Clone() {
    return new EquipV2Pb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "battlePos" field.</summary>
  public const int BattlePosFieldNumber = 2;
  private int battlePos_;
  /// <summary>
  ///出战位置 (1,2,3)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BattlePos {
    get { return battlePos_; }
    set {
      battlePos_ = value;
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 3;
  private global::AttrPb attr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AttrPb Attr {
    get { return attr_; }
    set {
      attr_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 4;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "grade" field.</summary>
  public const int GradeFieldNumber = 5;
  private int grade_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Grade {
    get { return grade_; }
    set {
      grade_ = value;
    }
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 6;
  private int srl_;
  /// <summary>
  ///序号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EquipV2Pb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EquipV2Pb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (BattlePos != other.BattlePos) return false;
    if (!object.Equals(Attr, other.Attr)) return false;
    if (Level != other.Level) return false;
    if (Grade != other.Grade) return false;
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (BattlePos != 0) hash ^= BattlePos.GetHashCode();
    if (attr_ != null) hash ^= Attr.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Grade != 0) hash ^= Grade.GetHashCode();
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (BattlePos != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BattlePos);
    }
    if (attr_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Attr);
    }
    if (Level != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Level);
    }
    if (Grade != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Grade);
    }
    if (Srl != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (BattlePos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattlePos);
    }
    if (attr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Grade != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
    }
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EquipV2Pb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.BattlePos != 0) {
      BattlePos = other.BattlePos;
    }
    if (other.attr_ != null) {
      if (attr_ == null) {
        attr_ = new global::AttrPb();
      }
      Attr.MergeFrom(other.Attr);
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Grade != 0) {
      Grade = other.Grade;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          BattlePos = input.ReadInt32();
          break;
        }
        case 26: {
          if (attr_ == null) {
            attr_ = new global::AttrPb();
          }
          input.ReadMessage(attr_);
          break;
        }
        case 32: {
          Level = input.ReadInt32();
          break;
        }
        case 40: {
          Grade = input.ReadInt32();
          break;
        }
        case 48: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///孵化池
/// </summary>
public sealed partial class HatchPool : pb::IMessage<HatchPool> {
  private static readonly pb::MessageParser<HatchPool> _parser = new pb::MessageParser<HatchPool>(() => new HatchPool());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HatchPool> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HatchPool() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HatchPool(HatchPool other) : this() {
    level_ = other.level_;
    exp_ = other.exp_;
    advanceTime_ = other.advanceTime_;
    adsCdEnd_ = other.adsCdEnd_;
    times_ = other.times_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HatchPool Clone() {
    return new HatchPool(this);
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 1;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 2;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "advanceTime" field.</summary>
  public const int AdvanceTimeFieldNumber = 3;
  private long advanceTime_;
  /// <summary>
  ///晋级结束时间 >0代表晋级中 =0不在晋级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long AdvanceTime {
    get { return advanceTime_; }
    set {
      advanceTime_ = value;
    }
  }

  /// <summary>Field number for the "adsCdEnd" field.</summary>
  public const int AdsCdEndFieldNumber = 4;
  private int adsCdEnd_;
  /// <summary>
  ///广告cd结束时间,单位秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AdsCdEnd {
    get { return adsCdEnd_; }
    set {
      adsCdEnd_ = value;
    }
  }

  /// <summary>Field number for the "times" field.</summary>
  public const int TimesFieldNumber = 5;
  private int times_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Times {
    get { return times_; }
    set {
      times_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HatchPool);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HatchPool other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    if (AdvanceTime != other.AdvanceTime) return false;
    if (AdsCdEnd != other.AdsCdEnd) return false;
    if (Times != other.Times) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (AdvanceTime != 0L) hash ^= AdvanceTime.GetHashCode();
    if (AdsCdEnd != 0) hash ^= AdsCdEnd.GetHashCode();
    if (Times != 0) hash ^= Times.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Level != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Exp);
    }
    if (AdvanceTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(AdvanceTime);
    }
    if (AdsCdEnd != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AdsCdEnd);
    }
    if (Times != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Times);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (AdvanceTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AdvanceTime);
    }
    if (AdsCdEnd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdsCdEnd);
    }
    if (Times != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HatchPool other) {
    if (other == null) {
      return;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.AdvanceTime != 0L) {
      AdvanceTime = other.AdvanceTime;
    }
    if (other.AdsCdEnd != 0) {
      AdsCdEnd = other.AdsCdEnd;
    }
    if (other.Times != 0) {
      Times = other.Times;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Level = input.ReadInt32();
          break;
        }
        case 16: {
          Exp = input.ReadInt32();
          break;
        }
        case 24: {
          AdvanceTime = input.ReadInt64();
          break;
        }
        case 32: {
          AdsCdEnd = input.ReadInt32();
          break;
        }
        case 40: {
          Times = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///账号
/// </summary>
public sealed partial class AccountPb : pb::IMessage<AccountPb> {
  private static readonly pb::MessageParser<AccountPb> _parser = new pb::MessageParser<AccountPb>(() => new AccountPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AccountPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountPb(AccountPb other) : this() {
    pids_ = other.pids_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountPb Clone() {
    return new AccountPb(this);
  }

  /// <summary>Field number for the "pids" field.</summary>
  public const int PidsFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_pids_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> pids_ = new pbc::MapField<int, int>();
  /// <summary>
  ///sid,pid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Pids {
    get { return pids_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AccountPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AccountPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Pids.Equals(other.Pids)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Pids.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    pids_.WriteTo(output, _map_pids_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += pids_.CalculateSize(_map_pids_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AccountPb other) {
    if (other == null) {
      return;
    }
    pids_.Add(other.pids_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          pids_.AddEntriesFrom(input, _map_pids_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///开箱设置
/// </summary>
public sealed partial class BoxSettingPb : pb::IMessage<BoxSettingPb> {
  private static readonly pb::MessageParser<BoxSettingPb> _parser = new pb::MessageParser<BoxSettingPb>(() => new BoxSettingPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BoxSettingPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BoxSettingPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BoxSettingPb(BoxSettingPb other) : this() {
    quality_ = other.quality_;
    option1Att1_ = other.option1Att1_;
    option1Att2_ = other.option1Att2_;
    option2Att1_ = other.option2Att1_;
    option2Att2_ = other.option2Att2_;
    openTimes_ = other.openTimes_;
    rewardNotSat_ = other.rewardNotSat_;
    ifTicketFull_ = other.ifTicketFull_;
    keepIfQuality_ = other.keepIfQuality_;
    allAttrValueLarge_ = other.allAttrValueLarge_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BoxSettingPb Clone() {
    return new BoxSettingPb(this);
  }

  /// <summary>Field number for the "quality" field.</summary>
  public const int QualityFieldNumber = 1;
  private int quality_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Quality {
    get { return quality_; }
    set {
      quality_ = value;
    }
  }

  /// <summary>Field number for the "option1Att1" field.</summary>
  public const int Option1Att1FieldNumber = 2;
  private int option1Att1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Option1Att1 {
    get { return option1Att1_; }
    set {
      option1Att1_ = value;
    }
  }

  /// <summary>Field number for the "option1Att2" field.</summary>
  public const int Option1Att2FieldNumber = 3;
  private int option1Att2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Option1Att2 {
    get { return option1Att2_; }
    set {
      option1Att2_ = value;
    }
  }

  /// <summary>Field number for the "option2Att1" field.</summary>
  public const int Option2Att1FieldNumber = 4;
  private int option2Att1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Option2Att1 {
    get { return option2Att1_; }
    set {
      option2Att1_ = value;
    }
  }

  /// <summary>Field number for the "option2Att2" field.</summary>
  public const int Option2Att2FieldNumber = 5;
  private int option2Att2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Option2Att2 {
    get { return option2Att2_; }
    set {
      option2Att2_ = value;
    }
  }

  /// <summary>Field number for the "openTimes" field.</summary>
  public const int OpenTimesFieldNumber = 6;
  private int openTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OpenTimes {
    get { return openTimes_; }
    set {
      openTimes_ = value;
    }
  }

  /// <summary>Field number for the "rewardNotSat" field.</summary>
  public const int RewardNotSatFieldNumber = 7;
  private int rewardNotSat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RewardNotSat {
    get { return rewardNotSat_; }
    set {
      rewardNotSat_ = value;
    }
  }

  /// <summary>Field number for the "ifTicketFull" field.</summary>
  public const int IfTicketFullFieldNumber = 8;
  private int ifTicketFull_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IfTicketFull {
    get { return ifTicketFull_; }
    set {
      ifTicketFull_ = value;
    }
  }

  /// <summary>Field number for the "keepIfQuality" field.</summary>
  public const int KeepIfQualityFieldNumber = 9;
  private int keepIfQuality_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KeepIfQuality {
    get { return keepIfQuality_; }
    set {
      keepIfQuality_ = value;
    }
  }

  /// <summary>Field number for the "allAttrValueLarge" field.</summary>
  public const int AllAttrValueLargeFieldNumber = 10;
  private int allAttrValueLarge_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AllAttrValueLarge {
    get { return allAttrValueLarge_; }
    set {
      allAttrValueLarge_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BoxSettingPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BoxSettingPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Quality != other.Quality) return false;
    if (Option1Att1 != other.Option1Att1) return false;
    if (Option1Att2 != other.Option1Att2) return false;
    if (Option2Att1 != other.Option2Att1) return false;
    if (Option2Att2 != other.Option2Att2) return false;
    if (OpenTimes != other.OpenTimes) return false;
    if (RewardNotSat != other.RewardNotSat) return false;
    if (IfTicketFull != other.IfTicketFull) return false;
    if (KeepIfQuality != other.KeepIfQuality) return false;
    if (AllAttrValueLarge != other.AllAttrValueLarge) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Quality != 0) hash ^= Quality.GetHashCode();
    if (Option1Att1 != 0) hash ^= Option1Att1.GetHashCode();
    if (Option1Att2 != 0) hash ^= Option1Att2.GetHashCode();
    if (Option2Att1 != 0) hash ^= Option2Att1.GetHashCode();
    if (Option2Att2 != 0) hash ^= Option2Att2.GetHashCode();
    if (OpenTimes != 0) hash ^= OpenTimes.GetHashCode();
    if (RewardNotSat != 0) hash ^= RewardNotSat.GetHashCode();
    if (IfTicketFull != 0) hash ^= IfTicketFull.GetHashCode();
    if (KeepIfQuality != 0) hash ^= KeepIfQuality.GetHashCode();
    if (AllAttrValueLarge != 0) hash ^= AllAttrValueLarge.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Quality != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Quality);
    }
    if (Option1Att1 != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Option1Att1);
    }
    if (Option1Att2 != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Option1Att2);
    }
    if (Option2Att1 != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Option2Att1);
    }
    if (Option2Att2 != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Option2Att2);
    }
    if (OpenTimes != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(OpenTimes);
    }
    if (RewardNotSat != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(RewardNotSat);
    }
    if (IfTicketFull != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(IfTicketFull);
    }
    if (KeepIfQuality != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(KeepIfQuality);
    }
    if (AllAttrValueLarge != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(AllAttrValueLarge);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Quality != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
    }
    if (Option1Att1 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Option1Att1);
    }
    if (Option1Att2 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Option1Att2);
    }
    if (Option2Att1 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Option2Att1);
    }
    if (Option2Att2 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Option2Att2);
    }
    if (OpenTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenTimes);
    }
    if (RewardNotSat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardNotSat);
    }
    if (IfTicketFull != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IfTicketFull);
    }
    if (KeepIfQuality != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepIfQuality);
    }
    if (AllAttrValueLarge != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllAttrValueLarge);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BoxSettingPb other) {
    if (other == null) {
      return;
    }
    if (other.Quality != 0) {
      Quality = other.Quality;
    }
    if (other.Option1Att1 != 0) {
      Option1Att1 = other.Option1Att1;
    }
    if (other.Option1Att2 != 0) {
      Option1Att2 = other.Option1Att2;
    }
    if (other.Option2Att1 != 0) {
      Option2Att1 = other.Option2Att1;
    }
    if (other.Option2Att2 != 0) {
      Option2Att2 = other.Option2Att2;
    }
    if (other.OpenTimes != 0) {
      OpenTimes = other.OpenTimes;
    }
    if (other.RewardNotSat != 0) {
      RewardNotSat = other.RewardNotSat;
    }
    if (other.IfTicketFull != 0) {
      IfTicketFull = other.IfTicketFull;
    }
    if (other.KeepIfQuality != 0) {
      KeepIfQuality = other.KeepIfQuality;
    }
    if (other.AllAttrValueLarge != 0) {
      AllAttrValueLarge = other.AllAttrValueLarge;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Quality = input.ReadInt32();
          break;
        }
        case 16: {
          Option1Att1 = input.ReadInt32();
          break;
        }
        case 24: {
          Option1Att2 = input.ReadInt32();
          break;
        }
        case 32: {
          Option2Att1 = input.ReadInt32();
          break;
        }
        case 40: {
          Option2Att2 = input.ReadInt32();
          break;
        }
        case 48: {
          OpenTimes = input.ReadInt32();
          break;
        }
        case 56: {
          RewardNotSat = input.ReadInt32();
          break;
        }
        case 64: {
          IfTicketFull = input.ReadInt32();
          break;
        }
        case 72: {
          KeepIfQuality = input.ReadInt32();
          break;
        }
        case 80: {
          AllAttrValueLarge = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///悬赏秘境
/// </summary>
public sealed partial class OfferPb : pb::IMessage<OfferPb> {
  private static readonly pb::MessageParser<OfferPb> _parser = new pb::MessageParser<OfferPb>(() => new OfferPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferPb(OfferPb other) : this() {
    npc_ = other.npc_.Clone();
    catchTimes_ = other.catchTimes_;
    catchCd_ = other.catchCd_;
    refreshCd_ = other.refreshCd_;
    refreshTimes_ = other.refreshTimes_;
    catchTimesMax_ = other.catchTimesMax_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferPb Clone() {
    return new OfferPb(this);
  }

  /// <summary>Field number for the "npc" field.</summary>
  public const int NpcFieldNumber = 1;
  private static readonly pb::FieldCodec<global::OfferNpcPb> _repeated_npc_codec
      = pb::FieldCodec.ForMessage(10, global::OfferNpcPb.Parser);
  private readonly pbc::RepeatedField<global::OfferNpcPb> npc_ = new pbc::RepeatedField<global::OfferNpcPb>();
  /// <summary>
  ///悬赏npc 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::OfferNpcPb> Npc {
    get { return npc_; }
  }

  /// <summary>Field number for the "catchTimes" field.</summary>
  public const int CatchTimesFieldNumber = 2;
  private int catchTimes_;
  /// <summary>
  ///剩余抓捕次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CatchTimes {
    get { return catchTimes_; }
    set {
      catchTimes_ = value;
    }
  }

  /// <summary>Field number for the "catchCd" field.</summary>
  public const int CatchCdFieldNumber = 3;
  private int catchCd_;
  /// <summary>
  ///抓捕cd 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CatchCd {
    get { return catchCd_; }
    set {
      catchCd_ = value;
    }
  }

  /// <summary>Field number for the "refreshCd" field.</summary>
  public const int RefreshCdFieldNumber = 4;
  private int refreshCd_;
  /// <summary>
  ///刷新cd 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RefreshCd {
    get { return refreshCd_; }
    set {
      refreshCd_ = value;
    }
  }

  /// <summary>Field number for the "refreshTimes" field.</summary>
  public const int RefreshTimesFieldNumber = 5;
  private int refreshTimes_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RefreshTimes {
    get { return refreshTimes_; }
    set {
      refreshTimes_ = value;
    }
  }

  /// <summary>Field number for the "catchTimesMax" field.</summary>
  public const int CatchTimesMaxFieldNumber = 6;
  private int catchTimesMax_;
  /// <summary>
  ///fuck，恶心玩意 购买月卡后=6 ，否则=5
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CatchTimesMax {
    get { return catchTimesMax_; }
    set {
      catchTimesMax_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!npc_.Equals(other.npc_)) return false;
    if (CatchTimes != other.CatchTimes) return false;
    if (CatchCd != other.CatchCd) return false;
    if (RefreshCd != other.RefreshCd) return false;
    if (RefreshTimes != other.RefreshTimes) return false;
    if (CatchTimesMax != other.CatchTimesMax) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= npc_.GetHashCode();
    if (CatchTimes != 0) hash ^= CatchTimes.GetHashCode();
    if (CatchCd != 0) hash ^= CatchCd.GetHashCode();
    if (RefreshCd != 0) hash ^= RefreshCd.GetHashCode();
    if (RefreshTimes != 0) hash ^= RefreshTimes.GetHashCode();
    if (CatchTimesMax != 0) hash ^= CatchTimesMax.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    npc_.WriteTo(output, _repeated_npc_codec);
    if (CatchTimes != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CatchTimes);
    }
    if (CatchCd != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CatchCd);
    }
    if (RefreshCd != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(RefreshCd);
    }
    if (RefreshTimes != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(RefreshTimes);
    }
    if (CatchTimesMax != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(CatchTimesMax);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += npc_.CalculateSize(_repeated_npc_codec);
    if (CatchTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CatchTimes);
    }
    if (CatchCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CatchCd);
    }
    if (RefreshCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshCd);
    }
    if (RefreshTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTimes);
    }
    if (CatchTimesMax != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CatchTimesMax);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferPb other) {
    if (other == null) {
      return;
    }
    npc_.Add(other.npc_);
    if (other.CatchTimes != 0) {
      CatchTimes = other.CatchTimes;
    }
    if (other.CatchCd != 0) {
      CatchCd = other.CatchCd;
    }
    if (other.RefreshCd != 0) {
      RefreshCd = other.RefreshCd;
    }
    if (other.RefreshTimes != 0) {
      RefreshTimes = other.RefreshTimes;
    }
    if (other.CatchTimesMax != 0) {
      CatchTimesMax = other.CatchTimesMax;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          npc_.AddEntriesFrom(input, _repeated_npc_codec);
          break;
        }
        case 16: {
          CatchTimes = input.ReadInt32();
          break;
        }
        case 24: {
          CatchCd = input.ReadInt32();
          break;
        }
        case 32: {
          RefreshCd = input.ReadInt32();
          break;
        }
        case 40: {
          RefreshTimes = input.ReadInt32();
          break;
        }
        case 48: {
          CatchTimesMax = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///悬赏NPC
/// </summary>
public sealed partial class OfferNpcPb : pb::IMessage<OfferNpcPb> {
  private static readonly pb::MessageParser<OfferNpcPb> _parser = new pb::MessageParser<OfferNpcPb>(() => new OfferNpcPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfferNpcPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferNpcPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferNpcPb(OfferNpcPb other) : this() {
    npcid_ = other.npcid_;
    stage_ = other.stage_;
    star_ = other.star_;
    attr_ = other.attr_.Clone();
    pos_ = other.pos_;
    isCatch_ = other.isCatch_;
    qualityTabId_ = other.qualityTabId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfferNpcPb Clone() {
    return new OfferNpcPb(this);
  }

  /// <summary>Field number for the "npcid" field.</summary>
  public const int NpcidFieldNumber = 1;
  private int npcid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Npcid {
    get { return npcid_; }
    set {
      npcid_ = value;
    }
  }

  /// <summary>Field number for the "stage" field.</summary>
  public const int StageFieldNumber = 2;
  private int stage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stage {
    get { return stage_; }
    set {
      stage_ = value;
    }
  }

  /// <summary>Field number for the "star" field.</summary>
  public const int StarFieldNumber = 3;
  private int star_;
  /// <summary>
  ///星级 (品质跟星级一样)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Star {
    get { return star_; }
    set {
      star_ = value;
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_attr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> attr_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Attr {
    get { return attr_; }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 5;
  private int pos_;
  /// <summary>
  ///悬赏位 取值 1,2,3
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "isCatch" field.</summary>
  public const int IsCatchFieldNumber = 6;
  private bool isCatch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsCatch {
    get { return isCatch_; }
    set {
      isCatch_ = value;
    }
  }

  /// <summary>Field number for the "qualityTabId" field.</summary>
  public const int QualityTabIdFieldNumber = 7;
  private int qualityTabId_;
  /// <summary>
  ///ArrestQuality表 id 用于构建宠物
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QualityTabId {
    get { return qualityTabId_; }
    set {
      qualityTabId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfferNpcPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfferNpcPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Npcid != other.Npcid) return false;
    if (Stage != other.Stage) return false;
    if (Star != other.Star) return false;
    if (!Attr.Equals(other.Attr)) return false;
    if (Pos != other.Pos) return false;
    if (IsCatch != other.IsCatch) return false;
    if (QualityTabId != other.QualityTabId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Npcid != 0) hash ^= Npcid.GetHashCode();
    if (Stage != 0) hash ^= Stage.GetHashCode();
    if (Star != 0) hash ^= Star.GetHashCode();
    hash ^= Attr.GetHashCode();
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (IsCatch != false) hash ^= IsCatch.GetHashCode();
    if (QualityTabId != 0) hash ^= QualityTabId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Npcid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Npcid);
    }
    if (Stage != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Stage);
    }
    if (Star != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Star);
    }
    attr_.WriteTo(output, _map_attr_codec);
    if (Pos != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Pos);
    }
    if (IsCatch != false) {
      output.WriteRawTag(48);
      output.WriteBool(IsCatch);
    }
    if (QualityTabId != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(QualityTabId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Npcid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Npcid);
    }
    if (Stage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
    }
    if (Star != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
    }
    size += attr_.CalculateSize(_map_attr_codec);
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (IsCatch != false) {
      size += 1 + 1;
    }
    if (QualityTabId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(QualityTabId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfferNpcPb other) {
    if (other == null) {
      return;
    }
    if (other.Npcid != 0) {
      Npcid = other.Npcid;
    }
    if (other.Stage != 0) {
      Stage = other.Stage;
    }
    if (other.Star != 0) {
      Star = other.Star;
    }
    attr_.Add(other.attr_);
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.IsCatch != false) {
      IsCatch = other.IsCatch;
    }
    if (other.QualityTabId != 0) {
      QualityTabId = other.QualityTabId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Npcid = input.ReadInt32();
          break;
        }
        case 16: {
          Stage = input.ReadInt32();
          break;
        }
        case 24: {
          Star = input.ReadInt32();
          break;
        }
        case 34: {
          attr_.AddEntriesFrom(input, _map_attr_codec);
          break;
        }
        case 40: {
          Pos = input.ReadInt32();
          break;
        }
        case 48: {
          IsCatch = input.ReadBool();
          break;
        }
        case 56: {
          QualityTabId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///坐骑集合 -- 
/// </summary>
public sealed partial class MountsPb : pb::IMessage<MountsPb> {
  private static readonly pb::MessageParser<MountsPb> _parser = new pb::MessageParser<MountsPb>(() => new MountsPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MountsPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MountsPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MountsPb(MountsPb other) : this() {
    mounts_ = other.mounts_.Clone();
    curMount_ = other.curMount_;
    level_ = other.level_;
    exp_ = other.exp_;
    step_ = other.step_;
    levelId_ = other.levelId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MountsPb Clone() {
    return new MountsPb(this);
  }

  /// <summary>Field number for the "mounts" field.</summary>
  public const int MountsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_mounts_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> mounts_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///已拥有的坐骑列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Mounts {
    get { return mounts_; }
  }

  /// <summary>Field number for the "curMount" field.</summary>
  public const int CurMountFieldNumber = 2;
  private int curMount_;
  /// <summary>
  ///当前坐骑id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurMount {
    get { return curMount_; }
    set {
      curMount_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 4;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "step" field.</summary>
  public const int StepFieldNumber = 5;
  private int step_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Step {
    get { return step_; }
    set {
      step_ = value;
    }
  }

  /// <summary>Field number for the "levelId" field.</summary>
  public const int LevelIdFieldNumber = 6;
  private int levelId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LevelId {
    get { return levelId_; }
    set {
      levelId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MountsPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MountsPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!mounts_.Equals(other.mounts_)) return false;
    if (CurMount != other.CurMount) return false;
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    if (Step != other.Step) return false;
    if (LevelId != other.LevelId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= mounts_.GetHashCode();
    if (CurMount != 0) hash ^= CurMount.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (Step != 0) hash ^= Step.GetHashCode();
    if (LevelId != 0) hash ^= LevelId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    mounts_.WriteTo(output, _repeated_mounts_codec);
    if (CurMount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CurMount);
    }
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Exp);
    }
    if (Step != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Step);
    }
    if (LevelId != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(LevelId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += mounts_.CalculateSize(_repeated_mounts_codec);
    if (CurMount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurMount);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (Step != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
    }
    if (LevelId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MountsPb other) {
    if (other == null) {
      return;
    }
    mounts_.Add(other.mounts_);
    if (other.CurMount != 0) {
      CurMount = other.CurMount;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.Step != 0) {
      Step = other.Step;
    }
    if (other.LevelId != 0) {
      LevelId = other.LevelId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          mounts_.AddEntriesFrom(input, _repeated_mounts_codec);
          break;
        }
        case 16: {
          CurMount = input.ReadInt32();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
        case 32: {
          Exp = input.ReadInt32();
          break;
        }
        case 40: {
          Step = input.ReadInt32();
          break;
        }
        case 48: {
          LevelId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///洞天资源
/// </summary>
public sealed partial class HoleResPb : pb::IMessage<HoleResPb> {
  private static readonly pb::MessageParser<HoleResPb> _parser = new pb::MessageParser<HoleResPb>(() => new HoleResPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HoleResPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleResPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleResPb(HoleResPb other) : this() {
    resid_ = other.resid_;
    level_ = other.level_;
    gatherTime_ = other.gatherTime_;
    gatherChild_ = other.gatherChild_.Clone();
    gatherPlayer_ = other.gatherPlayer_;
    state_ = other.state_;
    pos_ = other.pos_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleResPb Clone() {
    return new HoleResPb(this);
  }

  /// <summary>Field number for the "resid" field.</summary>
  public const int ResidFieldNumber = 1;
  private int resid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Resid {
    get { return resid_; }
    set {
      resid_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "gatherTime" field.</summary>
  public const int GatherTimeFieldNumber = 3;
  private int gatherTime_;
  /// <summary>
  ///采集结束时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GatherTime {
    get { return gatherTime_; }
    set {
      gatherTime_ = value;
    }
  }

  /// <summary>Field number for the "gatherChild" field.</summary>
  public const int GatherChildFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_gatherChild_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> gatherChild_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///采集仙童 （可以是自己，可以是别人）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> GatherChild {
    get { return gatherChild_; }
  }

  /// <summary>Field number for the "gatherPlayer" field.</summary>
  public const int GatherPlayerFieldNumber = 5;
  private int gatherPlayer_;
  /// <summary>
  ///采集玩家， （可以是自己，可以是别人）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GatherPlayer {
    get { return gatherPlayer_; }
    set {
      gatherPlayer_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 6;
  private int state_;
  /// <summary>
  /// 状态 0-空闲状态 1-自己采集 2-被别人偷取
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 7;
  private int pos_;
  /// <summary>
  ///资源位置(1-5)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HoleResPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HoleResPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Resid != other.Resid) return false;
    if (Level != other.Level) return false;
    if (GatherTime != other.GatherTime) return false;
    if(!gatherChild_.Equals(other.gatherChild_)) return false;
    if (GatherPlayer != other.GatherPlayer) return false;
    if (State != other.State) return false;
    if (Pos != other.Pos) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Resid != 0) hash ^= Resid.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (GatherTime != 0) hash ^= GatherTime.GetHashCode();
    hash ^= gatherChild_.GetHashCode();
    if (GatherPlayer != 0) hash ^= GatherPlayer.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    if (Pos != 0) hash ^= Pos.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Resid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Resid);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (GatherTime != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GatherTime);
    }
    gatherChild_.WriteTo(output, _repeated_gatherChild_codec);
    if (GatherPlayer != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GatherPlayer);
    }
    if (State != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(State);
    }
    if (Pos != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Pos);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Resid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resid);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (GatherTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GatherTime);
    }
    size += gatherChild_.CalculateSize(_repeated_gatherChild_codec);
    if (GatherPlayer != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GatherPlayer);
    }
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
    }
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HoleResPb other) {
    if (other == null) {
      return;
    }
    if (other.Resid != 0) {
      Resid = other.Resid;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.GatherTime != 0) {
      GatherTime = other.GatherTime;
    }
    gatherChild_.Add(other.gatherChild_);
    if (other.GatherPlayer != 0) {
      GatherPlayer = other.GatherPlayer;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Resid = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 24: {
          GatherTime = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          gatherChild_.AddEntriesFrom(input, _repeated_gatherChild_codec);
          break;
        }
        case 40: {
          GatherPlayer = input.ReadInt32();
          break;
        }
        case 48: {
          State = input.ReadInt32();
          break;
        }
        case 56: {
          Pos = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///洞天
/// </summary>
public sealed partial class HolePb : pb::IMessage<HolePb> {
  private static readonly pb::MessageParser<HolePb> _parser = new pb::MessageParser<HolePb>(() => new HolePb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HolePb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HolePb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HolePb(HolePb other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    head_ = other.head_;
    holeRes_ = other.holeRes_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HolePb Clone() {
    return new HolePb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  ///名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "head" field.</summary>
  public const int HeadFieldNumber = 3;
  private string head_ = "";
  /// <summary>
  ///头像
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Head {
    get { return head_; }
    set {
      head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "holeRes" field.</summary>
  public const int HoleResFieldNumber = 4;
  private static readonly pbc::MapField<int, global::HoleResPb>.Codec _map_holeRes_codec
      = new pbc::MapField<int, global::HoleResPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::HoleResPb.Parser), 34);
  private readonly pbc::MapField<int, global::HoleResPb> holeRes_ = new pbc::MapField<int, global::HoleResPb>();
  /// <summary>
  ///资源pos,资源pb
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::HoleResPb> HoleRes {
    get { return holeRes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HolePb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HolePb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Head != other.Head) return false;
    if (!HoleRes.Equals(other.HoleRes)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Head.Length != 0) hash ^= Head.GetHashCode();
    hash ^= HoleRes.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Head.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Head);
    }
    holeRes_.WriteTo(output, _map_holeRes_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Head.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
    }
    size += holeRes_.CalculateSize(_map_holeRes_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HolePb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Head.Length != 0) {
      Head = other.Head;
    }
    holeRes_.Add(other.holeRes_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Head = input.ReadString();
          break;
        }
        case 34: {
          holeRes_.AddEntriesFrom(input, _map_holeRes_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///洞天记录
/// </summary>
public sealed partial class HoleLogPb : pb::IMessage<HoleLogPb> {
  private static readonly pb::MessageParser<HoleLogPb> _parser = new pb::MessageParser<HoleLogPb>(() => new HoleLogPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HoleLogPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleLogPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleLogPb(HoleLogPb other) : this() {
    id_ = other.id_;
    time_ = other.time_;
    type_ = other.type_;
    resid_ = other.resid_;
    resLevel_ = other.resLevel_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleLogPb Clone() {
    return new HoleLogPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 2;
  private int time_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private int type_;
  /// <summary>
  ///1-出现资源 2-抢夺(暂时不做)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "resid" field.</summary>
  public const int ResidFieldNumber = 4;
  private int resid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Resid {
    get { return resid_; }
    set {
      resid_ = value;
    }
  }

  /// <summary>Field number for the "resLevel" field.</summary>
  public const int ResLevelFieldNumber = 5;
  private int resLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResLevel {
    get { return resLevel_; }
    set {
      resLevel_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HoleLogPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HoleLogPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Time != other.Time) return false;
    if (Type != other.Type) return false;
    if (Resid != other.Resid) return false;
    if (ResLevel != other.ResLevel) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Time != 0) hash ^= Time.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Resid != 0) hash ^= Resid.GetHashCode();
    if (ResLevel != 0) hash ^= ResLevel.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Time != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Time);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Type);
    }
    if (Resid != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Resid);
    }
    if (ResLevel != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(ResLevel);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Time != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Resid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resid);
    }
    if (ResLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResLevel);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HoleLogPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Time != 0) {
      Time = other.Time;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Resid != 0) {
      Resid = other.Resid;
    }
    if (other.ResLevel != 0) {
      ResLevel = other.ResLevel;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Time = input.ReadInt32();
          break;
        }
        case 24: {
          Type = input.ReadInt32();
          break;
        }
        case 32: {
          Resid = input.ReadInt32();
          break;
        }
        case 40: {
          ResLevel = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///仙童
/// </summary>
public sealed partial class ChildPb : pb::IMessage<ChildPb> {
  private static readonly pb::MessageParser<ChildPb> _parser = new pb::MessageParser<ChildPb>(() => new ChildPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChildPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildPb(ChildPb other) : this() {
    id_ = other.id_;
    state_ = other.state_;
    bindPlayer_ = other.bindPlayer_;
    bindResPos_ = other.bindResPos_;
    ClientChild = other.clientChild_ != null ? other.ClientChild.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildPb Clone() {
    return new ChildPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 2;
  private int state_;
  /// <summary>
  /// 状态 0-空闲状态 1-自己采集 2-偷取别人
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "bindPlayer" field.</summary>
  public const int BindPlayerFieldNumber = 3;
  private int bindPlayer_;
  /// <summary>
  ///当前正在绑定的玩家 id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BindPlayer {
    get { return bindPlayer_; }
    set {
      bindPlayer_ = value;
    }
  }

  /// <summary>Field number for the "bindResPos" field.</summary>
  public const int BindResPosFieldNumber = 4;
  private int bindResPos_;
  /// <summary>
  ///当前正在绑定的资源 pos
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BindResPos {
    get { return bindResPos_; }
    set {
      bindResPos_ = value;
    }
  }

  /// <summary>Field number for the "clientChild" field.</summary>
  public const int ClientChildFieldNumber = 5;
  private global::ClientChildPb clientChild_;
  /// <summary>
  ///客户端仙童显示数据 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClientChildPb ClientChild {
    get { return clientChild_; }
    set {
      clientChild_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChildPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChildPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (State != other.State) return false;
    if (BindPlayer != other.BindPlayer) return false;
    if (BindResPos != other.BindResPos) return false;
    if (!object.Equals(ClientChild, other.ClientChild)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    if (BindPlayer != 0) hash ^= BindPlayer.GetHashCode();
    if (BindResPos != 0) hash ^= BindResPos.GetHashCode();
    if (clientChild_ != null) hash ^= ClientChild.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (State != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(State);
    }
    if (BindPlayer != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BindPlayer);
    }
    if (BindResPos != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(BindResPos);
    }
    if (clientChild_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ClientChild);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
    }
    if (BindPlayer != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BindPlayer);
    }
    if (BindResPos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BindResPos);
    }
    if (clientChild_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientChild);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChildPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.BindPlayer != 0) {
      BindPlayer = other.BindPlayer;
    }
    if (other.BindResPos != 0) {
      BindResPos = other.BindResPos;
    }
    if (other.clientChild_ != null) {
      if (clientChild_ == null) {
        clientChild_ = new global::ClientChildPb();
      }
      ClientChild.MergeFrom(other.ClientChild);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          State = input.ReadInt32();
          break;
        }
        case 24: {
          BindPlayer = input.ReadInt32();
          break;
        }
        case 32: {
          BindResPos = input.ReadInt32();
          break;
        }
        case 42: {
          if (clientChild_ == null) {
            clientChild_ = new global::ClientChildPb();
          }
          input.ReadMessage(clientChild_);
          break;
        }
      }
    }
  }

}

/// <summary>
///仙童详情
/// </summary>
public sealed partial class ChildDetailPb : pb::IMessage<ChildDetailPb> {
  private static readonly pb::MessageParser<ChildDetailPb> _parser = new pb::MessageParser<ChildDetailPb>(() => new ChildDetailPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChildDetailPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildDetailPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildDetailPb(ChildDetailPb other) : this() {
    tired_ = other.tired_;
    childs_ = other.childs_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildDetailPb Clone() {
    return new ChildDetailPb(this);
  }

  /// <summary>Field number for the "tired" field.</summary>
  public const int TiredFieldNumber = 1;
  private int tired_;
  /// <summary>
  ///疲劳
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Tired {
    get { return tired_; }
    set {
      tired_ = value;
    }
  }

  /// <summary>Field number for the "childs" field.</summary>
  public const int ChildsFieldNumber = 2;
  private static readonly pbc::MapField<int, global::ChildPb>.Codec _map_childs_codec
      = new pbc::MapField<int, global::ChildPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::ChildPb.Parser), 18);
  private readonly pbc::MapField<int, global::ChildPb> childs_ = new pbc::MapField<int, global::ChildPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::ChildPb> Childs {
    get { return childs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChildDetailPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChildDetailPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Tired != other.Tired) return false;
    if (!Childs.Equals(other.Childs)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Tired != 0) hash ^= Tired.GetHashCode();
    hash ^= Childs.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Tired != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Tired);
    }
    childs_.WriteTo(output, _map_childs_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Tired != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tired);
    }
    size += childs_.CalculateSize(_map_childs_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChildDetailPb other) {
    if (other == null) {
      return;
    }
    if (other.Tired != 0) {
      Tired = other.Tired;
    }
    childs_.Add(other.childs_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Tired = input.ReadInt32();
          break;
        }
        case 18: {
          childs_.AddEntriesFrom(input, _map_childs_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///客户端仙童显示用数据
/// </summary>
public sealed partial class ClientChildPb : pb::IMessage<ClientChildPb> {
  private static readonly pb::MessageParser<ClientChildPb> _parser = new pb::MessageParser<ClientChildPb>(() => new ClientChildPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientChildPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientChildPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientChildPb(ClientChildPb other) : this() {
    resId_ = other.resId_;
    resLv_ = other.resLv_;
    gathertime_ = other.gathertime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientChildPb Clone() {
    return new ClientChildPb(this);
  }

  /// <summary>Field number for the "resId" field.</summary>
  public const int ResIdFieldNumber = 1;
  private int resId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResId {
    get { return resId_; }
    set {
      resId_ = value;
    }
  }

  /// <summary>Field number for the "resLv" field.</summary>
  public const int ResLvFieldNumber = 2;
  private int resLv_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResLv {
    get { return resLv_; }
    set {
      resLv_ = value;
    }
  }

  /// <summary>Field number for the "gathertime" field.</summary>
  public const int GathertimeFieldNumber = 3;
  private int gathertime_;
  /// <summary>
  ///采集结束时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gathertime {
    get { return gathertime_; }
    set {
      gathertime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientChildPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientChildPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ResId != other.ResId) return false;
    if (ResLv != other.ResLv) return false;
    if (Gathertime != other.Gathertime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ResId != 0) hash ^= ResId.GetHashCode();
    if (ResLv != 0) hash ^= ResLv.GetHashCode();
    if (Gathertime != 0) hash ^= Gathertime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ResId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ResId);
    }
    if (ResLv != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ResLv);
    }
    if (Gathertime != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Gathertime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ResId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResId);
    }
    if (ResLv != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResLv);
    }
    if (Gathertime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gathertime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientChildPb other) {
    if (other == null) {
      return;
    }
    if (other.ResId != 0) {
      ResId = other.ResId;
    }
    if (other.ResLv != 0) {
      ResLv = other.ResLv;
    }
    if (other.Gathertime != 0) {
      Gathertime = other.Gathertime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ResId = input.ReadInt32();
          break;
        }
        case 16: {
          ResLv = input.ReadInt32();
          break;
        }
        case 24: {
          Gathertime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///每日刷新 (0点重置)
/// </summary>
public sealed partial class DailyRefreshPb : pb::IMessage<DailyRefreshPb> {
  private static readonly pb::MessageParser<DailyRefreshPb> _parser = new pb::MessageParser<DailyRefreshPb>(() => new DailyRefreshPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DailyRefreshPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DailyRefreshPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DailyRefreshPb(DailyRefreshPb other) : this() {
    time_ = other.time_;
    dailyNums_ = other.dailyNums_.Clone();
    adResRTimes_ = other.adResRTimes_;
    itemResRCost_ = other.itemResRCost_;
    roughFreeTimes_ = other.roughFreeTimes_;
    roughNormalTimes_ = other.roughNormalTimes_;
    roughSpecialTimes_ = other.roughSpecialTimes_;
    shopBuyTimes_ = other.shopBuyTimes_.Clone();
    devilBuyTimes_ = other.devilBuyTimes_;
    eggReward_ = other.eggReward_.Clone();
    immortalSceneOpTimes_ = other.immortalSceneOpTimes_;
    launchAllyHelp_ = other.launchAllyHelp_;
    surpriseBoxTimes_ = other.surpriseBoxTimes_;
    eggByDay_ = other.eggByDay_;
    poolItemRate_ = other.poolItemRate_;
    tsRefreshTimes_ = other.tsRefreshTimes_;
    adRewardTimes_ = other.adRewardTimes_.Clone();
    xyGitBagFreeTimes_ = other.xyGitBagFreeTimes_.Clone();
    everyDayGiftTimes_ = other.everyDayGiftTimes_.Clone();
    dayRecharge_ = other.dayRecharge_;
    dayRechargeReward_ = other.dayRechargeReward_.Clone();
    offerBuyTimes_ = other.offerBuyTimes_;
    limitTimeGiftCd_ = other.limitTimeGiftCd_.Clone();
    cloudGiftTimes_ = other.cloudGiftTimes_.Clone();
    cloudPrivilegeGiftTestTime_ = other.cloudPrivilegeGiftTestTime_;
    cloudPrivilegeGiftTestNum_ = other.cloudPrivilegeGiftTestNum_;
    humanSceneOpTimes_ = other.humanSceneOpTimes_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DailyRefreshPb Clone() {
    return new DailyRefreshPb(this);
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 1;
  private long time_;
  /// <summary>
  /// 服务器刷新时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "dailyNums" field.</summary>
  public const int DailyNumsFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_dailyNums_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> dailyNums_ = new pbc::MapField<int, int>();
  /// <summary>
  /// 配置数据;key:id, value: config num
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> DailyNums {
    get { return dailyNums_; }
  }

  /// <summary>Field number for the "adResRTimes" field.</summary>
  public const int AdResRTimesFieldNumber = 3;
  private int adResRTimes_;
  /// <summary>
  ///广告刷新资源次数  --重置为0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AdResRTimes {
    get { return adResRTimes_; }
    set {
      adResRTimes_ = value;
    }
  }

  /// <summary>Field number for the "itemResRCost" field.</summary>
  public const int ItemResRCostFieldNumber = 4;
  private int itemResRCost_;
  /// <summary>
  ///道具刷新资源消耗  --重置为25
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ItemResRCost {
    get { return itemResRCost_; }
    set {
      itemResRCost_ = value;
    }
  }

  /// <summary>Field number for the "roughFreeTimes" field.</summary>
  public const int RoughFreeTimesFieldNumber = 5;
  private int roughFreeTimes_;
  /// <summary>
  ///原石免费刷新次数  --重置为1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoughFreeTimes {
    get { return roughFreeTimes_; }
    set {
      roughFreeTimes_ = value;
    }
  }

  /// <summary>Field number for the "roughNormalTimes" field.</summary>
  public const int RoughNormalTimesFieldNumber = 6;
  private int roughNormalTimes_;
  /// <summary>
  ///原石普通进货次数  --重置为50
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoughNormalTimes {
    get { return roughNormalTimes_; }
    set {
      roughNormalTimes_ = value;
    }
  }

  /// <summary>Field number for the "roughSpecialTimes" field.</summary>
  public const int RoughSpecialTimesFieldNumber = 7;
  private int roughSpecialTimes_;
  /// <summary>
  ///原石特殊进货次数  --重置为100
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoughSpecialTimes {
    get { return roughSpecialTimes_; }
    set {
      roughSpecialTimes_ = value;
    }
  }

  /// <summary>Field number for the "shopBuyTimes" field.</summary>
  public const int ShopBuyTimesFieldNumber = 8;
  private static readonly pbc::MapField<int, int>.Codec _map_shopBuyTimes_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 66);
  private readonly pbc::MapField<int, int> shopBuyTimes_ = new pbc::MapField<int, int>();
  /// <summary>
  ///坊市商品购买次数 --直接清空
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ShopBuyTimes {
    get { return shopBuyTimes_; }
  }

  /// <summary>Field number for the "devilBuyTimes" field.</summary>
  public const int DevilBuyTimesFieldNumber = 9;
  private int devilBuyTimes_;
  /// <summary>
  ///剩余伐魔购买次数 --重置为5
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DevilBuyTimes {
    get { return devilBuyTimes_; }
    set {
      devilBuyTimes_ = value;
    }
  }

  /// <summary>Field number for the "eggReward" field.</summary>
  public const int EggRewardFieldNumber = 10;
  private static readonly pb::FieldCodec<int> _repeated_eggReward_codec
      = pb::FieldCodec.ForInt32(82);
  private readonly pbc::RepeatedField<int> eggReward_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///仙盟孵蛋每日奖励 --直接清空
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> EggReward {
    get { return eggReward_; }
  }

  /// <summary>Field number for the "immortalSceneOpTimes" field.</summary>
  public const int ImmortalSceneOpTimesFieldNumber = 11;
  private int immortalSceneOpTimes_;
  /// <summary>
  ///仙界扫荡次数 --重置为6
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ImmortalSceneOpTimes {
    get { return immortalSceneOpTimes_; }
    set {
      immortalSceneOpTimes_ = value;
    }
  }

  /// <summary>Field number for the "launchAllyHelp" field.</summary>
  public const int LaunchAllyHelpFieldNumber = 12;
  private int launchAllyHelp_;
  /// <summary>
  ///发起仙盟求助次数 --重置为0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LaunchAllyHelp {
    get { return launchAllyHelp_; }
    set {
      launchAllyHelp_ = value;
    }
  }

  /// <summary>Field number for the "surpriseBoxTimes" field.</summary>
  public const int SurpriseBoxTimesFieldNumber = 14;
  private int surpriseBoxTimes_;
  /// <summary>
  ///map&lt;int32,ShopPayPb> shopPay=13; //商品付费信息 --直接清空 *********************************废弃********************
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SurpriseBoxTimes {
    get { return surpriseBoxTimes_; }
    set {
      surpriseBoxTimes_ = value;
    }
  }

  /// <summary>Field number for the "eggByDay" field.</summary>
  public const int EggByDayFieldNumber = 15;
  private int eggByDay_;
  /// <summary>
  ///本日孵蛋数 --重置为0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EggByDay {
    get { return eggByDay_; }
    set {
      eggByDay_ = value;
    }
  }

  /// <summary>Field number for the "poolItemRate" field.</summary>
  public const int PoolItemRateFieldNumber = 16;
  private int poolItemRate_;
  /// <summary>
  ///孵化池产出道具概率百分比 --重置为50,每次递减5
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PoolItemRate {
    get { return poolItemRate_; }
    set {
      poolItemRate_ = value;
    }
  }

  /// <summary>Field number for the "tsRefreshTimes" field.</summary>
  public const int TsRefreshTimesFieldNumber = 17;
  private int tsRefreshTimes_;
  /// <summary>
  ///通天塔商店刷新次数 --重置为0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TsRefreshTimes {
    get { return tsRefreshTimes_; }
    set {
      tsRefreshTimes_ = value;
    }
  }

  /// <summary>Field number for the "adRewardTimes" field.</summary>
  public const int AdRewardTimesFieldNumber = 18;
  private static readonly pbc::MapField<int, int>.Codec _map_adRewardTimes_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 146);
  private readonly pbc::MapField<int, int> adRewardTimes_ = new pbc::MapField<int, int>();
  /// <summary>
  ///广告获取奖励次数 &lt;广告id,当日领取次数> --直接清空
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> AdRewardTimes {
    get { return adRewardTimes_; }
  }

  /// <summary>Field number for the "xyGitBagFreeTimes" field.</summary>
  public const int XyGitBagFreeTimesFieldNumber = 19;
  private static readonly pbc::MapField<int, int>.Codec _map_xyGitBagFreeTimes_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 154);
  private readonly pbc::MapField<int, int> xyGitBagFreeTimes_ = new pbc::MapField<int, int>();
  /// <summary>
  ///仙玉礼包免费领取次数 --直接清空
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> XyGitBagFreeTimes {
    get { return xyGitBagFreeTimes_; }
  }

  /// <summary>Field number for the "everyDayGiftTimes" field.</summary>
  public const int EveryDayGiftTimesFieldNumber = 20;
  private static readonly pbc::MapField<int, int>.Codec _map_everyDayGiftTimes_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 162);
  private readonly pbc::MapField<int, int> everyDayGiftTimes_ = new pbc::MapField<int, int>();
  /// <summary>
  ///每日礼包购买次数 --直接清空
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> EveryDayGiftTimes {
    get { return everyDayGiftTimes_; }
  }

  /// <summary>Field number for the "dayRecharge" field.</summary>
  public const int DayRechargeFieldNumber = 21;
  private int dayRecharge_;
  /// <summary>
  ///每日累充金额 --重置为0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DayRecharge {
    get { return dayRecharge_; }
    set {
      dayRecharge_ = value;
    }
  }

  /// <summary>Field number for the "dayRechargeReward" field.</summary>
  public const int DayRechargeRewardFieldNumber = 22;
  private static readonly pb::FieldCodec<int> _repeated_dayRechargeReward_codec
      = pb::FieldCodec.ForInt32(178);
  private readonly pbc::RepeatedField<int> dayRechargeReward_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///每日累充奖励 --清空
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> DayRechargeReward {
    get { return dayRechargeReward_; }
  }

  /// <summary>Field number for the "offerBuyTimes" field.</summary>
  public const int OfferBuyTimesFieldNumber = 23;
  private int offerBuyTimes_;
  /// <summary>
  ///悬赏购买次数 --重置为0,最大5
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OfferBuyTimes {
    get { return offerBuyTimes_; }
    set {
      offerBuyTimes_ = value;
    }
  }

  /// <summary>Field number for the "limitTimeGiftCd" field.</summary>
  public const int LimitTimeGiftCdFieldNumber = 24;
  private static readonly pbc::MapField<int, int>.Codec _map_limitTimeGiftCd_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 194);
  private readonly pbc::MapField<int, int> limitTimeGiftCd_ = new pbc::MapField<int, int>();
  /// <summary>
  ///限时礼包倒计时cd k:礼包id v:倒计时结束时刻(=0说明当日未触发 =-1说明当日已购买) --直接清空
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> LimitTimeGiftCd {
    get { return limitTimeGiftCd_; }
  }

  /// <summary>Field number for the "cloudGiftTimes" field.</summary>
  public const int CloudGiftTimesFieldNumber = 25;
  private static readonly pbc::MapField<int, int>.Codec _map_cloudGiftTimes_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 202);
  private readonly pbc::MapField<int, int> cloudGiftTimes_ = new pbc::MapField<int, int>();
  /// <summary>
  ///云游礼包购买次数 --直接清空 k:礼包id v:购买次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> CloudGiftTimes {
    get { return cloudGiftTimes_; }
  }

  /// <summary>Field number for the "cloudPrivilegeGiftTestTime" field.</summary>
  public const int CloudPrivilegeGiftTestTimeFieldNumber = 26;
  private int cloudPrivilegeGiftTestTime_;
  /// <summary>
  ///云游特权礼包体验结束时间 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CloudPrivilegeGiftTestTime {
    get { return cloudPrivilegeGiftTestTime_; }
    set {
      cloudPrivilegeGiftTestTime_ = value;
    }
  }

  /// <summary>Field number for the "cloudPrivilegeGiftTestNum" field.</summary>
  public const int CloudPrivilegeGiftTestNumFieldNumber = 27;
  private int cloudPrivilegeGiftTestNum_;
  /// <summary>
  ///云游特权礼包体验次数  --重置为6 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CloudPrivilegeGiftTestNum {
    get { return cloudPrivilegeGiftTestNum_; }
    set {
      cloudPrivilegeGiftTestNum_ = value;
    }
  }

  /// <summary>Field number for the "humanSceneOpTimes" field.</summary>
  public const int HumanSceneOpTimesFieldNumber = 28;
  private int humanSceneOpTimes_;
  /// <summary>
  ///人界扫荡次数 --重置为6
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HumanSceneOpTimes {
    get { return humanSceneOpTimes_; }
    set {
      humanSceneOpTimes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DailyRefreshPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DailyRefreshPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    if (!DailyNums.Equals(other.DailyNums)) return false;
    if (AdResRTimes != other.AdResRTimes) return false;
    if (ItemResRCost != other.ItemResRCost) return false;
    if (RoughFreeTimes != other.RoughFreeTimes) return false;
    if (RoughNormalTimes != other.RoughNormalTimes) return false;
    if (RoughSpecialTimes != other.RoughSpecialTimes) return false;
    if (!ShopBuyTimes.Equals(other.ShopBuyTimes)) return false;
    if (DevilBuyTimes != other.DevilBuyTimes) return false;
    if(!eggReward_.Equals(other.eggReward_)) return false;
    if (ImmortalSceneOpTimes != other.ImmortalSceneOpTimes) return false;
    if (LaunchAllyHelp != other.LaunchAllyHelp) return false;
    if (SurpriseBoxTimes != other.SurpriseBoxTimes) return false;
    if (EggByDay != other.EggByDay) return false;
    if (PoolItemRate != other.PoolItemRate) return false;
    if (TsRefreshTimes != other.TsRefreshTimes) return false;
    if (!AdRewardTimes.Equals(other.AdRewardTimes)) return false;
    if (!XyGitBagFreeTimes.Equals(other.XyGitBagFreeTimes)) return false;
    if (!EveryDayGiftTimes.Equals(other.EveryDayGiftTimes)) return false;
    if (DayRecharge != other.DayRecharge) return false;
    if(!dayRechargeReward_.Equals(other.dayRechargeReward_)) return false;
    if (OfferBuyTimes != other.OfferBuyTimes) return false;
    if (!LimitTimeGiftCd.Equals(other.LimitTimeGiftCd)) return false;
    if (!CloudGiftTimes.Equals(other.CloudGiftTimes)) return false;
    if (CloudPrivilegeGiftTestTime != other.CloudPrivilegeGiftTestTime) return false;
    if (CloudPrivilegeGiftTestNum != other.CloudPrivilegeGiftTestNum) return false;
    if (HumanSceneOpTimes != other.HumanSceneOpTimes) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Time != 0L) hash ^= Time.GetHashCode();
    hash ^= DailyNums.GetHashCode();
    if (AdResRTimes != 0) hash ^= AdResRTimes.GetHashCode();
    if (ItemResRCost != 0) hash ^= ItemResRCost.GetHashCode();
    if (RoughFreeTimes != 0) hash ^= RoughFreeTimes.GetHashCode();
    if (RoughNormalTimes != 0) hash ^= RoughNormalTimes.GetHashCode();
    if (RoughSpecialTimes != 0) hash ^= RoughSpecialTimes.GetHashCode();
    hash ^= ShopBuyTimes.GetHashCode();
    if (DevilBuyTimes != 0) hash ^= DevilBuyTimes.GetHashCode();
    hash ^= eggReward_.GetHashCode();
    if (ImmortalSceneOpTimes != 0) hash ^= ImmortalSceneOpTimes.GetHashCode();
    if (LaunchAllyHelp != 0) hash ^= LaunchAllyHelp.GetHashCode();
    if (SurpriseBoxTimes != 0) hash ^= SurpriseBoxTimes.GetHashCode();
    if (EggByDay != 0) hash ^= EggByDay.GetHashCode();
    if (PoolItemRate != 0) hash ^= PoolItemRate.GetHashCode();
    if (TsRefreshTimes != 0) hash ^= TsRefreshTimes.GetHashCode();
    hash ^= AdRewardTimes.GetHashCode();
    hash ^= XyGitBagFreeTimes.GetHashCode();
    hash ^= EveryDayGiftTimes.GetHashCode();
    if (DayRecharge != 0) hash ^= DayRecharge.GetHashCode();
    hash ^= dayRechargeReward_.GetHashCode();
    if (OfferBuyTimes != 0) hash ^= OfferBuyTimes.GetHashCode();
    hash ^= LimitTimeGiftCd.GetHashCode();
    hash ^= CloudGiftTimes.GetHashCode();
    if (CloudPrivilegeGiftTestTime != 0) hash ^= CloudPrivilegeGiftTestTime.GetHashCode();
    if (CloudPrivilegeGiftTestNum != 0) hash ^= CloudPrivilegeGiftTestNum.GetHashCode();
    if (HumanSceneOpTimes != 0) hash ^= HumanSceneOpTimes.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Time != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Time);
    }
    dailyNums_.WriteTo(output, _map_dailyNums_codec);
    if (AdResRTimes != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(AdResRTimes);
    }
    if (ItemResRCost != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ItemResRCost);
    }
    if (RoughFreeTimes != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(RoughFreeTimes);
    }
    if (RoughNormalTimes != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(RoughNormalTimes);
    }
    if (RoughSpecialTimes != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(RoughSpecialTimes);
    }
    shopBuyTimes_.WriteTo(output, _map_shopBuyTimes_codec);
    if (DevilBuyTimes != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(DevilBuyTimes);
    }
    eggReward_.WriteTo(output, _repeated_eggReward_codec);
    if (ImmortalSceneOpTimes != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(ImmortalSceneOpTimes);
    }
    if (LaunchAllyHelp != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(LaunchAllyHelp);
    }
    if (SurpriseBoxTimes != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(SurpriseBoxTimes);
    }
    if (EggByDay != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(EggByDay);
    }
    if (PoolItemRate != 0) {
      output.WriteRawTag(128, 1);
      output.WriteInt32(PoolItemRate);
    }
    if (TsRefreshTimes != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(TsRefreshTimes);
    }
    adRewardTimes_.WriteTo(output, _map_adRewardTimes_codec);
    xyGitBagFreeTimes_.WriteTo(output, _map_xyGitBagFreeTimes_codec);
    everyDayGiftTimes_.WriteTo(output, _map_everyDayGiftTimes_codec);
    if (DayRecharge != 0) {
      output.WriteRawTag(168, 1);
      output.WriteInt32(DayRecharge);
    }
    dayRechargeReward_.WriteTo(output, _repeated_dayRechargeReward_codec);
    if (OfferBuyTimes != 0) {
      output.WriteRawTag(184, 1);
      output.WriteInt32(OfferBuyTimes);
    }
    limitTimeGiftCd_.WriteTo(output, _map_limitTimeGiftCd_codec);
    cloudGiftTimes_.WriteTo(output, _map_cloudGiftTimes_codec);
    if (CloudPrivilegeGiftTestTime != 0) {
      output.WriteRawTag(208, 1);
      output.WriteInt32(CloudPrivilegeGiftTestTime);
    }
    if (CloudPrivilegeGiftTestNum != 0) {
      output.WriteRawTag(216, 1);
      output.WriteInt32(CloudPrivilegeGiftTestNum);
    }
    if (HumanSceneOpTimes != 0) {
      output.WriteRawTag(224, 1);
      output.WriteInt32(HumanSceneOpTimes);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Time != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    size += dailyNums_.CalculateSize(_map_dailyNums_codec);
    if (AdResRTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdResRTimes);
    }
    if (ItemResRCost != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemResRCost);
    }
    if (RoughFreeTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoughFreeTimes);
    }
    if (RoughNormalTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoughNormalTimes);
    }
    if (RoughSpecialTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoughSpecialTimes);
    }
    size += shopBuyTimes_.CalculateSize(_map_shopBuyTimes_codec);
    if (DevilBuyTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DevilBuyTimes);
    }
    size += eggReward_.CalculateSize(_repeated_eggReward_codec);
    if (ImmortalSceneOpTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImmortalSceneOpTimes);
    }
    if (LaunchAllyHelp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaunchAllyHelp);
    }
    if (SurpriseBoxTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurpriseBoxTimes);
    }
    if (EggByDay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EggByDay);
    }
    if (PoolItemRate != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PoolItemRate);
    }
    if (TsRefreshTimes != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TsRefreshTimes);
    }
    size += adRewardTimes_.CalculateSize(_map_adRewardTimes_codec);
    size += xyGitBagFreeTimes_.CalculateSize(_map_xyGitBagFreeTimes_codec);
    size += everyDayGiftTimes_.CalculateSize(_map_everyDayGiftTimes_codec);
    if (DayRecharge != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(DayRecharge);
    }
    size += dayRechargeReward_.CalculateSize(_repeated_dayRechargeReward_codec);
    if (OfferBuyTimes != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(OfferBuyTimes);
    }
    size += limitTimeGiftCd_.CalculateSize(_map_limitTimeGiftCd_codec);
    size += cloudGiftTimes_.CalculateSize(_map_cloudGiftTimes_codec);
    if (CloudPrivilegeGiftTestTime != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CloudPrivilegeGiftTestTime);
    }
    if (CloudPrivilegeGiftTestNum != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CloudPrivilegeGiftTestNum);
    }
    if (HumanSceneOpTimes != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(HumanSceneOpTimes);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DailyRefreshPb other) {
    if (other == null) {
      return;
    }
    if (other.Time != 0L) {
      Time = other.Time;
    }
    dailyNums_.Add(other.dailyNums_);
    if (other.AdResRTimes != 0) {
      AdResRTimes = other.AdResRTimes;
    }
    if (other.ItemResRCost != 0) {
      ItemResRCost = other.ItemResRCost;
    }
    if (other.RoughFreeTimes != 0) {
      RoughFreeTimes = other.RoughFreeTimes;
    }
    if (other.RoughNormalTimes != 0) {
      RoughNormalTimes = other.RoughNormalTimes;
    }
    if (other.RoughSpecialTimes != 0) {
      RoughSpecialTimes = other.RoughSpecialTimes;
    }
    shopBuyTimes_.Add(other.shopBuyTimes_);
    if (other.DevilBuyTimes != 0) {
      DevilBuyTimes = other.DevilBuyTimes;
    }
    eggReward_.Add(other.eggReward_);
    if (other.ImmortalSceneOpTimes != 0) {
      ImmortalSceneOpTimes = other.ImmortalSceneOpTimes;
    }
    if (other.LaunchAllyHelp != 0) {
      LaunchAllyHelp = other.LaunchAllyHelp;
    }
    if (other.SurpriseBoxTimes != 0) {
      SurpriseBoxTimes = other.SurpriseBoxTimes;
    }
    if (other.EggByDay != 0) {
      EggByDay = other.EggByDay;
    }
    if (other.PoolItemRate != 0) {
      PoolItemRate = other.PoolItemRate;
    }
    if (other.TsRefreshTimes != 0) {
      TsRefreshTimes = other.TsRefreshTimes;
    }
    adRewardTimes_.Add(other.adRewardTimes_);
    xyGitBagFreeTimes_.Add(other.xyGitBagFreeTimes_);
    everyDayGiftTimes_.Add(other.everyDayGiftTimes_);
    if (other.DayRecharge != 0) {
      DayRecharge = other.DayRecharge;
    }
    dayRechargeReward_.Add(other.dayRechargeReward_);
    if (other.OfferBuyTimes != 0) {
      OfferBuyTimes = other.OfferBuyTimes;
    }
    limitTimeGiftCd_.Add(other.limitTimeGiftCd_);
    cloudGiftTimes_.Add(other.cloudGiftTimes_);
    if (other.CloudPrivilegeGiftTestTime != 0) {
      CloudPrivilegeGiftTestTime = other.CloudPrivilegeGiftTestTime;
    }
    if (other.CloudPrivilegeGiftTestNum != 0) {
      CloudPrivilegeGiftTestNum = other.CloudPrivilegeGiftTestNum;
    }
    if (other.HumanSceneOpTimes != 0) {
      HumanSceneOpTimes = other.HumanSceneOpTimes;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Time = input.ReadInt64();
          break;
        }
        case 18: {
          dailyNums_.AddEntriesFrom(input, _map_dailyNums_codec);
          break;
        }
        case 24: {
          AdResRTimes = input.ReadInt32();
          break;
        }
        case 32: {
          ItemResRCost = input.ReadInt32();
          break;
        }
        case 40: {
          RoughFreeTimes = input.ReadInt32();
          break;
        }
        case 48: {
          RoughNormalTimes = input.ReadInt32();
          break;
        }
        case 56: {
          RoughSpecialTimes = input.ReadInt32();
          break;
        }
        case 66: {
          shopBuyTimes_.AddEntriesFrom(input, _map_shopBuyTimes_codec);
          break;
        }
        case 72: {
          DevilBuyTimes = input.ReadInt32();
          break;
        }
        case 82:
        case 80: {
          eggReward_.AddEntriesFrom(input, _repeated_eggReward_codec);
          break;
        }
        case 88: {
          ImmortalSceneOpTimes = input.ReadInt32();
          break;
        }
        case 96: {
          LaunchAllyHelp = input.ReadInt32();
          break;
        }
        case 112: {
          SurpriseBoxTimes = input.ReadInt32();
          break;
        }
        case 120: {
          EggByDay = input.ReadInt32();
          break;
        }
        case 128: {
          PoolItemRate = input.ReadInt32();
          break;
        }
        case 136: {
          TsRefreshTimes = input.ReadInt32();
          break;
        }
        case 146: {
          adRewardTimes_.AddEntriesFrom(input, _map_adRewardTimes_codec);
          break;
        }
        case 154: {
          xyGitBagFreeTimes_.AddEntriesFrom(input, _map_xyGitBagFreeTimes_codec);
          break;
        }
        case 162: {
          everyDayGiftTimes_.AddEntriesFrom(input, _map_everyDayGiftTimes_codec);
          break;
        }
        case 168: {
          DayRecharge = input.ReadInt32();
          break;
        }
        case 178:
        case 176: {
          dayRechargeReward_.AddEntriesFrom(input, _repeated_dayRechargeReward_codec);
          break;
        }
        case 184: {
          OfferBuyTimes = input.ReadInt32();
          break;
        }
        case 194: {
          limitTimeGiftCd_.AddEntriesFrom(input, _map_limitTimeGiftCd_codec);
          break;
        }
        case 202: {
          cloudGiftTimes_.AddEntriesFrom(input, _map_cloudGiftTimes_codec);
          break;
        }
        case 208: {
          CloudPrivilegeGiftTestTime = input.ReadInt32();
          break;
        }
        case 216: {
          CloudPrivilegeGiftTestNum = input.ReadInt32();
          break;
        }
        case 224: {
          HumanSceneOpTimes = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///每周刷新 
/// </summary>
public sealed partial class WeekRefreshPb : pb::IMessage<WeekRefreshPb> {
  private static readonly pb::MessageParser<WeekRefreshPb> _parser = new pb::MessageParser<WeekRefreshPb>(() => new WeekRefreshPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WeekRefreshPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WeekRefreshPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WeekRefreshPb(WeekRefreshPb other) : this() {
    week_ = other.week_;
    egg_ = other.egg_;
    weekGiftBuy_ = other.weekGiftBuy_.Clone();
    devilRankMailDay_ = other.devilRankMailDay_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WeekRefreshPb Clone() {
    return new WeekRefreshPb(this);
  }

  /// <summary>Field number for the "week" field.</summary>
  public const int WeekFieldNumber = 1;
  private int week_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Week {
    get { return week_; }
    set {
      week_ = value;
    }
  }

  /// <summary>Field number for the "egg" field.</summary>
  public const int EggFieldNumber = 2;
  private int egg_;
  /// <summary>
  ///每周孵蛋数 --重置为0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Egg {
    get { return egg_; }
    set {
      egg_ = value;
    }
  }

  /// <summary>Field number for the "weekGiftBuy" field.</summary>
  public const int WeekGiftBuyFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_weekGiftBuy_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> weekGiftBuy_ = new pbc::MapField<int, int>();
  /// <summary>
  ///周礼包购买次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> WeekGiftBuy {
    get { return weekGiftBuy_; }
  }

  /// <summary>Field number for the "devilRankMailDay" field.</summary>
  public const int DevilRankMailDayFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_devilRankMailDay_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> devilRankMailDay_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> DevilRankMailDay {
    get { return devilRankMailDay_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WeekRefreshPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WeekRefreshPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Week != other.Week) return false;
    if (Egg != other.Egg) return false;
    if (!WeekGiftBuy.Equals(other.WeekGiftBuy)) return false;
    if (!DevilRankMailDay.Equals(other.DevilRankMailDay)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Week != 0) hash ^= Week.GetHashCode();
    if (Egg != 0) hash ^= Egg.GetHashCode();
    hash ^= WeekGiftBuy.GetHashCode();
    hash ^= DevilRankMailDay.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Week != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Week);
    }
    if (Egg != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Egg);
    }
    weekGiftBuy_.WriteTo(output, _map_weekGiftBuy_codec);
    devilRankMailDay_.WriteTo(output, _map_devilRankMailDay_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Week != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Week);
    }
    if (Egg != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Egg);
    }
    size += weekGiftBuy_.CalculateSize(_map_weekGiftBuy_codec);
    size += devilRankMailDay_.CalculateSize(_map_devilRankMailDay_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WeekRefreshPb other) {
    if (other == null) {
      return;
    }
    if (other.Week != 0) {
      Week = other.Week;
    }
    if (other.Egg != 0) {
      Egg = other.Egg;
    }
    weekGiftBuy_.Add(other.weekGiftBuy_);
    devilRankMailDay_.Add(other.devilRankMailDay_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Week = input.ReadInt32();
          break;
        }
        case 16: {
          Egg = input.ReadInt32();
          break;
        }
        case 26: {
          weekGiftBuy_.AddEntriesFrom(input, _map_weekGiftBuy_codec);
          break;
        }
        case 34: {
          devilRankMailDay_.AddEntriesFrom(input, _map_devilRankMailDay_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///法宝
/// </summary>
public sealed partial class TreasurePb : pb::IMessage<TreasurePb> {
  private static readonly pb::MessageParser<TreasurePb> _parser = new pb::MessageParser<TreasurePb>(() => new TreasurePb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TreasurePb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasurePb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasurePb(TreasurePb other) : this() {
    srl_ = other.srl_;
    id_ = other.id_;
    step_ = other.step_;
    level_ = other.level_;
    grid_ = other.grid_;
    added_ = other.added_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TreasurePb Clone() {
    return new TreasurePb(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  /// <summary>
  ///序号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "step" field.</summary>
  public const int StepFieldNumber = 3;
  private int step_;
  /// <summary>
  ///阶
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Step {
    get { return step_; }
    set {
      step_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 4;
  private int level_;
  /// <summary>
  ///当前等级 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "grid" field.</summary>
  public const int GridFieldNumber = 5;
  private int grid_;
  /// <summary>
  ///当前经验格
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Grid {
    get { return grid_; }
    set {
      grid_ = value;
    }
  }

  /// <summary>Field number for the "added" field.</summary>
  public const int AddedFieldNumber = 6;
  private static readonly pbc::MapField<int, int>.Codec _map_added_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 50);
  private readonly pbc::MapField<int, int> added_ = new pbc::MapField<int, int>();
  /// <summary>
  ///加成 属性id,属性值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Added {
    get { return added_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TreasurePb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TreasurePb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    if (Id != other.Id) return false;
    if (Step != other.Step) return false;
    if (Level != other.Level) return false;
    if (Grid != other.Grid) return false;
    if (!Added.Equals(other.Added)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Step != 0) hash ^= Step.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Grid != 0) hash ^= Grid.GetHashCode();
    hash ^= Added.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
    if (Id != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Id);
    }
    if (Step != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Step);
    }
    if (Level != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Level);
    }
    if (Grid != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Grid);
    }
    added_.WriteTo(output, _map_added_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Step != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Grid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grid);
    }
    size += added_.CalculateSize(_map_added_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TreasurePb other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Step != 0) {
      Step = other.Step;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Grid != 0) {
      Grid = other.Grid;
    }
    added_.Add(other.added_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
        case 16: {
          Id = input.ReadInt32();
          break;
        }
        case 24: {
          Step = input.ReadInt32();
          break;
        }
        case 32: {
          Level = input.ReadInt32();
          break;
        }
        case 40: {
          Grid = input.ReadInt32();
          break;
        }
        case 50: {
          added_.AddEntriesFrom(input, _map_added_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///原石
/// </summary>
public sealed partial class RoughPb : pb::IMessage<RoughPb> {
  private static readonly pb::MessageParser<RoughPb> _parser = new pb::MessageParser<RoughPb>(() => new RoughPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoughPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughPb(RoughPb other) : this() {
    srl_ = other.srl_;
    id_ = other.id_;
    layer_ = other.layer_;
    treasureId_ = other.treasureId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoughPb Clone() {
    return new RoughPb(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  /// <summary>
  ///序号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "layer" field.</summary>
  public const int LayerFieldNumber = 3;
  private int layer_;
  /// <summary>
  ///当前所需剥离层数 (默认最大层)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Layer {
    get { return layer_; }
    set {
      layer_ = value;
    }
  }

  /// <summary>Field number for the "treasureId" field.</summary>
  public const int TreasureIdFieldNumber = 4;
  private int treasureId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TreasureId {
    get { return treasureId_; }
    set {
      treasureId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoughPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoughPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    if (Id != other.Id) return false;
    if (Layer != other.Layer) return false;
    if (TreasureId != other.TreasureId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Layer != 0) hash ^= Layer.GetHashCode();
    if (TreasureId != 0) hash ^= TreasureId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
    if (Id != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Id);
    }
    if (Layer != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Layer);
    }
    if (TreasureId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TreasureId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Layer != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Layer);
    }
    if (TreasureId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TreasureId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoughPb other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Layer != 0) {
      Layer = other.Layer;
    }
    if (other.TreasureId != 0) {
      TreasureId = other.TreasureId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
        case 16: {
          Id = input.ReadInt32();
          break;
        }
        case 24: {
          Layer = input.ReadInt32();
          break;
        }
        case 32: {
          TreasureId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///装备
/// </summary>
public sealed partial class EquipPb : pb::IMessage<EquipPb> {
  private static readonly pb::MessageParser<EquipPb> _parser = new pb::MessageParser<EquipPb>(() => new EquipPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EquipPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EquipPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EquipPb(EquipPb other) : this() {
    srl_ = other.srl_;
    id_ = other.id_;
    attr_ = other.attr_.Clone();
    grade_ = other.grade_;
    level_ = other.level_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EquipPb Clone() {
    return new EquipPb(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  /// <summary>
  ///序号，唯一
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private int id_;
  /// <summary>
  ///配置id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_attr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> attr_ = new pbc::MapField<int, int>();
  /// <summary>
  ///属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Attr {
    get { return attr_; }
  }

  /// <summary>Field number for the "grade" field.</summary>
  public const int GradeFieldNumber = 4;
  private int grade_;
  /// <summary>
  ///品质
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Grade {
    get { return grade_; }
    set {
      grade_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 5;
  private int level_;
  /// <summary>
  ///装备等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EquipPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EquipPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    if (Id != other.Id) return false;
    if (!Attr.Equals(other.Attr)) return false;
    if (Grade != other.Grade) return false;
    if (Level != other.Level) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    if (Id != 0) hash ^= Id.GetHashCode();
    hash ^= Attr.GetHashCode();
    if (Grade != 0) hash ^= Grade.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
    if (Id != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Id);
    }
    attr_.WriteTo(output, _map_attr_codec);
    if (Grade != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Grade);
    }
    if (Level != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Level);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    size += attr_.CalculateSize(_map_attr_codec);
    if (Grade != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EquipPb other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    attr_.Add(other.attr_);
    if (other.Grade != 0) {
      Grade = other.Grade;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
        case 16: {
          Id = input.ReadInt32();
          break;
        }
        case 26: {
          attr_.AddEntriesFrom(input, _map_attr_codec);
          break;
        }
        case 32: {
          Grade = input.ReadInt32();
          break;
        }
        case 40: {
          Level = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///矿脉
/// </summary>
public sealed partial class MinePb : pb::IMessage<MinePb> {
  private static readonly pb::MessageParser<MinePb> _parser = new pb::MessageParser<MinePb>(() => new MinePb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MinePb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MinePb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MinePb(MinePb other) : this() {
    putTreasure_ = other.putTreasure_.Clone();
    putTime_ = other.putTime_.Clone();
    rough_ = other.rough_.Clone();
    Reward = other.reward_ != null ? other.Reward.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MinePb Clone() {
    return new MinePb(this);
  }

  /// <summary>Field number for the "putTreasure" field.</summary>
  public const int PutTreasureFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_putTreasure_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> putTreasure_ = new pbc::MapField<int, int>();
  /// <summary>
  ///放置的法宝 pos,srl pos[1,2,3,4]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> PutTreasure {
    get { return putTreasure_; }
  }

  /// <summary>Field number for the "putTime" field.</summary>
  public const int PutTimeFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_putTime_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> putTime_ = new pbc::MapField<int, int>();
  /// <summary>
  ///挂机时间 秒 pos,time
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> PutTime {
    get { return putTime_; }
  }

  /// <summary>Field number for the "rough" field.</summary>
  public const int RoughFieldNumber = 3;
  private static readonly pb::FieldCodec<global::RoughPb> _repeated_rough_codec
      = pb::FieldCodec.ForMessage(26, global::RoughPb.Parser);
  private readonly pbc::RepeatedField<global::RoughPb> rough_ = new pbc::RepeatedField<global::RoughPb>();
  /// <summary>
  ///矿脉原石
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RoughPb> Rough {
    get { return rough_; }
  }

  /// <summary>Field number for the "reward" field.</summary>
  public const int RewardFieldNumber = 4;
  private global::ItemPb reward_;
  /// <summary>
  ///当前累计的奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ItemPb Reward {
    get { return reward_; }
    set {
      reward_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MinePb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MinePb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!PutTreasure.Equals(other.PutTreasure)) return false;
    if (!PutTime.Equals(other.PutTime)) return false;
    if(!rough_.Equals(other.rough_)) return false;
    if (!object.Equals(Reward, other.Reward)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= PutTreasure.GetHashCode();
    hash ^= PutTime.GetHashCode();
    hash ^= rough_.GetHashCode();
    if (reward_ != null) hash ^= Reward.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    putTreasure_.WriteTo(output, _map_putTreasure_codec);
    putTime_.WriteTo(output, _map_putTime_codec);
    rough_.WriteTo(output, _repeated_rough_codec);
    if (reward_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Reward);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += putTreasure_.CalculateSize(_map_putTreasure_codec);
    size += putTime_.CalculateSize(_map_putTime_codec);
    size += rough_.CalculateSize(_repeated_rough_codec);
    if (reward_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MinePb other) {
    if (other == null) {
      return;
    }
    putTreasure_.Add(other.putTreasure_);
    putTime_.Add(other.putTime_);
    rough_.Add(other.rough_);
    if (other.reward_ != null) {
      if (reward_ == null) {
        reward_ = new global::ItemPb();
      }
      Reward.MergeFrom(other.Reward);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          putTreasure_.AddEntriesFrom(input, _map_putTreasure_codec);
          break;
        }
        case 18: {
          putTime_.AddEntriesFrom(input, _map_putTime_codec);
          break;
        }
        case 26: {
          rough_.AddEntriesFrom(input, _repeated_rough_codec);
          break;
        }
        case 34: {
          if (reward_ == null) {
            reward_ = new global::ItemPb();
          }
          input.ReadMessage(reward_);
          break;
        }
      }
    }
  }

}

public sealed partial class MainTaskPb : pb::IMessage<MainTaskPb> {
  private static readonly pb::MessageParser<MainTaskPb> _parser = new pb::MessageParser<MainTaskPb>(() => new MainTaskPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MainTaskPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MainTaskPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MainTaskPb(MainTaskPb other) : this() {
    id_ = other.id_;
    param1_ = other.param1_;
    param2_ = other.param2_;
    state_ = other.state_;
    ex1_ = other.ex1_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MainTaskPb Clone() {
    return new MainTaskPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///当前任务id   -- -1代表主线全部完成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "param1" field.</summary>
  public const int Param1FieldNumber = 2;
  private int param1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Param1 {
    get { return param1_; }
    set {
      param1_ = value;
    }
  }

  /// <summary>Field number for the "param2" field.</summary>
  public const int Param2FieldNumber = 3;
  private int param2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Param2 {
    get { return param2_; }
    set {
      param2_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private int state_;
  /// <summary>
  ///0-未完成 1-已完成, 2-已领取
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "ex1" field.</summary>
  public const int Ex1FieldNumber = 5;
  private static readonly pb::FieldCodec<int> _repeated_ex1_codec
      = pb::FieldCodec.ForInt32(42);
  private readonly pbc::RepeatedField<int> ex1_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Ex1 {
    get { return ex1_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MainTaskPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MainTaskPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Param1 != other.Param1) return false;
    if (Param2 != other.Param2) return false;
    if (State != other.State) return false;
    if(!ex1_.Equals(other.ex1_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Param1 != 0) hash ^= Param1.GetHashCode();
    if (Param2 != 0) hash ^= Param2.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    hash ^= ex1_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Param1 != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Param1);
    }
    if (Param2 != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Param2);
    }
    if (State != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(State);
    }
    ex1_.WriteTo(output, _repeated_ex1_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Param1 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param1);
    }
    if (Param2 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param2);
    }
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
    }
    size += ex1_.CalculateSize(_repeated_ex1_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MainTaskPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Param1 != 0) {
      Param1 = other.Param1;
    }
    if (other.Param2 != 0) {
      Param2 = other.Param2;
    }
    if (other.State != 0) {
      State = other.State;
    }
    ex1_.Add(other.ex1_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Param1 = input.ReadInt32();
          break;
        }
        case 24: {
          Param2 = input.ReadInt32();
          break;
        }
        case 32: {
          State = input.ReadInt32();
          break;
        }
        case 42:
        case 40: {
          ex1_.AddEntriesFrom(input, _repeated_ex1_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家任务
/// </summary>
public sealed partial class PTaskPb : pb::IMessage<PTaskPb> {
  private static readonly pb::MessageParser<PTaskPb> _parser = new pb::MessageParser<PTaskPb>(() => new PTaskPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PTaskPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PTaskPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PTaskPb(PTaskPb other) : this() {
    mainId_ = other.mainId_;
    traceTask_ = other.traceTask_.Clone();
    finishTasks_ = other.finishTasks_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PTaskPb Clone() {
    return new PTaskPb(this);
  }

  /// <summary>Field number for the "mainId" field.</summary>
  public const int MainIdFieldNumber = 1;
  private int mainId_;
  /// <summary>
  ///当前主线任务id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MainId {
    get { return mainId_; }
    set {
      mainId_ = value;
    }
  }

  /// <summary>Field number for the "traceTask" field.</summary>
  public const int TraceTaskFieldNumber = 2;
  private static readonly pbc::MapField<int, global::MainTaskPb>.Codec _map_traceTask_codec
      = new pbc::MapField<int, global::MainTaskPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::MainTaskPb.Parser), 18);
  private readonly pbc::MapField<int, global::MainTaskPb> traceTask_ = new pbc::MapField<int, global::MainTaskPb>();
  /// <summary>
  ///所有需要追踪的任务,包含了主线
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::MainTaskPb> TraceTask {
    get { return traceTask_; }
  }

  /// <summary>Field number for the "finishTasks" field.</summary>
  public const int FinishTasksFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_finishTasks_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> finishTasks_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 所有完成的任务ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> FinishTasks {
    get { return finishTasks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PTaskPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PTaskPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MainId != other.MainId) return false;
    if (!TraceTask.Equals(other.TraceTask)) return false;
    if(!finishTasks_.Equals(other.finishTasks_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MainId != 0) hash ^= MainId.GetHashCode();
    hash ^= TraceTask.GetHashCode();
    hash ^= finishTasks_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MainId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MainId);
    }
    traceTask_.WriteTo(output, _map_traceTask_codec);
    finishTasks_.WriteTo(output, _repeated_finishTasks_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MainId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainId);
    }
    size += traceTask_.CalculateSize(_map_traceTask_codec);
    size += finishTasks_.CalculateSize(_repeated_finishTasks_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PTaskPb other) {
    if (other == null) {
      return;
    }
    if (other.MainId != 0) {
      MainId = other.MainId;
    }
    traceTask_.Add(other.traceTask_);
    finishTasks_.Add(other.finishTasks_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          MainId = input.ReadInt32();
          break;
        }
        case 18: {
          traceTask_.AddEntriesFrom(input, _map_traceTask_codec);
          break;
        }
        case 26:
        case 24: {
          finishTasks_.AddEntriesFrom(input, _repeated_finishTasks_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///关卡
/// </summary>
public sealed partial class ScenePb : pb::IMessage<ScenePb> {
  private static readonly pb::MessageParser<ScenePb> _parser = new pb::MessageParser<ScenePb>(() => new ScenePb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ScenePb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ScenePb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ScenePb(ScenePb other) : this() {
    immortalScene_ = other.immortalScene_;
    scene_ = other.scene_;
    humanScene_ = other.humanScene_;
    rewardChapter_ = other.rewardChapter_;
    hasReward_ = other.hasReward_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ScenePb Clone() {
    return new ScenePb(this);
  }

  /// <summary>Field number for the "immortalScene" field.</summary>
  public const int ImmortalSceneFieldNumber = 13;
  private int immortalScene_;
  /// <summary>
  ///仙界关卡,已通关id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ImmortalScene {
    get { return immortalScene_; }
    set {
      immortalScene_ = value;
    }
  }

  /// <summary>Field number for the "scene" field.</summary>
  public const int SceneFieldNumber = 14;
  private int scene_;
  /// <summary>
  ///当前主线关卡,已通关id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Scene {
    get { return scene_; }
    set {
      scene_ = value;
    }
  }

  /// <summary>Field number for the "humanScene" field.</summary>
  public const int HumanSceneFieldNumber = 15;
  private int humanScene_;
  /// <summary>
  ///人界关卡,已通关id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HumanScene {
    get { return humanScene_; }
    set {
      humanScene_ = value;
    }
  }

  /// <summary>Field number for the "rewardChapter" field.</summary>
  public const int RewardChapterFieldNumber = 6;
  private int rewardChapter_;
  /// <summary>
  ///可领取奖励的章节,根据scene 主线关卡计算
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RewardChapter {
    get { return rewardChapter_; }
    set {
      rewardChapter_ = value;
    }
  }

  /// <summary>Field number for the "hasReward" field.</summary>
  public const int HasRewardFieldNumber = 7;
  private int hasReward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HasReward {
    get { return hasReward_; }
    set {
      hasReward_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ScenePb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ScenePb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ImmortalScene != other.ImmortalScene) return false;
    if (Scene != other.Scene) return false;
    if (HumanScene != other.HumanScene) return false;
    if (RewardChapter != other.RewardChapter) return false;
    if (HasReward != other.HasReward) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ImmortalScene != 0) hash ^= ImmortalScene.GetHashCode();
    if (Scene != 0) hash ^= Scene.GetHashCode();
    if (HumanScene != 0) hash ^= HumanScene.GetHashCode();
    if (RewardChapter != 0) hash ^= RewardChapter.GetHashCode();
    if (HasReward != 0) hash ^= HasReward.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RewardChapter != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(RewardChapter);
    }
    if (HasReward != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(HasReward);
    }
    if (ImmortalScene != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(ImmortalScene);
    }
    if (Scene != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(Scene);
    }
    if (HumanScene != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(HumanScene);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ImmortalScene != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImmortalScene);
    }
    if (Scene != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scene);
    }
    if (HumanScene != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HumanScene);
    }
    if (RewardChapter != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardChapter);
    }
    if (HasReward != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HasReward);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ScenePb other) {
    if (other == null) {
      return;
    }
    if (other.ImmortalScene != 0) {
      ImmortalScene = other.ImmortalScene;
    }
    if (other.Scene != 0) {
      Scene = other.Scene;
    }
    if (other.HumanScene != 0) {
      HumanScene = other.HumanScene;
    }
    if (other.RewardChapter != 0) {
      RewardChapter = other.RewardChapter;
    }
    if (other.HasReward != 0) {
      HasReward = other.HasReward;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 48: {
          RewardChapter = input.ReadInt32();
          break;
        }
        case 56: {
          HasReward = input.ReadInt32();
          break;
        }
        case 104: {
          ImmortalScene = input.ReadInt32();
          break;
        }
        case 112: {
          Scene = input.ReadInt32();
          break;
        }
        case 120: {
          HumanScene = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///仙盟求助
/// </summary>
public sealed partial class AllyHelpPb : pb::IMessage<AllyHelpPb> {
  private static readonly pb::MessageParser<AllyHelpPb> _parser = new pb::MessageParser<AllyHelpPb>(() => new AllyHelpPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AllyHelpPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyHelpPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyHelpPb(AllyHelpPb other) : this() {
    pid_ = other.pid_;
    name_ = other.name_;
    helper_ = other.helper_.Clone();
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyHelpPb Clone() {
    return new AllyHelpPb(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  /// <summary>
  ///发起者id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  ///发起者name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "helper" field.</summary>
  public const int HelperFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_helper_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> helper_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///援助者id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Helper {
    get { return helper_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 4;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AllyHelpPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AllyHelpPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Name != other.Name) return false;
    if(!helper_.Equals(other.helper_)) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= helper_.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    helper_.WriteTo(output, _repeated_helper_codec);
    if (Type != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += helper_.CalculateSize(_repeated_helper_codec);
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AllyHelpPb other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    helper_.Add(other.helper_);
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26:
        case 24: {
          helper_.AddEntriesFrom(input, _repeated_helper_codec);
          break;
        }
        case 32: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///仙盟详细信息  pb
/// </summary>
public sealed partial class AllyPb : pb::IMessage<AllyPb> {
  private static readonly pb::MessageParser<AllyPb> _parser = new pb::MessageParser<AllyPb>(() => new AllyPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AllyPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyPb(AllyPb other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    joinLv_ = other.joinLv_;
    num_ = other.num_;
    lv_ = other.lv_;
    limit_ = other.limit_;
    notice_ = other.notice_;
    egg_ = other.egg_;
    members_ = other.members_.Clone();
    eggByDay_ = other.eggByDay_;
    eggTime_ = other.eggTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyPb Clone() {
    return new AllyPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "joinLv" field.</summary>
  public const int JoinLvFieldNumber = 3;
  private int joinLv_;
  /// <summary>
  ///入盟等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int JoinLv {
    get { return joinLv_; }
    set {
      joinLv_ = value;
    }
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 4;
  private int num_;
  /// <summary>
  ///人数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  /// <summary>Field number for the "lv" field.</summary>
  public const int LvFieldNumber = 5;
  private int lv_;
  /// <summary>
  ///仙盟等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Lv {
    get { return lv_; }
    set {
      lv_ = value;
    }
  }

  /// <summary>Field number for the "limit" field.</summary>
  public const int LimitFieldNumber = 6;
  private int limit_;
  /// <summary>
  ///仙盟限制人数  
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Limit {
    get { return limit_; }
    set {
      limit_ = value;
    }
  }

  /// <summary>Field number for the "notice" field.</summary>
  public const int NoticeFieldNumber = 7;
  private string notice_ = "";
  /// <summary>
  ///仙盟公告
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Notice {
    get { return notice_; }
    set {
      notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "egg" field.</summary>
  public const int EggFieldNumber = 8;
  private int egg_;
  /// <summary>
  ///总孵蛋数 经验值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Egg {
    get { return egg_; }
    set {
      egg_ = value;
    }
  }

  /// <summary>Field number for the "members" field.</summary>
  public const int MembersFieldNumber = 9;
  private static readonly pb::FieldCodec<int> _repeated_members_codec
      = pb::FieldCodec.ForInt32(74);
  private readonly pbc::RepeatedField<int> members_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Members {
    get { return members_; }
  }

  /// <summary>Field number for the "eggByDay" field.</summary>
  public const int EggByDayFieldNumber = 10;
  private int eggByDay_;
  /// <summary>
  ///本日孵蛋数 --每日清零
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EggByDay {
    get { return eggByDay_; }
    set {
      eggByDay_ = value;
    }
  }

  /// <summary>Field number for the "eggTime" field.</summary>
  public const int EggTimeFieldNumber = 11;
  private int eggTime_;
  /// <summary>
  ///重置孵蛋的时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EggTime {
    get { return eggTime_; }
    set {
      eggTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AllyPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AllyPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (JoinLv != other.JoinLv) return false;
    if (Num != other.Num) return false;
    if (Lv != other.Lv) return false;
    if (Limit != other.Limit) return false;
    if (Notice != other.Notice) return false;
    if (Egg != other.Egg) return false;
    if(!members_.Equals(other.members_)) return false;
    if (EggByDay != other.EggByDay) return false;
    if (EggTime != other.EggTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (JoinLv != 0) hash ^= JoinLv.GetHashCode();
    if (Num != 0) hash ^= Num.GetHashCode();
    if (Lv != 0) hash ^= Lv.GetHashCode();
    if (Limit != 0) hash ^= Limit.GetHashCode();
    if (Notice.Length != 0) hash ^= Notice.GetHashCode();
    if (Egg != 0) hash ^= Egg.GetHashCode();
    hash ^= members_.GetHashCode();
    if (EggByDay != 0) hash ^= EggByDay.GetHashCode();
    if (EggTime != 0) hash ^= EggTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (JoinLv != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(JoinLv);
    }
    if (Num != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Num);
    }
    if (Lv != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Lv);
    }
    if (Limit != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Limit);
    }
    if (Notice.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Notice);
    }
    if (Egg != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Egg);
    }
    members_.WriteTo(output, _repeated_members_codec);
    if (EggByDay != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(EggByDay);
    }
    if (EggTime != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(EggTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (JoinLv != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinLv);
    }
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    if (Lv != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
    }
    if (Limit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
    }
    if (Notice.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
    }
    if (Egg != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Egg);
    }
    size += members_.CalculateSize(_repeated_members_codec);
    if (EggByDay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EggByDay);
    }
    if (EggTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EggTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AllyPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.JoinLv != 0) {
      JoinLv = other.JoinLv;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
    if (other.Lv != 0) {
      Lv = other.Lv;
    }
    if (other.Limit != 0) {
      Limit = other.Limit;
    }
    if (other.Notice.Length != 0) {
      Notice = other.Notice;
    }
    if (other.Egg != 0) {
      Egg = other.Egg;
    }
    members_.Add(other.members_);
    if (other.EggByDay != 0) {
      EggByDay = other.EggByDay;
    }
    if (other.EggTime != 0) {
      EggTime = other.EggTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          JoinLv = input.ReadInt32();
          break;
        }
        case 32: {
          Num = input.ReadInt32();
          break;
        }
        case 40: {
          Lv = input.ReadInt32();
          break;
        }
        case 48: {
          Limit = input.ReadInt32();
          break;
        }
        case 58: {
          Notice = input.ReadString();
          break;
        }
        case 64: {
          Egg = input.ReadInt32();
          break;
        }
        case 74:
        case 72: {
          members_.AddEntriesFrom(input, _repeated_members_codec);
          break;
        }
        case 80: {
          EggByDay = input.ReadInt32();
          break;
        }
        case 88: {
          EggTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///仙盟成员信息
/// </summary>
public sealed partial class AllyMemberInfoPb : pb::IMessage<AllyMemberInfoPb> {
  private static readonly pb::MessageParser<AllyMemberInfoPb> _parser = new pb::MessageParser<AllyMemberInfoPb>(() => new AllyMemberInfoPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AllyMemberInfoPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyMemberInfoPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyMemberInfoPb(AllyMemberInfoPb other) : this() {
    member_ = other.member_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyMemberInfoPb Clone() {
    return new AllyMemberInfoPb(this);
  }

  /// <summary>Field number for the "member" field.</summary>
  public const int MemberFieldNumber = 1;
  private static readonly pbc::MapField<int, global::AllyMemberPb>.Codec _map_member_codec
      = new pbc::MapField<int, global::AllyMemberPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::AllyMemberPb.Parser), 10);
  private readonly pbc::MapField<int, global::AllyMemberPb> member_ = new pbc::MapField<int, global::AllyMemberPb>();
  /// <summary>
  ///成员 key成员pid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::AllyMemberPb> Member {
    get { return member_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AllyMemberInfoPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AllyMemberInfoPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Member.Equals(other.Member)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Member.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    member_.WriteTo(output, _map_member_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += member_.CalculateSize(_map_member_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AllyMemberInfoPb other) {
    if (other == null) {
      return;
    }
    member_.Add(other.member_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          member_.AddEntriesFrom(input, _map_member_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///仙盟成员  pb
/// </summary>
public sealed partial class AllyMemberPb : pb::IMessage<AllyMemberPb> {
  private static readonly pb::MessageParser<AllyMemberPb> _parser = new pb::MessageParser<AllyMemberPb>(() => new AllyMemberPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AllyMemberPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyMemberPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyMemberPb(AllyMemberPb other) : this() {
    pid_ = other.pid_;
    pos_ = other.pos_;
    level_ = other.level_;
    head_ = other.head_;
    name_ = other.name_;
    eggByWeek_ = other.eggByWeek_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyMemberPb Clone() {
    return new AllyMemberPb(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  /// <summary>
  ///成员id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 2;
  private int pos_;
  /// <summary>
  ///成员职位 0-盟主 1-护法 2-成员 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "head" field.</summary>
  public const int HeadFieldNumber = 4;
  private string head_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Head {
    get { return head_; }
    set {
      head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 5;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "eggByWeek" field.</summary>
  public const int EggByWeekFieldNumber = 6;
  private int eggByWeek_;
  /// <summary>
  ///本周孵蛋数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EggByWeek {
    get { return eggByWeek_; }
    set {
      eggByWeek_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AllyMemberPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AllyMemberPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Pos != other.Pos) return false;
    if (Level != other.Level) return false;
    if (Head != other.Head) return false;
    if (Name != other.Name) return false;
    if (EggByWeek != other.EggByWeek) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Head.Length != 0) hash ^= Head.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (EggByWeek != 0) hash ^= EggByWeek.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Pos != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Pos);
    }
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (Head.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Head);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Name);
    }
    if (EggByWeek != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(EggByWeek);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Head.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (EggByWeek != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EggByWeek);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AllyMemberPb other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Head.Length != 0) {
      Head = other.Head;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.EggByWeek != 0) {
      EggByWeek = other.EggByWeek;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          Pos = input.ReadInt32();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
        case 34: {
          Head = input.ReadString();
          break;
        }
        case 42: {
          Name = input.ReadString();
          break;
        }
        case 48: {
          EggByWeek = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///仙盟成员  -- server pb
/// </summary>
public sealed partial class AllyMemberServerPb : pb::IMessage<AllyMemberServerPb> {
  private static readonly pb::MessageParser<AllyMemberServerPb> _parser = new pb::MessageParser<AllyMemberServerPb>(() => new AllyMemberServerPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AllyMemberServerPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyMemberServerPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyMemberServerPb(AllyMemberServerPb other) : this() {
    pos_ = other.pos_;
    integral_ = other.integral_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyMemberServerPb Clone() {
    return new AllyMemberServerPb(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 2;
  private int integral_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AllyMemberServerPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AllyMemberServerPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    if (Integral != other.Integral) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (Integral != 0) hash ^= Integral.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pos != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
    if (Integral != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Integral);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (Integral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AllyMemberServerPb other) {
    if (other == null) {
      return;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
        case 16: {
          Integral = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///伐魔  pb
/// </summary>
public sealed partial class DevilPb : pb::IMessage<DevilPb> {
  private static readonly pb::MessageParser<DevilPb> _parser = new pb::MessageParser<DevilPb>(() => new DevilPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DevilPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DevilPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DevilPb(DevilPb other) : this() {
    canChallengeCd_ = other.canChallengeCd_;
    challengeTimes_ = other.challengeTimes_;
    challengeTimesRecoverCd_ = other.challengeTimesRecoverCd_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DevilPb Clone() {
    return new DevilPb(this);
  }

  /// <summary>Field number for the "canChallengeCd" field.</summary>
  public const int CanChallengeCdFieldNumber = 1;
  private int canChallengeCd_;
  /// <summary>
  ///可挑战cd
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CanChallengeCd {
    get { return canChallengeCd_; }
    set {
      canChallengeCd_ = value;
    }
  }

  /// <summary>Field number for the "challengeTimes" field.</summary>
  public const int ChallengeTimesFieldNumber = 2;
  private int challengeTimes_;
  /// <summary>
  ///剩余挑战次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChallengeTimes {
    get { return challengeTimes_; }
    set {
      challengeTimes_ = value;
    }
  }

  /// <summary>Field number for the "challengeTimesRecoverCd" field.</summary>
  public const int ChallengeTimesRecoverCdFieldNumber = 3;
  private int challengeTimesRecoverCd_;
  /// <summary>
  ///挑战次数恢复cd ,cd到的那一刻 ,单位秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ChallengeTimesRecoverCd {
    get { return challengeTimesRecoverCd_; }
    set {
      challengeTimesRecoverCd_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DevilPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DevilPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CanChallengeCd != other.CanChallengeCd) return false;
    if (ChallengeTimes != other.ChallengeTimes) return false;
    if (ChallengeTimesRecoverCd != other.ChallengeTimesRecoverCd) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CanChallengeCd != 0) hash ^= CanChallengeCd.GetHashCode();
    if (ChallengeTimes != 0) hash ^= ChallengeTimes.GetHashCode();
    if (ChallengeTimesRecoverCd != 0) hash ^= ChallengeTimesRecoverCd.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CanChallengeCd != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CanChallengeCd);
    }
    if (ChallengeTimes != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ChallengeTimes);
    }
    if (ChallengeTimesRecoverCd != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ChallengeTimesRecoverCd);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CanChallengeCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanChallengeCd);
    }
    if (ChallengeTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChallengeTimes);
    }
    if (ChallengeTimesRecoverCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChallengeTimesRecoverCd);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DevilPb other) {
    if (other == null) {
      return;
    }
    if (other.CanChallengeCd != 0) {
      CanChallengeCd = other.CanChallengeCd;
    }
    if (other.ChallengeTimes != 0) {
      ChallengeTimes = other.ChallengeTimes;
    }
    if (other.ChallengeTimesRecoverCd != 0) {
      ChallengeTimesRecoverCd = other.ChallengeTimesRecoverCd;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          CanChallengeCd = input.ReadInt32();
          break;
        }
        case 16: {
          ChallengeTimes = input.ReadInt32();
          break;
        }
        case 24: {
          ChallengeTimesRecoverCd = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///仙盟排行  pb
/// </summary>
public sealed partial class AllyRankPb : pb::IMessage<AllyRankPb> {
  private static readonly pb::MessageParser<AllyRankPb> _parser = new pb::MessageParser<AllyRankPb>(() => new AllyRankPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AllyRankPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyRankPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyRankPb(AllyRankPb other) : this() {
    sid_ = other.sid_;
    name_ = other.name_;
    integral_ = other.integral_;
    allyId_ = other.allyId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AllyRankPb Clone() {
    return new AllyRankPb(this);
  }

  /// <summary>Field number for the "sid" field.</summary>
  public const int SidFieldNumber = 1;
  private int sid_;
  /// <summary>
  ///服务器id  --废弃
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sid {
    get { return sid_; }
    set {
      sid_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  ///仙盟名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 3;
  private int integral_;
  /// <summary>
  ///积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  /// <summary>Field number for the "allyId" field.</summary>
  public const int AllyIdFieldNumber = 4;
  private int allyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AllyId {
    get { return allyId_; }
    set {
      allyId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AllyRankPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AllyRankPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Sid != other.Sid) return false;
    if (Name != other.Name) return false;
    if (Integral != other.Integral) return false;
    if (AllyId != other.AllyId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Sid != 0) hash ^= Sid.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Integral != 0) hash ^= Integral.GetHashCode();
    if (AllyId != 0) hash ^= AllyId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Sid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Sid);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Integral != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Integral);
    }
    if (AllyId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AllyId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Sid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sid);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Integral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    if (AllyId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllyId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AllyRankPb other) {
    if (other == null) {
      return;
    }
    if (other.Sid != 0) {
      Sid = other.Sid;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
    if (other.AllyId != 0) {
      AllyId = other.AllyId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Sid = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Integral = input.ReadInt32();
          break;
        }
        case 32: {
          AllyId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///邮件 --系统
/// </summary>
public sealed partial class SysMailPb : pb::IMessage<SysMailPb> {
  private static readonly pb::MessageParser<SysMailPb> _parser = new pb::MessageParser<SysMailPb>(() => new SysMailPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SysMailPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SysMailPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SysMailPb(SysMailPb other) : this() {
    id_ = other.id_;
    sendTime_ = other.sendTime_;
    templateId_ = other.templateId_;
    expireTime_ = other.expireTime_;
    title_ = other.title_;
    content_ = other.content_;
    reward_ = other.reward_.Clone();
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SysMailPb Clone() {
    return new SysMailPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "sendTime" field.</summary>
  public const int SendTimeFieldNumber = 2;
  private long sendTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SendTime {
    get { return sendTime_; }
    set {
      sendTime_ = value;
    }
  }

  /// <summary>Field number for the "templateId" field.</summary>
  public const int TemplateIdFieldNumber = 3;
  private int templateId_;
  /// <summary>
  ///邮件模版ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TemplateId {
    get { return templateId_; }
    set {
      templateId_ = value;
    }
  }

  /// <summary>Field number for the "expireTime" field.</summary>
  public const int ExpireTimeFieldNumber = 4;
  private long expireTime_;
  /// <summary>
  ///过期时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ExpireTime {
    get { return expireTime_; }
    set {
      expireTime_ = value;
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 5;
  private string title_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 6;
  private string content_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "reward" field.</summary>
  public const int RewardFieldNumber = 7;
  private static readonly pbc::MapField<int, int>.Codec _map_reward_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 58);
  private readonly pbc::MapField<int, int> reward_ = new pbc::MapField<int, int>();
  /// <summary>
  ///奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Reward {
    get { return reward_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 8;
  private int type_;
  /// <summary>
  ///邮件类型 0-全局
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SysMailPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SysMailPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (SendTime != other.SendTime) return false;
    if (TemplateId != other.TemplateId) return false;
    if (ExpireTime != other.ExpireTime) return false;
    if (Title != other.Title) return false;
    if (Content != other.Content) return false;
    if (!Reward.Equals(other.Reward)) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (SendTime != 0L) hash ^= SendTime.GetHashCode();
    if (TemplateId != 0) hash ^= TemplateId.GetHashCode();
    if (ExpireTime != 0L) hash ^= ExpireTime.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    hash ^= Reward.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (SendTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(SendTime);
    }
    if (TemplateId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TemplateId);
    }
    if (ExpireTime != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(ExpireTime);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Title);
    }
    if (Content.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Content);
    }
    reward_.WriteTo(output, _map_reward_codec);
    if (Type != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (SendTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
    }
    if (TemplateId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplateId);
    }
    if (ExpireTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    size += reward_.CalculateSize(_map_reward_codec);
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SysMailPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.SendTime != 0L) {
      SendTime = other.SendTime;
    }
    if (other.TemplateId != 0) {
      TemplateId = other.TemplateId;
    }
    if (other.ExpireTime != 0L) {
      ExpireTime = other.ExpireTime;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    reward_.Add(other.reward_);
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          SendTime = input.ReadInt64();
          break;
        }
        case 24: {
          TemplateId = input.ReadInt32();
          break;
        }
        case 32: {
          ExpireTime = input.ReadInt64();
          break;
        }
        case 42: {
          Title = input.ReadString();
          break;
        }
        case 50: {
          Content = input.ReadString();
          break;
        }
        case 58: {
          reward_.AddEntriesFrom(input, _map_reward_codec);
          break;
        }
        case 64: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///邮件 --个人邮件，客户端用
/// </summary>
public sealed partial class MailPb : pb::IMessage<MailPb> {
  private static readonly pb::MessageParser<MailPb> _parser = new pb::MessageParser<MailPb>(() => new MailPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MailPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MailPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MailPb(MailPb other) : this() {
    id_ = other.id_;
    templateId_ = other.templateId_;
    sendTime_ = other.sendTime_;
    expireTime_ = other.expireTime_;
    title_ = other.title_;
    content_ = other.content_;
    reward_ = other.reward_.Clone();
    state_ = other.state_;
    from_ = other.from_;
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MailPb Clone() {
    return new MailPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "templateId" field.</summary>
  public const int TemplateIdFieldNumber = 2;
  private int templateId_;
  /// <summary>
  ///邮件模版ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TemplateId {
    get { return templateId_; }
    set {
      templateId_ = value;
    }
  }

  /// <summary>Field number for the "sendTime" field.</summary>
  public const int SendTimeFieldNumber = 3;
  private long sendTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SendTime {
    get { return sendTime_; }
    set {
      sendTime_ = value;
    }
  }

  /// <summary>Field number for the "expireTime" field.</summary>
  public const int ExpireTimeFieldNumber = 4;
  private long expireTime_;
  /// <summary>
  ///过期时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ExpireTime {
    get { return expireTime_; }
    set {
      expireTime_ = value;
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 5;
  private string title_ = "";
  /// <summary>
  ///自定义模版的标题
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 6;
  private string content_ = "";
  /// <summary>
  ///自定义模版的内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "reward" field.</summary>
  public const int RewardFieldNumber = 7;
  private static readonly pbc::MapField<int, int>.Codec _map_reward_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 58);
  private readonly pbc::MapField<int, int> reward_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Reward {
    get { return reward_; }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 8;
  private int state_;
  /// <summary>
  ///0-新邮件 1-已读 2-已领 3-已删
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "from" field.</summary>
  public const int FromFieldNumber = 9;
  private string from_ = "";
  /// <summary>
  ///邮件来源
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string From {
    get { return from_; }
    set {
      from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 10;
  private int type_;
  /// <summary>
  ///邮件类型 0-系统邮件 1-个人邮件
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MailPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MailPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (TemplateId != other.TemplateId) return false;
    if (SendTime != other.SendTime) return false;
    if (ExpireTime != other.ExpireTime) return false;
    if (Title != other.Title) return false;
    if (Content != other.Content) return false;
    if (!Reward.Equals(other.Reward)) return false;
    if (State != other.State) return false;
    if (From != other.From) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (TemplateId != 0) hash ^= TemplateId.GetHashCode();
    if (SendTime != 0L) hash ^= SendTime.GetHashCode();
    if (ExpireTime != 0L) hash ^= ExpireTime.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    hash ^= Reward.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    if (From.Length != 0) hash ^= From.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (TemplateId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(TemplateId);
    }
    if (SendTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(SendTime);
    }
    if (ExpireTime != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(ExpireTime);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Title);
    }
    if (Content.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Content);
    }
    reward_.WriteTo(output, _map_reward_codec);
    if (State != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(State);
    }
    if (From.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(From);
    }
    if (Type != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (TemplateId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TemplateId);
    }
    if (SendTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
    }
    if (ExpireTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    size += reward_.CalculateSize(_map_reward_codec);
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
    }
    if (From.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MailPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.TemplateId != 0) {
      TemplateId = other.TemplateId;
    }
    if (other.SendTime != 0L) {
      SendTime = other.SendTime;
    }
    if (other.ExpireTime != 0L) {
      ExpireTime = other.ExpireTime;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    reward_.Add(other.reward_);
    if (other.State != 0) {
      State = other.State;
    }
    if (other.From.Length != 0) {
      From = other.From;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          TemplateId = input.ReadInt32();
          break;
        }
        case 24: {
          SendTime = input.ReadInt64();
          break;
        }
        case 32: {
          ExpireTime = input.ReadInt64();
          break;
        }
        case 42: {
          Title = input.ReadString();
          break;
        }
        case 50: {
          Content = input.ReadString();
          break;
        }
        case 58: {
          reward_.AddEntriesFrom(input, _map_reward_codec);
          break;
        }
        case 64: {
          State = input.ReadInt32();
          break;
        }
        case 74: {
          From = input.ReadString();
          break;
        }
        case 80: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SignPb : pb::IMessage<SignPb> {
  private static readonly pb::MessageParser<SignPb> _parser = new pb::MessageParser<SignPb>(() => new SignPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SignPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SignPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SignPb(SignPb other) : this() {
    day_ = other.day_;
    signTime_ = other.signTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SignPb Clone() {
    return new SignPb(this);
  }

  /// <summary>Field number for the "day" field.</summary>
  public const int DayFieldNumber = 1;
  private int day_;
  /// <summary>
  ///当前签到天数，取值1-7
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Day {
    get { return day_; }
    set {
      day_ = value;
    }
  }

  /// <summary>Field number for the "signTime" field.</summary>
  public const int SignTimeFieldNumber = 2;
  private int signTime_;
  /// <summary>
  ///最后签到时间 s
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SignTime {
    get { return signTime_; }
    set {
      signTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SignPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SignPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Day != other.Day) return false;
    if (SignTime != other.SignTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Day != 0) hash ^= Day.GetHashCode();
    if (SignTime != 0) hash ^= SignTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Day != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Day);
    }
    if (SignTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SignTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Day != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
    }
    if (SignTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SignPb other) {
    if (other == null) {
      return;
    }
    if (other.Day != 0) {
      Day = other.Day;
    }
    if (other.SignTime != 0) {
      SignTime = other.SignTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Day = input.ReadInt32();
          break;
        }
        case 16: {
          SignTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 登录、跨天，后端执行重置逻辑： bossId = 0; dailyRefresh = 0;
///通天塔
/// </summary>
public sealed partial class TowerPb : pb::IMessage<TowerPb> {
  private static readonly pb::MessageParser<TowerPb> _parser = new pb::MessageParser<TowerPb>(() => new TowerPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerPb(TowerPb other) : this() {
    bossId_ = other.bossId_;
    quickPassRewardId_ = other.quickPassRewardId_;
    towerBuff_ = other.towerBuff_.Clone();
    maxId_ = other.maxId_;
    randomBuffMax_ = other.randomBuffMax_;
    buffIds_ = other.buffIds_.Clone();
    isFirstDay_ = other.isFirstDay_;
    seed_ = other.seed_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerPb Clone() {
    return new TowerPb(this);
  }

  /// <summary>Field number for the "bossId" field.</summary>
  public const int BossIdFieldNumber = 1;
  private int bossId_;
  /// <summary>
  /// 当天打通的关卡
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossId {
    get { return bossId_; }
    set {
      bossId_ = value;
    }
  }

  /// <summary>Field number for the "quickPassRewardId" field.</summary>
  public const int QuickPassRewardIdFieldNumber = 2;
  private int quickPassRewardId_;
  /// <summary>
  /// 速通奖励id, value=1领取，0未领取
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int QuickPassRewardId {
    get { return quickPassRewardId_; }
    set {
      quickPassRewardId_ = value;
    }
  }

  /// <summary>Field number for the "towerBuff" field.</summary>
  public const int TowerBuffFieldNumber = 3;
  private static readonly pbc::MapField<int, global::TowerBuffPb>.Codec _map_towerBuff_codec
      = new pbc::MapField<int, global::TowerBuffPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::TowerBuffPb.Parser), 26);
  private readonly pbc::MapField<int, global::TowerBuffPb> towerBuff_ = new pbc::MapField<int, global::TowerBuffPb>();
  /// <summary>
  /// key:pos, 1,2,3,4,5, value:TowerBuffPb
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::TowerBuffPb> TowerBuff {
    get { return towerBuff_; }
  }

  /// <summary>Field number for the "maxId" field.</summary>
  public const int MaxIdFieldNumber = 5;
  private int maxId_;
  /// <summary>
  /// 历史最大bossId；
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxId {
    get { return maxId_; }
    set {
      maxId_ = value;
    }
  }

  /// <summary>Field number for the "randomBuffMax" field.</summary>
  public const int RandomBuffMaxFieldNumber = 6;
  private int randomBuffMax_;
  /// <summary>
  /// 随机技能最大次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RandomBuffMax {
    get { return randomBuffMax_; }
    set {
      randomBuffMax_ = value;
    }
  }

  /// <summary>Field number for the "buffIds" field.</summary>
  public const int BuffIdsFieldNumber = 7;
  private static readonly pb::FieldCodec<int> _repeated_buffIds_codec
      = pb::FieldCodec.ForInt32(58);
  private readonly pbc::RepeatedField<int> buffIds_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// buffId, 3个
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> BuffIds {
    get { return buffIds_; }
  }

  /// <summary>Field number for the "isFirstDay" field.</summary>
  public const int IsFirstDayFieldNumber = 8;
  private int isFirstDay_;
  /// <summary>
  /// 0 不是，1是
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsFirstDay {
    get { return isFirstDay_; }
    set {
      isFirstDay_ = value;
    }
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 9;
  private int seed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BossId != other.BossId) return false;
    if (QuickPassRewardId != other.QuickPassRewardId) return false;
    if (!TowerBuff.Equals(other.TowerBuff)) return false;
    if (MaxId != other.MaxId) return false;
    if (RandomBuffMax != other.RandomBuffMax) return false;
    if(!buffIds_.Equals(other.buffIds_)) return false;
    if (IsFirstDay != other.IsFirstDay) return false;
    if (Seed != other.Seed) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BossId != 0) hash ^= BossId.GetHashCode();
    if (QuickPassRewardId != 0) hash ^= QuickPassRewardId.GetHashCode();
    hash ^= TowerBuff.GetHashCode();
    if (MaxId != 0) hash ^= MaxId.GetHashCode();
    if (RandomBuffMax != 0) hash ^= RandomBuffMax.GetHashCode();
    hash ^= buffIds_.GetHashCode();
    if (IsFirstDay != 0) hash ^= IsFirstDay.GetHashCode();
    if (Seed != 0) hash ^= Seed.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BossId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BossId);
    }
    if (QuickPassRewardId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(QuickPassRewardId);
    }
    towerBuff_.WriteTo(output, _map_towerBuff_codec);
    if (MaxId != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(MaxId);
    }
    if (RandomBuffMax != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(RandomBuffMax);
    }
    buffIds_.WriteTo(output, _repeated_buffIds_codec);
    if (IsFirstDay != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(IsFirstDay);
    }
    if (Seed != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Seed);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
    }
    if (QuickPassRewardId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuickPassRewardId);
    }
    size += towerBuff_.CalculateSize(_map_towerBuff_codec);
    if (MaxId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxId);
    }
    if (RandomBuffMax != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomBuffMax);
    }
    size += buffIds_.CalculateSize(_repeated_buffIds_codec);
    if (IsFirstDay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFirstDay);
    }
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerPb other) {
    if (other == null) {
      return;
    }
    if (other.BossId != 0) {
      BossId = other.BossId;
    }
    if (other.QuickPassRewardId != 0) {
      QuickPassRewardId = other.QuickPassRewardId;
    }
    towerBuff_.Add(other.towerBuff_);
    if (other.MaxId != 0) {
      MaxId = other.MaxId;
    }
    if (other.RandomBuffMax != 0) {
      RandomBuffMax = other.RandomBuffMax;
    }
    buffIds_.Add(other.buffIds_);
    if (other.IsFirstDay != 0) {
      IsFirstDay = other.IsFirstDay;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BossId = input.ReadInt32();
          break;
        }
        case 16: {
          QuickPassRewardId = input.ReadInt32();
          break;
        }
        case 26: {
          towerBuff_.AddEntriesFrom(input, _map_towerBuff_codec);
          break;
        }
        case 40: {
          MaxId = input.ReadInt32();
          break;
        }
        case 48: {
          RandomBuffMax = input.ReadInt32();
          break;
        }
        case 58:
        case 56: {
          buffIds_.AddEntriesFrom(input, _repeated_buffIds_codec);
          break;
        }
        case 64: {
          IsFirstDay = input.ReadInt32();
          break;
        }
        case 72: {
          Seed = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TowerBuffPb : pb::IMessage<TowerBuffPb> {
  private static readonly pb::MessageParser<TowerBuffPb> _parser = new pb::MessageParser<TowerBuffPb>(() => new TowerBuffPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TowerBuffPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBuffPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBuffPb(TowerBuffPb other) : this() {
    buffId_ = other.buffId_;
    level_ = other.level_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TowerBuffPb Clone() {
    return new TowerBuffPb(this);
  }

  /// <summary>Field number for the "buffId" field.</summary>
  public const int BuffIdFieldNumber = 1;
  private int buffId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuffId {
    get { return buffId_; }
    set {
      buffId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TowerBuffPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TowerBuffPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BuffId != other.BuffId) return false;
    if (Level != other.Level) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BuffId != 0) hash ^= BuffId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BuffId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BuffId);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BuffId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TowerBuffPb other) {
    if (other == null) {
      return;
    }
    if (other.BuffId != 0) {
      BuffId = other.BuffId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BuffId = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///活动
/// </summary>
public sealed partial class ActivityPb : pb::IMessage<ActivityPb> {
  private static readonly pb::MessageParser<ActivityPb> _parser = new pb::MessageParser<ActivityPb>(() => new ActivityPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ActivityPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivityPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivityPb(ActivityPb other) : this() {
    xyBuyIds_ = other.xyBuyIds_.Clone();
    xyCd_ = other.xyCd_;
    welfareId_ = other.welfareId_;
    cloudPrivilegeGiftEndTime_ = other.cloudPrivilegeGiftEndTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivityPb Clone() {
    return new ActivityPb(this);
  }

  /// <summary>Field number for the "xyBuyIds" field.</summary>
  public const int XyBuyIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_xyBuyIds_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> xyBuyIds_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///仙玉礼包购买id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> XyBuyIds {
    get { return xyBuyIds_; }
  }

  /// <summary>Field number for the "xyCd" field.</summary>
  public const int XyCdFieldNumber = 2;
  private int xyCd_;
  /// <summary>
  ///仙玉礼包免费领取cd
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int XyCd {
    get { return xyCd_; }
    set {
      xyCd_ = value;
    }
  }

  /// <summary>Field number for the "welfareId" field.</summary>
  public const int WelfareIdFieldNumber = 3;
  private int welfareId_;
  /// <summary>
  ///新人福利礼包购买过的最新id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WelfareId {
    get { return welfareId_; }
    set {
      welfareId_ = value;
    }
  }

  /// <summary>Field number for the "cloudPrivilegeGiftEndTime" field.</summary>
  public const int CloudPrivilegeGiftEndTimeFieldNumber = 4;
  private int cloudPrivilegeGiftEndTime_;
  /// <summary>
  ///云游特权礼包结束时间 ,==0代表无礼包 >=当前时间代表无效 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CloudPrivilegeGiftEndTime {
    get { return cloudPrivilegeGiftEndTime_; }
    set {
      cloudPrivilegeGiftEndTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ActivityPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ActivityPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!xyBuyIds_.Equals(other.xyBuyIds_)) return false;
    if (XyCd != other.XyCd) return false;
    if (WelfareId != other.WelfareId) return false;
    if (CloudPrivilegeGiftEndTime != other.CloudPrivilegeGiftEndTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= xyBuyIds_.GetHashCode();
    if (XyCd != 0) hash ^= XyCd.GetHashCode();
    if (WelfareId != 0) hash ^= WelfareId.GetHashCode();
    if (CloudPrivilegeGiftEndTime != 0) hash ^= CloudPrivilegeGiftEndTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    xyBuyIds_.WriteTo(output, _repeated_xyBuyIds_codec);
    if (XyCd != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(XyCd);
    }
    if (WelfareId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(WelfareId);
    }
    if (CloudPrivilegeGiftEndTime != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CloudPrivilegeGiftEndTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += xyBuyIds_.CalculateSize(_repeated_xyBuyIds_codec);
    if (XyCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(XyCd);
    }
    if (WelfareId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WelfareId);
    }
    if (CloudPrivilegeGiftEndTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CloudPrivilegeGiftEndTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ActivityPb other) {
    if (other == null) {
      return;
    }
    xyBuyIds_.Add(other.xyBuyIds_);
    if (other.XyCd != 0) {
      XyCd = other.XyCd;
    }
    if (other.WelfareId != 0) {
      WelfareId = other.WelfareId;
    }
    if (other.CloudPrivilegeGiftEndTime != 0) {
      CloudPrivilegeGiftEndTime = other.CloudPrivilegeGiftEndTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          xyBuyIds_.AddEntriesFrom(input, _repeated_xyBuyIds_codec);
          break;
        }
        case 16: {
          XyCd = input.ReadInt32();
          break;
        }
        case 24: {
          WelfareId = input.ReadInt32();
          break;
        }
        case 32: {
          CloudPrivilegeGiftEndTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///账号玩家
/// </summary>
public sealed partial class AccountPlayerPb : pb::IMessage<AccountPlayerPb> {
  private static readonly pb::MessageParser<AccountPlayerPb> _parser = new pb::MessageParser<AccountPlayerPb>(() => new AccountPlayerPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AccountPlayerPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountPlayerPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountPlayerPb(AccountPlayerPb other) : this() {
    account_ = other.account_;
    name_ = other.name_;
    level_ = other.level_;
    sid_ = other.sid_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountPlayerPb Clone() {
    return new AccountPlayerPb(this);
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 1;
  private string account_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "sid" field.</summary>
  public const int SidFieldNumber = 4;
  private int sid_;
  /// <summary>
  ///服务器id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sid {
    get { return sid_; }
    set {
      sid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AccountPlayerPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AccountPlayerPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Account != other.Account) return false;
    if (Name != other.Name) return false;
    if (Level != other.Level) return false;
    if (Sid != other.Sid) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Sid != 0) hash ^= Sid.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Account.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Account);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (Sid != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Sid);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Sid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sid);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AccountPlayerPb other) {
    if (other == null) {
      return;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Sid != 0) {
      Sid = other.Sid;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Account = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
        case 32: {
          Sid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///投资计划，基金
/// </summary>
public sealed partial class FundPb : pb::IMessage<FundPb> {
  private static readonly pb::MessageParser<FundPb> _parser = new pb::MessageParser<FundPb>(() => new FundPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FundPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FundPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FundPb(FundPb other) : this() {
    fundUnlockId_ = other.fundUnlockId_.Clone();
    fund_ = other.fund_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FundPb Clone() {
    return new FundPb(this);
  }

  /// <summary>Field number for the "fundUnlockId" field.</summary>
  public const int FundUnlockIdFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_fundUnlockId_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> fundUnlockId_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///基金解锁id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> FundUnlockId {
    get { return fundUnlockId_; }
  }

  /// <summary>Field number for the "fund" field.</summary>
  public const int FundFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_fund_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> fund_ = new pbc::MapField<int, int>();
  /// <summary>
  ///只有已领取过的数据  key: id value: 1/2  --1代表领取了免费 2代表免费跟解锁都领取
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Fund {
    get { return fund_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FundPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FundPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!fundUnlockId_.Equals(other.fundUnlockId_)) return false;
    if (!Fund.Equals(other.Fund)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= fundUnlockId_.GetHashCode();
    hash ^= Fund.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    fundUnlockId_.WriteTo(output, _repeated_fundUnlockId_codec);
    fund_.WriteTo(output, _map_fund_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += fundUnlockId_.CalculateSize(_repeated_fundUnlockId_codec);
    size += fund_.CalculateSize(_map_fund_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FundPb other) {
    if (other == null) {
      return;
    }
    fundUnlockId_.Add(other.fundUnlockId_);
    fund_.Add(other.fund_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          fundUnlockId_.AddEntriesFrom(input, _repeated_fundUnlockId_codec);
          break;
        }
        case 18: {
          fund_.AddEntriesFrom(input, _map_fund_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///法阵
/// </summary>
public sealed partial class ArreyPb : pb::IMessage<ArreyPb> {
  private static readonly pb::MessageParser<ArreyPb> _parser = new pb::MessageParser<ArreyPb>(() => new ArreyPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ArreyPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ArreyPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ArreyPb(ArreyPb other) : this() {
    id_ = other.id_;
    funes_ = other.funes_.Clone();
    added_ = other.added_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ArreyPb Clone() {
    return new ArreyPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///法阵id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "funes" field.</summary>
  public const int FunesFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_funes_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> funes_ = new pbc::MapField<int, int>();
  /// <summary>
  ///上阵符文 key是格子序号 value是符文序号(srl)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Funes {
    get { return funes_; }
  }

  /// <summary>Field number for the "added" field.</summary>
  public const int AddedFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_added_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> added_ = new pbc::MapField<int, int>();
  /// <summary>
  ///总加成 key是属性id value是属性数值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Added {
    get { return added_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ArreyPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ArreyPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!Funes.Equals(other.Funes)) return false;
    if (!Added.Equals(other.Added)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    hash ^= Funes.GetHashCode();
    hash ^= Added.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    funes_.WriteTo(output, _map_funes_codec);
    added_.WriteTo(output, _map_added_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    size += funes_.CalculateSize(_map_funes_codec);
    size += added_.CalculateSize(_map_added_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ArreyPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    funes_.Add(other.funes_);
    added_.Add(other.added_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          funes_.AddEntriesFrom(input, _map_funes_codec);
          break;
        }
        case 26: {
          added_.AddEntriesFrom(input, _map_added_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家法阵
/// </summary>
public sealed partial class PArreyPb : pb::IMessage<PArreyPb> {
  private static readonly pb::MessageParser<PArreyPb> _parser = new pb::MessageParser<PArreyPb>(() => new PArreyPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PArreyPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PArreyPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PArreyPb(PArreyPb other) : this() {
    curArrey_ = other.curArrey_;
    allArrey_ = other.allArrey_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PArreyPb Clone() {
    return new PArreyPb(this);
  }

  /// <summary>Field number for the "curArrey" field.</summary>
  public const int CurArreyFieldNumber = 1;
  private int curArrey_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurArrey {
    get { return curArrey_; }
    set {
      curArrey_ = value;
    }
  }

  /// <summary>Field number for the "allArrey" field.</summary>
  public const int AllArreyFieldNumber = 2;
  private static readonly pbc::MapField<int, global::ArreyPb>.Codec _map_allArrey_codec
      = new pbc::MapField<int, global::ArreyPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::ArreyPb.Parser), 18);
  private readonly pbc::MapField<int, global::ArreyPb> allArrey_ = new pbc::MapField<int, global::ArreyPb>();
  /// <summary>
  ///所有的法阵，key是法阵id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::ArreyPb> AllArrey {
    get { return allArrey_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PArreyPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PArreyPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CurArrey != other.CurArrey) return false;
    if (!AllArrey.Equals(other.AllArrey)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CurArrey != 0) hash ^= CurArrey.GetHashCode();
    hash ^= AllArrey.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CurArrey != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CurArrey);
    }
    allArrey_.WriteTo(output, _map_allArrey_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CurArrey != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurArrey);
    }
    size += allArrey_.CalculateSize(_map_allArrey_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PArreyPb other) {
    if (other == null) {
      return;
    }
    if (other.CurArrey != 0) {
      CurArrey = other.CurArrey;
    }
    allArrey_.Add(other.allArrey_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          CurArrey = input.ReadInt32();
          break;
        }
        case 18: {
          allArrey_.AddEntriesFrom(input, _map_allArrey_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///符文
/// </summary>
public sealed partial class FunePb : pb::IMessage<FunePb> {
  private static readonly pb::MessageParser<FunePb> _parser = new pb::MessageParser<FunePb>(() => new FunePb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FunePb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FunePb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FunePb(FunePb other) : this() {
    srl_ = other.srl_;
    id_ = other.id_;
    attr_ = other.attr_.Clone();
    level_ = other.level_;
    bindArrey_ = other.bindArrey_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FunePb Clone() {
    return new FunePb(this);
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 1;
  private int srl_;
  /// <summary>
  ///序号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private int id_;
  /// <summary>
  ///符文配置id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_attr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> attr_ = new pbc::MapField<int, int>();
  /// <summary>
  ///属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Attr {
    get { return attr_; }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 4;
  private int level_;
  /// <summary>
  ///符文等级 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "bindArrey" field.</summary>
  public const int BindArreyFieldNumber = 5;
  private int bindArrey_;
  /// <summary>
  ///int32 bindGrid=7;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BindArrey {
    get { return bindArrey_; }
    set {
      bindArrey_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FunePb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FunePb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Srl != other.Srl) return false;
    if (Id != other.Id) return false;
    if (!Attr.Equals(other.Attr)) return false;
    if (Level != other.Level) return false;
    if (BindArrey != other.BindArrey) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Srl != 0) hash ^= Srl.GetHashCode();
    if (Id != 0) hash ^= Id.GetHashCode();
    hash ^= Attr.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (BindArrey != 0) hash ^= BindArrey.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Srl != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Srl);
    }
    if (Id != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Id);
    }
    attr_.WriteTo(output, _map_attr_codec);
    if (Level != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Level);
    }
    if (BindArrey != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(BindArrey);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    size += attr_.CalculateSize(_map_attr_codec);
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (BindArrey != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BindArrey);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FunePb other) {
    if (other == null) {
      return;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    attr_.Add(other.attr_);
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.BindArrey != 0) {
      BindArrey = other.BindArrey;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Srl = input.ReadInt32();
          break;
        }
        case 16: {
          Id = input.ReadInt32();
          break;
        }
        case 26: {
          attr_.AddEntriesFrom(input, _map_attr_codec);
          break;
        }
        case 32: {
          Level = input.ReadInt32();
          break;
        }
        case 40: {
          BindArrey = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家符文
/// </summary>
public sealed partial class PFunePb : pb::IMessage<PFunePb> {
  private static readonly pb::MessageParser<PFunePb> _parser = new pb::MessageParser<PFunePb>(() => new PFunePb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PFunePb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PFunePb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PFunePb(PFunePb other) : this() {
    fune_ = other.fune_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PFunePb Clone() {
    return new PFunePb(this);
  }

  /// <summary>Field number for the "fune" field.</summary>
  public const int FuneFieldNumber = 1;
  private static readonly pbc::MapField<int, global::FunePb>.Codec _map_fune_codec
      = new pbc::MapField<int, global::FunePb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::FunePb.Parser), 10);
  private readonly pbc::MapField<int, global::FunePb> fune_ = new pbc::MapField<int, global::FunePb>();
  /// <summary>
  ///key为符文序号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::FunePb> Fune {
    get { return fune_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PFunePb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PFunePb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Fune.Equals(other.Fune)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Fune.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    fune_.WriteTo(output, _map_fune_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += fune_.CalculateSize(_map_fune_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PFunePb other) {
    if (other == null) {
      return;
    }
    fune_.Add(other.fune_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          fune_.AddEntriesFrom(input, _map_fune_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///云游工具
/// </summary>
public sealed partial class CloudToolPb : pb::IMessage<CloudToolPb> {
  private static readonly pb::MessageParser<CloudToolPb> _parser = new pb::MessageParser<CloudToolPb>(() => new CloudToolPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CloudToolPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudToolPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudToolPb(CloudToolPb other) : this() {
    upId_ = other.upId_;
    succinctAttr_ = other.succinctAttr_.Clone();
    attr_ = other.attr_.Clone();
    stepTask_ = other.stepTask_.Clone();
    toolId_ = other.toolId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudToolPb Clone() {
    return new CloudToolPb(this);
  }

  /// <summary>Field number for the "upId" field.</summary>
  public const int UpIdFieldNumber = 1;
  private int upId_;
  /// <summary>
  ///Alchemytoolup 表id 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UpId {
    get { return upId_; }
    set {
      upId_ = value;
    }
  }

  /// <summary>Field number for the "succinctAttr" field.</summary>
  public const int SuccinctAttrFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_succinctAttr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> succinctAttr_ = new pbc::MapField<int, int>();
  /// <summary>
  ///洗练属性 （洗练出来的)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> SuccinctAttr {
    get { return succinctAttr_; }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_attr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> attr_ = new pbc::MapField<int, int>();
  /// <summary>
  ///属性 (左边的现有属性)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Attr {
    get { return attr_; }
  }

  /// <summary>Field number for the "stepTask" field.</summary>
  public const int StepTaskFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_stepTask_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> stepTask_ = new pbc::MapField<int, int>();
  /// <summary>
  ///升阶任务 k:taskId v:progress
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> StepTask {
    get { return stepTask_; }
  }

  /// <summary>Field number for the "toolId" field.</summary>
  public const int ToolIdFieldNumber = 5;
  private int toolId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToolId {
    get { return toolId_; }
    set {
      toolId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CloudToolPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CloudToolPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UpId != other.UpId) return false;
    if (!SuccinctAttr.Equals(other.SuccinctAttr)) return false;
    if (!Attr.Equals(other.Attr)) return false;
    if (!StepTask.Equals(other.StepTask)) return false;
    if (ToolId != other.ToolId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UpId != 0) hash ^= UpId.GetHashCode();
    hash ^= SuccinctAttr.GetHashCode();
    hash ^= Attr.GetHashCode();
    hash ^= StepTask.GetHashCode();
    if (ToolId != 0) hash ^= ToolId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UpId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(UpId);
    }
    succinctAttr_.WriteTo(output, _map_succinctAttr_codec);
    attr_.WriteTo(output, _map_attr_codec);
    stepTask_.WriteTo(output, _map_stepTask_codec);
    if (ToolId != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(ToolId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UpId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpId);
    }
    size += succinctAttr_.CalculateSize(_map_succinctAttr_codec);
    size += attr_.CalculateSize(_map_attr_codec);
    size += stepTask_.CalculateSize(_map_stepTask_codec);
    if (ToolId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToolId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CloudToolPb other) {
    if (other == null) {
      return;
    }
    if (other.UpId != 0) {
      UpId = other.UpId;
    }
    succinctAttr_.Add(other.succinctAttr_);
    attr_.Add(other.attr_);
    stepTask_.Add(other.stepTask_);
    if (other.ToolId != 0) {
      ToolId = other.ToolId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UpId = input.ReadInt32();
          break;
        }
        case 18: {
          succinctAttr_.AddEntriesFrom(input, _map_succinctAttr_codec);
          break;
        }
        case 26: {
          attr_.AddEntriesFrom(input, _map_attr_codec);
          break;
        }
        case 34: {
          stepTask_.AddEntriesFrom(input, _map_stepTask_codec);
          break;
        }
        case 40: {
          ToolId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///云游材料
/// </summary>
public sealed partial class MaterialPb : pb::IMessage<MaterialPb> {
  private static readonly pb::MessageParser<MaterialPb> _parser = new pb::MessageParser<MaterialPb>(() => new MaterialPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MaterialPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialPb(MaterialPb other) : this() {
    id_ = other.id_;
    attr_ = other.attr_.Clone();
    looks_ = other.looks_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MaterialPb Clone() {
    return new MaterialPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_attr_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> attr_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Attr {
    get { return attr_; }
  }

  /// <summary>Field number for the "looks" field.</summary>
  public const int LooksFieldNumber = 3;
  private int looks_;
  /// <summary>
  ///品相值 万分比
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Looks {
    get { return looks_; }
    set {
      looks_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MaterialPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MaterialPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!Attr.Equals(other.Attr)) return false;
    if (Looks != other.Looks) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    hash ^= Attr.GetHashCode();
    if (Looks != 0) hash ^= Looks.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    attr_.WriteTo(output, _map_attr_codec);
    if (Looks != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Looks);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    size += attr_.CalculateSize(_map_attr_codec);
    if (Looks != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Looks);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MaterialPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    attr_.Add(other.attr_);
    if (other.Looks != 0) {
      Looks = other.Looks;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          attr_.AddEntriesFrom(input, _map_attr_codec);
          break;
        }
        case 24: {
          Looks = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///云游每日任务
/// </summary>
public sealed partial class CloudDailyTaskPb : pb::IMessage<CloudDailyTaskPb> {
  private static readonly pb::MessageParser<CloudDailyTaskPb> _parser = new pb::MessageParser<CloudDailyTaskPb>(() => new CloudDailyTaskPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CloudDailyTaskPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudDailyTaskPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudDailyTaskPb(CloudDailyTaskPb other) : this() {
    id_ = other.id_;
    level_ = other.level_;
    progress_ = other.progress_;
    isreward_ = other.isreward_;
    srl_ = other.srl_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudDailyTaskPb Clone() {
    return new CloudDailyTaskPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "progress" field.</summary>
  public const int ProgressFieldNumber = 3;
  private int progress_;
  /// <summary>
  ///进度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Progress {
    get { return progress_; }
    set {
      progress_ = value;
    }
  }

  /// <summary>Field number for the "isreward" field.</summary>
  public const int IsrewardFieldNumber = 4;
  private int isreward_;
  /// <summary>
  ///0-未领取 1-已领取
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Isreward {
    get { return isreward_; }
    set {
      isreward_ = value;
    }
  }

  /// <summary>Field number for the "srl" field.</summary>
  public const int SrlFieldNumber = 5;
  private int srl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Srl {
    get { return srl_; }
    set {
      srl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CloudDailyTaskPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CloudDailyTaskPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Level != other.Level) return false;
    if (Progress != other.Progress) return false;
    if (Isreward != other.Isreward) return false;
    if (Srl != other.Srl) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Progress != 0) hash ^= Progress.GetHashCode();
    if (Isreward != 0) hash ^= Isreward.GetHashCode();
    if (Srl != 0) hash ^= Srl.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (Progress != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Progress);
    }
    if (Isreward != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Isreward);
    }
    if (Srl != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Srl);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Progress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
    }
    if (Isreward != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Isreward);
    }
    if (Srl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Srl);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CloudDailyTaskPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Progress != 0) {
      Progress = other.Progress;
    }
    if (other.Isreward != 0) {
      Isreward = other.Isreward;
    }
    if (other.Srl != 0) {
      Srl = other.Srl;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 24: {
          Progress = input.ReadInt32();
          break;
        }
        case 32: {
          Isreward = input.ReadInt32();
          break;
        }
        case 40: {
          Srl = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///云游开图任务
/// </summary>
public sealed partial class CloudMapTaskPb : pb::IMessage<CloudMapTaskPb> {
  private static readonly pb::MessageParser<CloudMapTaskPb> _parser = new pb::MessageParser<CloudMapTaskPb>(() => new CloudMapTaskPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CloudMapTaskPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudMapTaskPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudMapTaskPb(CloudMapTaskPb other) : this() {
    progress_ = other.progress_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudMapTaskPb Clone() {
    return new CloudMapTaskPb(this);
  }

  /// <summary>Field number for the "progress" field.</summary>
  public const int ProgressFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_progress_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> progress_ = new pbc::MapField<int, int>();
  /// <summary>
  ///进度 k:taskid 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Progress {
    get { return progress_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CloudMapTaskPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CloudMapTaskPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Progress.Equals(other.Progress)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Progress.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    progress_.WriteTo(output, _map_progress_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += progress_.CalculateSize(_map_progress_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CloudMapTaskPb other) {
    if (other == null) {
      return;
    }
    progress_.Add(other.progress_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          progress_.AddEntriesFrom(input, _map_progress_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///云游基础数据 --server用
/// </summary>
public sealed partial class CloudBasePb : pb::IMessage<CloudBasePb> {
  private static readonly pb::MessageParser<CloudBasePb> _parser = new pb::MessageParser<CloudBasePb>(() => new CloudBasePb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CloudBasePb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudBasePb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudBasePb(CloudBasePb other) : this() {
    mapid_ = other.mapid_;
    maxMapId_ = other.maxMapId_;
    pavLevel_ = other.pavLevel_;
    cloudCd_ = other.cloudCd_;
    pavGrid_ = other.pavGrid_;
    pavLevelCd_ = other.pavLevelCd_;
    pavAdCd_ = other.pavAdCd_;
    matLooksMax_ = other.matLooksMax_.Clone();
    battleId_ = other.battleId_;
    battleState_ = other.battleState_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloudBasePb Clone() {
    return new CloudBasePb(this);
  }

  /// <summary>Field number for the "mapid" field.</summary>
  public const int MapidFieldNumber = 1;
  private int mapid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mapid {
    get { return mapid_; }
    set {
      mapid_ = value;
    }
  }

  /// <summary>Field number for the "maxMapId" field.</summary>
  public const int MaxMapIdFieldNumber = 2;
  private int maxMapId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxMapId {
    get { return maxMapId_; }
    set {
      maxMapId_ = value;
    }
  }

  /// <summary>Field number for the "pavLevel" field.</summary>
  public const int PavLevelFieldNumber = 3;
  private int pavLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PavLevel {
    get { return pavLevel_; }
    set {
      pavLevel_ = value;
    }
  }

  /// <summary>Field number for the "cloudCd" field.</summary>
  public const int CloudCdFieldNumber = 4;
  private int cloudCd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CloudCd {
    get { return cloudCd_; }
    set {
      cloudCd_ = value;
    }
  }

  /// <summary>Field number for the "pavGrid" field.</summary>
  public const int PavGridFieldNumber = 5;
  private int pavGrid_;
  /// <summary>
  ///藏宝阁格子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PavGrid {
    get { return pavGrid_; }
    set {
      pavGrid_ = value;
    }
  }

  /// <summary>Field number for the "pavLevelCd" field.</summary>
  public const int PavLevelCdFieldNumber = 6;
  private int pavLevelCd_;
  /// <summary>
  ///藏宝阁升级cd
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PavLevelCd {
    get { return pavLevelCd_; }
    set {
      pavLevelCd_ = value;
    }
  }

  /// <summary>Field number for the "pavAdCd" field.</summary>
  public const int PavAdCdFieldNumber = 7;
  private int pavAdCd_;
  /// <summary>
  ///藏宝阁广告cd
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PavAdCd {
    get { return pavAdCd_; }
    set {
      pavAdCd_ = value;
    }
  }

  /// <summary>Field number for the "matLooksMax" field.</summary>
  public const int MatLooksMaxFieldNumber = 8;
  private static readonly pbc::MapField<int, int>.Codec _map_matLooksMax_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 66);
  private readonly pbc::MapField<int, int> matLooksMax_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> MatLooksMax {
    get { return matLooksMax_; }
  }

  /// <summary>Field number for the "battleId" field.</summary>
  public const int BattleIdFieldNumber = 9;
  private int battleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BattleId {
    get { return battleId_; }
    set {
      battleId_ = value;
    }
  }

  /// <summary>Field number for the "battleState" field.</summary>
  public const int BattleStateFieldNumber = 10;
  private int battleState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BattleState {
    get { return battleState_; }
    set {
      battleState_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CloudBasePb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CloudBasePb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Mapid != other.Mapid) return false;
    if (MaxMapId != other.MaxMapId) return false;
    if (PavLevel != other.PavLevel) return false;
    if (CloudCd != other.CloudCd) return false;
    if (PavGrid != other.PavGrid) return false;
    if (PavLevelCd != other.PavLevelCd) return false;
    if (PavAdCd != other.PavAdCd) return false;
    if (!MatLooksMax.Equals(other.MatLooksMax)) return false;
    if (BattleId != other.BattleId) return false;
    if (BattleState != other.BattleState) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Mapid != 0) hash ^= Mapid.GetHashCode();
    if (MaxMapId != 0) hash ^= MaxMapId.GetHashCode();
    if (PavLevel != 0) hash ^= PavLevel.GetHashCode();
    if (CloudCd != 0) hash ^= CloudCd.GetHashCode();
    if (PavGrid != 0) hash ^= PavGrid.GetHashCode();
    if (PavLevelCd != 0) hash ^= PavLevelCd.GetHashCode();
    if (PavAdCd != 0) hash ^= PavAdCd.GetHashCode();
    hash ^= MatLooksMax.GetHashCode();
    if (BattleId != 0) hash ^= BattleId.GetHashCode();
    if (BattleState != 0) hash ^= BattleState.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Mapid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Mapid);
    }
    if (MaxMapId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MaxMapId);
    }
    if (PavLevel != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PavLevel);
    }
    if (CloudCd != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CloudCd);
    }
    if (PavGrid != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(PavGrid);
    }
    if (PavLevelCd != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(PavLevelCd);
    }
    if (PavAdCd != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(PavAdCd);
    }
    matLooksMax_.WriteTo(output, _map_matLooksMax_codec);
    if (BattleId != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(BattleId);
    }
    if (BattleState != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(BattleState);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Mapid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mapid);
    }
    if (MaxMapId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMapId);
    }
    if (PavLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PavLevel);
    }
    if (CloudCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CloudCd);
    }
    if (PavGrid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PavGrid);
    }
    if (PavLevelCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PavLevelCd);
    }
    if (PavAdCd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PavAdCd);
    }
    size += matLooksMax_.CalculateSize(_map_matLooksMax_codec);
    if (BattleId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleId);
    }
    if (BattleState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleState);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CloudBasePb other) {
    if (other == null) {
      return;
    }
    if (other.Mapid != 0) {
      Mapid = other.Mapid;
    }
    if (other.MaxMapId != 0) {
      MaxMapId = other.MaxMapId;
    }
    if (other.PavLevel != 0) {
      PavLevel = other.PavLevel;
    }
    if (other.CloudCd != 0) {
      CloudCd = other.CloudCd;
    }
    if (other.PavGrid != 0) {
      PavGrid = other.PavGrid;
    }
    if (other.PavLevelCd != 0) {
      PavLevelCd = other.PavLevelCd;
    }
    if (other.PavAdCd != 0) {
      PavAdCd = other.PavAdCd;
    }
    matLooksMax_.Add(other.matLooksMax_);
    if (other.BattleId != 0) {
      BattleId = other.BattleId;
    }
    if (other.BattleState != 0) {
      BattleState = other.BattleState;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Mapid = input.ReadInt32();
          break;
        }
        case 16: {
          MaxMapId = input.ReadInt32();
          break;
        }
        case 24: {
          PavLevel = input.ReadInt32();
          break;
        }
        case 32: {
          CloudCd = input.ReadInt32();
          break;
        }
        case 40: {
          PavGrid = input.ReadInt32();
          break;
        }
        case 48: {
          PavLevelCd = input.ReadInt32();
          break;
        }
        case 56: {
          PavAdCd = input.ReadInt32();
          break;
        }
        case 66: {
          matLooksMax_.AddEntriesFrom(input, _map_matLooksMax_codec);
          break;
        }
        case 72: {
          BattleId = input.ReadInt32();
          break;
        }
        case 80: {
          BattleState = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家云游每日任务 --server用
/// </summary>
public sealed partial class PCloudDailyTaskPb : pb::IMessage<PCloudDailyTaskPb> {
  private static readonly pb::MessageParser<PCloudDailyTaskPb> _parser = new pb::MessageParser<PCloudDailyTaskPb>(() => new PCloudDailyTaskPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PCloudDailyTaskPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCloudDailyTaskPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCloudDailyTaskPb(PCloudDailyTaskPb other) : this() {
    tasks_ = other.tasks_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCloudDailyTaskPb Clone() {
    return new PCloudDailyTaskPb(this);
  }

  /// <summary>Field number for the "tasks" field.</summary>
  public const int TasksFieldNumber = 1;
  private static readonly pbc::MapField<int, global::CloudDailyTaskPb>.Codec _map_tasks_codec
      = new pbc::MapField<int, global::CloudDailyTaskPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::CloudDailyTaskPb.Parser), 10);
  private readonly pbc::MapField<int, global::CloudDailyTaskPb> tasks_ = new pbc::MapField<int, global::CloudDailyTaskPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::CloudDailyTaskPb> Tasks {
    get { return tasks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PCloudDailyTaskPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PCloudDailyTaskPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Tasks.Equals(other.Tasks)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Tasks.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    tasks_.WriteTo(output, _map_tasks_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += tasks_.CalculateSize(_map_tasks_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PCloudDailyTaskPb other) {
    if (other == null) {
      return;
    }
    tasks_.Add(other.tasks_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          tasks_.AddEntriesFrom(input, _map_tasks_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家云游材料 --server用
/// </summary>
public sealed partial class PMaterialPb : pb::IMessage<PMaterialPb> {
  private static readonly pb::MessageParser<PMaterialPb> _parser = new pb::MessageParser<PMaterialPb>(() => new PMaterialPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PMaterialPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PMaterialPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PMaterialPb(PMaterialPb other) : this() {
    mat_ = other.mat_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PMaterialPb Clone() {
    return new PMaterialPb(this);
  }

  /// <summary>Field number for the "mat" field.</summary>
  public const int MatFieldNumber = 1;
  private static readonly pbc::MapField<int, global::MaterialPb>.Codec _map_mat_codec
      = new pbc::MapField<int, global::MaterialPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::MaterialPb.Parser), 10);
  private readonly pbc::MapField<int, global::MaterialPb> mat_ = new pbc::MapField<int, global::MaterialPb>();
  /// <summary>
  /// k: type*1000+pos
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::MaterialPb> Mat {
    get { return mat_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PMaterialPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PMaterialPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Mat.Equals(other.Mat)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Mat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    mat_.WriteTo(output, _map_mat_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += mat_.CalculateSize(_map_mat_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PMaterialPb other) {
    if (other == null) {
      return;
    }
    mat_.Add(other.mat_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          mat_.AddEntriesFrom(input, _map_mat_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家云游工具 --server用
/// </summary>
public sealed partial class PCloudToolPb : pb::IMessage<PCloudToolPb> {
  private static readonly pb::MessageParser<PCloudToolPb> _parser = new pb::MessageParser<PCloudToolPb>(() => new PCloudToolPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PCloudToolPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCloudToolPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCloudToolPb(PCloudToolPb other) : this() {
    tools_ = other.tools_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PCloudToolPb Clone() {
    return new PCloudToolPb(this);
  }

  /// <summary>Field number for the "tools" field.</summary>
  public const int ToolsFieldNumber = 1;
  private static readonly pbc::MapField<int, global::CloudToolPb>.Codec _map_tools_codec
      = new pbc::MapField<int, global::CloudToolPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::CloudToolPb.Parser), 10);
  private readonly pbc::MapField<int, global::CloudToolPb> tools_ = new pbc::MapField<int, global::CloudToolPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::CloudToolPb> Tools {
    get { return tools_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PCloudToolPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PCloudToolPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Tools.Equals(other.Tools)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Tools.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    tools_.WriteTo(output, _map_tools_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += tools_.CalculateSize(_map_tools_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PCloudToolPb other) {
    if (other == null) {
      return;
    }
    tools_.Add(other.tools_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          tools_.AddEntriesFrom(input, _map_tools_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 伙伴对象
/// </summary>
public sealed partial class PlayerPartnerPb : pb::IMessage<PlayerPartnerPb> {
  private static readonly pb::MessageParser<PlayerPartnerPb> _parser = new pb::MessageParser<PlayerPartnerPb>(() => new PlayerPartnerPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerPartnerPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[68]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPartnerPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPartnerPb(PlayerPartnerPb other) : this() {
    partners_ = other.partners_.Clone();
    partnerChips_ = other.partnerChips_.Clone();
    freeDrawTime_ = other.freeDrawTime_;
    trammels_ = other.trammels_.Clone();
    posList_ = other.posList_.Clone();
    drawTotalNum_ = other.drawTotalNum_;
    integralNum_ = other.integralNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPartnerPb Clone() {
    return new PlayerPartnerPb(this);
  }

  /// <summary>Field number for the "partners" field.</summary>
  public const int PartnersFieldNumber = 1;
  private static readonly pbc::MapField<int, global::PartnerPb>.Codec _map_partners_codec
      = new pbc::MapField<int, global::PartnerPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PartnerPb.Parser), 10);
  private readonly pbc::MapField<int, global::PartnerPb> partners_ = new pbc::MapField<int, global::PartnerPb>();
  /// <summary>
  /// key : partner configId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::PartnerPb> Partners {
    get { return partners_; }
  }

  /// <summary>Field number for the "partnerChips" field.</summary>
  public const int PartnerChipsFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_partnerChips_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> partnerChips_ = new pbc::MapField<int, int>();
  /// <summary>
  /// key : partner configId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> PartnerChips {
    get { return partnerChips_; }
  }

  /// <summary>Field number for the "freeDrawTime" field.</summary>
  public const int FreeDrawTimeFieldNumber = 4;
  private long freeDrawTime_;
  /// <summary>
  /// 使用免费抽卡时间戳，毫秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FreeDrawTime {
    get { return freeDrawTime_; }
    set {
      freeDrawTime_ = value;
    }
  }

  /// <summary>Field number for the "trammels" field.</summary>
  public const int TrammelsFieldNumber = 5;
  private static readonly pbc::MapField<int, global::PartnerTrammelsPb>.Codec _map_trammels_codec
      = new pbc::MapField<int, global::PartnerTrammelsPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PartnerTrammelsPb.Parser), 42);
  private readonly pbc::MapField<int, global::PartnerTrammelsPb> trammels_ = new pbc::MapField<int, global::PartnerTrammelsPb>();
  /// <summary>
  /// 羁绊组，key: configId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::PartnerTrammelsPb> Trammels {
    get { return trammels_; }
  }

  /// <summary>Field number for the "posList" field.</summary>
  public const int PosListFieldNumber = 6;
  private static readonly pb::FieldCodec<global::PartnerPosInfoPb> _repeated_posList_codec
      = pb::FieldCodec.ForMessage(50, global::PartnerPosInfoPb.Parser);
  private readonly pbc::RepeatedField<global::PartnerPosInfoPb> posList_ = new pbc::RepeatedField<global::PartnerPosInfoPb>();
  /// <summary>
  /// 上阵数组
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PartnerPosInfoPb> PosList {
    get { return posList_; }
  }

  /// <summary>Field number for the "drawTotalNum" field.</summary>
  public const int DrawTotalNumFieldNumber = 7;
  private int drawTotalNum_;
  /// <summary>
  /// 抽卡次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DrawTotalNum {
    get { return drawTotalNum_; }
    set {
      drawTotalNum_ = value;
    }
  }

  /// <summary>Field number for the "integralNum" field.</summary>
  public const int IntegralNumFieldNumber = 8;
  private int integralNum_;
  /// <summary>
  /// 积分数量；
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IntegralNum {
    get { return integralNum_; }
    set {
      integralNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerPartnerPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerPartnerPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Partners.Equals(other.Partners)) return false;
    if (!PartnerChips.Equals(other.PartnerChips)) return false;
    if (FreeDrawTime != other.FreeDrawTime) return false;
    if (!Trammels.Equals(other.Trammels)) return false;
    if(!posList_.Equals(other.posList_)) return false;
    if (DrawTotalNum != other.DrawTotalNum) return false;
    if (IntegralNum != other.IntegralNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Partners.GetHashCode();
    hash ^= PartnerChips.GetHashCode();
    if (FreeDrawTime != 0L) hash ^= FreeDrawTime.GetHashCode();
    hash ^= Trammels.GetHashCode();
    hash ^= posList_.GetHashCode();
    if (DrawTotalNum != 0) hash ^= DrawTotalNum.GetHashCode();
    if (IntegralNum != 0) hash ^= IntegralNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    partners_.WriteTo(output, _map_partners_codec);
    partnerChips_.WriteTo(output, _map_partnerChips_codec);
    if (FreeDrawTime != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(FreeDrawTime);
    }
    trammels_.WriteTo(output, _map_trammels_codec);
    posList_.WriteTo(output, _repeated_posList_codec);
    if (DrawTotalNum != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(DrawTotalNum);
    }
    if (IntegralNum != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(IntegralNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += partners_.CalculateSize(_map_partners_codec);
    size += partnerChips_.CalculateSize(_map_partnerChips_codec);
    if (FreeDrawTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FreeDrawTime);
    }
    size += trammels_.CalculateSize(_map_trammels_codec);
    size += posList_.CalculateSize(_repeated_posList_codec);
    if (DrawTotalNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawTotalNum);
    }
    if (IntegralNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntegralNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerPartnerPb other) {
    if (other == null) {
      return;
    }
    partners_.Add(other.partners_);
    partnerChips_.Add(other.partnerChips_);
    if (other.FreeDrawTime != 0L) {
      FreeDrawTime = other.FreeDrawTime;
    }
    trammels_.Add(other.trammels_);
    posList_.Add(other.posList_);
    if (other.DrawTotalNum != 0) {
      DrawTotalNum = other.DrawTotalNum;
    }
    if (other.IntegralNum != 0) {
      IntegralNum = other.IntegralNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          partners_.AddEntriesFrom(input, _map_partners_codec);
          break;
        }
        case 18: {
          partnerChips_.AddEntriesFrom(input, _map_partnerChips_codec);
          break;
        }
        case 32: {
          FreeDrawTime = input.ReadInt64();
          break;
        }
        case 42: {
          trammels_.AddEntriesFrom(input, _map_trammels_codec);
          break;
        }
        case 50: {
          posList_.AddEntriesFrom(input, _repeated_posList_codec);
          break;
        }
        case 56: {
          DrawTotalNum = input.ReadInt32();
          break;
        }
        case 64: {
          IntegralNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 伙伴对象
/// </summary>
public sealed partial class PartnerPb : pb::IMessage<PartnerPb> {
  private static readonly pb::MessageParser<PartnerPb> _parser = new pb::MessageParser<PartnerPb>(() => new PartnerPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PartnerPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[69]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerPb(PartnerPb other) : this() {
    configId_ = other.configId_;
    level_ = other.level_;
    Attr = other.attr_ != null ? other.Attr.Clone() : null;
    skillLeve_ = other.skillLeve_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerPb Clone() {
    return new PartnerPb(this);
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 1;
  private int configId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 3;
  private global::AttrPb attr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AttrPb Attr {
    get { return attr_; }
    set {
      attr_ = value;
    }
  }

  /// <summary>Field number for the "skillLeve" field.</summary>
  public const int SkillLeveFieldNumber = 4;
  private int skillLeve_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SkillLeve {
    get { return skillLeve_; }
    set {
      skillLeve_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PartnerPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PartnerPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigId != other.ConfigId) return false;
    if (Level != other.Level) return false;
    if (!object.Equals(Attr, other.Attr)) return false;
    if (SkillLeve != other.SkillLeve) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (attr_ != null) hash ^= Attr.GetHashCode();
    if (SkillLeve != 0) hash ^= SkillLeve.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConfigId);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (attr_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Attr);
    }
    if (SkillLeve != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(SkillLeve);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (attr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
    }
    if (SkillLeve != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLeve);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PartnerPb other) {
    if (other == null) {
      return;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.attr_ != null) {
      if (attr_ == null) {
        attr_ = new global::AttrPb();
      }
      Attr.MergeFrom(other.Attr);
    }
    if (other.SkillLeve != 0) {
      SkillLeve = other.SkillLeve;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 26: {
          if (attr_ == null) {
            attr_ = new global::AttrPb();
          }
          input.ReadMessage(attr_);
          break;
        }
        case 32: {
          SkillLeve = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PartnerPosInfoPb : pb::IMessage<PartnerPosInfoPb> {
  private static readonly pb::MessageParser<PartnerPosInfoPb> _parser = new pb::MessageParser<PartnerPosInfoPb>(() => new PartnerPosInfoPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PartnerPosInfoPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[70]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerPosInfoPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerPosInfoPb(PartnerPosInfoPb other) : this() {
    posId_ = other.posId_;
    configId_ = other.configId_;
    isOpen_ = other.isOpen_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerPosInfoPb Clone() {
    return new PartnerPosInfoPb(this);
  }

  /// <summary>Field number for the "posId" field.</summary>
  public const int PosIdFieldNumber = 1;
  private int posId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PosId {
    get { return posId_; }
    set {
      posId_ = value;
    }
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 2;
  private int configId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "isOpen" field.</summary>
  public const int IsOpenFieldNumber = 3;
  private int isOpen_;
  /// <summary>
  /// 1:open. 0:close;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsOpen {
    get { return isOpen_; }
    set {
      isOpen_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PartnerPosInfoPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PartnerPosInfoPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PosId != other.PosId) return false;
    if (ConfigId != other.ConfigId) return false;
    if (IsOpen != other.IsOpen) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PosId != 0) hash ^= PosId.GetHashCode();
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (IsOpen != 0) hash ^= IsOpen.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PosId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PosId);
    }
    if (ConfigId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ConfigId);
    }
    if (IsOpen != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(IsOpen);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PosId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PosId);
    }
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (IsOpen != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsOpen);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PartnerPosInfoPb other) {
    if (other == null) {
      return;
    }
    if (other.PosId != 0) {
      PosId = other.PosId;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.IsOpen != 0) {
      IsOpen = other.IsOpen;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PosId = input.ReadInt32();
          break;
        }
        case 16: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 24: {
          IsOpen = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PartnerTrammelsPb : pb::IMessage<PartnerTrammelsPb> {
  private static readonly pb::MessageParser<PartnerTrammelsPb> _parser = new pb::MessageParser<PartnerTrammelsPb>(() => new PartnerTrammelsPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PartnerTrammelsPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[71]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerTrammelsPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerTrammelsPb(PartnerTrammelsPb other) : this() {
    configId_ = other.configId_;
    level_ = other.level_;
    Attr = other.attr_ != null ? other.Attr.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerTrammelsPb Clone() {
    return new PartnerTrammelsPb(this);
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 1;
  private int configId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 3;
  private global::AttrPb attr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AttrPb Attr {
    get { return attr_; }
    set {
      attr_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PartnerTrammelsPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PartnerTrammelsPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigId != other.ConfigId) return false;
    if (Level != other.Level) return false;
    if (!object.Equals(Attr, other.Attr)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (attr_ != null) hash ^= Attr.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConfigId);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (attr_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Attr);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (attr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PartnerTrammelsPb other) {
    if (other == null) {
      return;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.attr_ != null) {
      if (attr_ == null) {
        attr_ = new global::AttrPb();
      }
      Attr.MergeFrom(other.Attr);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 26: {
          if (attr_ == null) {
            attr_ = new global::AttrPb();
          }
          input.ReadMessage(attr_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 圣器
/// </summary>
public sealed partial class PlayerSacredVesselsPb : pb::IMessage<PlayerSacredVesselsPb> {
  private static readonly pb::MessageParser<PlayerSacredVesselsPb> _parser = new pb::MessageParser<PlayerSacredVesselsPb>(() => new PlayerSacredVesselsPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerSacredVesselsPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[72]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerSacredVesselsPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerSacredVesselsPb(PlayerSacredVesselsPb other) : this() {
    sacredVessels_ = other.sacredVessels_.Clone();
    chips_ = other.chips_.Clone();
    books_ = other.books_.Clone();
    putOnConfigId_ = other.putOnConfigId_;
    eliteNum_ = other.eliteNum_;
    freeNum_ = other.freeNum_;
    freeTime_ = other.freeTime_;
    records_ = other.records_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerSacredVesselsPb Clone() {
    return new PlayerSacredVesselsPb(this);
  }

  /// <summary>Field number for the "sacredVessels" field.</summary>
  public const int SacredVesselsFieldNumber = 1;
  private static readonly pbc::MapField<int, global::SacredVesselsPb>.Codec _map_sacredVessels_codec
      = new pbc::MapField<int, global::SacredVesselsPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::SacredVesselsPb.Parser), 10);
  private readonly pbc::MapField<int, global::SacredVesselsPb> sacredVessels_ = new pbc::MapField<int, global::SacredVesselsPb>();
  /// <summary>
  /// key : sacredVessels configId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::SacredVesselsPb> SacredVessels {
    get { return sacredVessels_; }
  }

  /// <summary>Field number for the "chips" field.</summary>
  public const int ChipsFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_chips_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> chips_ = new pbc::MapField<int, int>();
  /// <summary>
  /// key : sacredVessels configId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Chips {
    get { return chips_; }
  }

  /// <summary>Field number for the "books" field.</summary>
  public const int BooksFieldNumber = 3;
  private static readonly pbc::MapField<int, global::SacredVesselsBookPb>.Codec _map_books_codec
      = new pbc::MapField<int, global::SacredVesselsBookPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::SacredVesselsBookPb.Parser), 26);
  private readonly pbc::MapField<int, global::SacredVesselsBookPb> books_ = new pbc::MapField<int, global::SacredVesselsBookPb>();
  /// <summary>
  /// 圣器组，key: configId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::SacredVesselsBookPb> Books {
    get { return books_; }
  }

  /// <summary>Field number for the "putOnConfigId" field.</summary>
  public const int PutOnConfigIdFieldNumber = 4;
  private int putOnConfigId_;
  /// <summary>
  /// 上阵圣器configId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PutOnConfigId {
    get { return putOnConfigId_; }
    set {
      putOnConfigId_ = value;
    }
  }

  /// <summary>Field number for the "eliteNum" field.</summary>
  public const int EliteNumFieldNumber = 5;
  private int eliteNum_;
  /// <summary>
  /// 精华数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EliteNum {
    get { return eliteNum_; }
    set {
      eliteNum_ = value;
    }
  }

  /// <summary>Field number for the "freeNum" field.</summary>
  public const int FreeNumFieldNumber = 6;
  private int freeNum_;
  /// <summary>
  /// 免费次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FreeNum {
    get { return freeNum_; }
    set {
      freeNum_ = value;
    }
  }

  /// <summary>Field number for the "freeTime" field.</summary>
  public const int FreeTimeFieldNumber = 7;
  private long freeTime_;
  /// <summary>
  /// 使用免费次数时间,服务器用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FreeTime {
    get { return freeTime_; }
    set {
      freeTime_ = value;
    }
  }

  /// <summary>Field number for the "records" field.</summary>
  public const int RecordsFieldNumber = 8;
  private static readonly pb::FieldCodec<global::SacredVesselsRecordPb> _repeated_records_codec
      = pb::FieldCodec.ForMessage(66, global::SacredVesselsRecordPb.Parser);
  private readonly pbc::RepeatedField<global::SacredVesselsRecordPb> records_ = new pbc::RepeatedField<global::SacredVesselsRecordPb>();
  /// <summary>
  /// 记录
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SacredVesselsRecordPb> Records {
    get { return records_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerSacredVesselsPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerSacredVesselsPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!SacredVessels.Equals(other.SacredVessels)) return false;
    if (!Chips.Equals(other.Chips)) return false;
    if (!Books.Equals(other.Books)) return false;
    if (PutOnConfigId != other.PutOnConfigId) return false;
    if (EliteNum != other.EliteNum) return false;
    if (FreeNum != other.FreeNum) return false;
    if (FreeTime != other.FreeTime) return false;
    if(!records_.Equals(other.records_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= SacredVessels.GetHashCode();
    hash ^= Chips.GetHashCode();
    hash ^= Books.GetHashCode();
    if (PutOnConfigId != 0) hash ^= PutOnConfigId.GetHashCode();
    if (EliteNum != 0) hash ^= EliteNum.GetHashCode();
    if (FreeNum != 0) hash ^= FreeNum.GetHashCode();
    if (FreeTime != 0L) hash ^= FreeTime.GetHashCode();
    hash ^= records_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    sacredVessels_.WriteTo(output, _map_sacredVessels_codec);
    chips_.WriteTo(output, _map_chips_codec);
    books_.WriteTo(output, _map_books_codec);
    if (PutOnConfigId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(PutOnConfigId);
    }
    if (EliteNum != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(EliteNum);
    }
    if (FreeNum != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(FreeNum);
    }
    if (FreeTime != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(FreeTime);
    }
    records_.WriteTo(output, _repeated_records_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += sacredVessels_.CalculateSize(_map_sacredVessels_codec);
    size += chips_.CalculateSize(_map_chips_codec);
    size += books_.CalculateSize(_map_books_codec);
    if (PutOnConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PutOnConfigId);
    }
    if (EliteNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EliteNum);
    }
    if (FreeNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeNum);
    }
    if (FreeTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FreeTime);
    }
    size += records_.CalculateSize(_repeated_records_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerSacredVesselsPb other) {
    if (other == null) {
      return;
    }
    sacredVessels_.Add(other.sacredVessels_);
    chips_.Add(other.chips_);
    books_.Add(other.books_);
    if (other.PutOnConfigId != 0) {
      PutOnConfigId = other.PutOnConfigId;
    }
    if (other.EliteNum != 0) {
      EliteNum = other.EliteNum;
    }
    if (other.FreeNum != 0) {
      FreeNum = other.FreeNum;
    }
    if (other.FreeTime != 0L) {
      FreeTime = other.FreeTime;
    }
    records_.Add(other.records_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          sacredVessels_.AddEntriesFrom(input, _map_sacredVessels_codec);
          break;
        }
        case 18: {
          chips_.AddEntriesFrom(input, _map_chips_codec);
          break;
        }
        case 26: {
          books_.AddEntriesFrom(input, _map_books_codec);
          break;
        }
        case 32: {
          PutOnConfigId = input.ReadInt32();
          break;
        }
        case 40: {
          EliteNum = input.ReadInt32();
          break;
        }
        case 48: {
          FreeNum = input.ReadInt32();
          break;
        }
        case 56: {
          FreeTime = input.ReadInt64();
          break;
        }
        case 66: {
          records_.AddEntriesFrom(input, _repeated_records_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 圣器对象
/// </summary>
public sealed partial class SacredVesselsPb : pb::IMessage<SacredVesselsPb> {
  private static readonly pb::MessageParser<SacredVesselsPb> _parser = new pb::MessageParser<SacredVesselsPb>(() => new SacredVesselsPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SacredVesselsPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[73]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsPb(SacredVesselsPb other) : this() {
    configId_ = other.configId_;
    level_ = other.level_;
    Attr = other.attr_ != null ? other.Attr.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsPb Clone() {
    return new SacredVesselsPb(this);
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 1;
  private int configId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 3;
  private global::AttrPb attr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AttrPb Attr {
    get { return attr_; }
    set {
      attr_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SacredVesselsPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SacredVesselsPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigId != other.ConfigId) return false;
    if (Level != other.Level) return false;
    if (!object.Equals(Attr, other.Attr)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (attr_ != null) hash ^= Attr.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConfigId);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (attr_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Attr);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (attr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SacredVesselsPb other) {
    if (other == null) {
      return;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.attr_ != null) {
      if (attr_ == null) {
        attr_ = new global::AttrPb();
      }
      Attr.MergeFrom(other.Attr);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 26: {
          if (attr_ == null) {
            attr_ = new global::AttrPb();
          }
          input.ReadMessage(attr_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 圣器组
/// </summary>
public sealed partial class SacredVesselsBookPb : pb::IMessage<SacredVesselsBookPb> {
  private static readonly pb::MessageParser<SacredVesselsBookPb> _parser = new pb::MessageParser<SacredVesselsBookPb>(() => new SacredVesselsBookPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SacredVesselsBookPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[74]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsBookPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsBookPb(SacredVesselsBookPb other) : this() {
    configId_ = other.configId_;
    Attr = other.attr_ != null ? other.Attr.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsBookPb Clone() {
    return new SacredVesselsBookPb(this);
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 1;
  private int configId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 2;
  private global::AttrPb attr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AttrPb Attr {
    get { return attr_; }
    set {
      attr_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SacredVesselsBookPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SacredVesselsBookPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigId != other.ConfigId) return false;
    if (!object.Equals(Attr, other.Attr)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (attr_ != null) hash ^= Attr.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConfigId);
    }
    if (attr_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Attr);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (attr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SacredVesselsBookPb other) {
    if (other == null) {
      return;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.attr_ != null) {
      if (attr_ == null) {
        attr_ = new global::AttrPb();
      }
      Attr.MergeFrom(other.Attr);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 18: {
          if (attr_ == null) {
            attr_ = new global::AttrPb();
          }
          input.ReadMessage(attr_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 圣器记录
/// </summary>
public sealed partial class SacredVesselsRecordPb : pb::IMessage<SacredVesselsRecordPb> {
  private static readonly pb::MessageParser<SacredVesselsRecordPb> _parser = new pb::MessageParser<SacredVesselsRecordPb>(() => new SacredVesselsRecordPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SacredVesselsRecordPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[75]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsRecordPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsRecordPb(SacredVesselsRecordPb other) : this() {
    configId_ = other.configId_;
    eliteNum_ = other.eliteNum_;
    time_ = other.time_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsRecordPb Clone() {
    return new SacredVesselsRecordPb(this);
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 1;
  private int configId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "eliteNum" field.</summary>
  public const int EliteNumFieldNumber = 2;
  private int eliteNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EliteNum {
    get { return eliteNum_; }
    set {
      eliteNum_ = value;
    }
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 3;
  private long time_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SacredVesselsRecordPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SacredVesselsRecordPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigId != other.ConfigId) return false;
    if (EliteNum != other.EliteNum) return false;
    if (Time != other.Time) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (EliteNum != 0) hash ^= EliteNum.GetHashCode();
    if (Time != 0L) hash ^= Time.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConfigId);
    }
    if (EliteNum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(EliteNum);
    }
    if (Time != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(Time);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (EliteNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EliteNum);
    }
    if (Time != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SacredVesselsRecordPb other) {
    if (other == null) {
      return;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.EliteNum != 0) {
      EliteNum = other.EliteNum;
    }
    if (other.Time != 0L) {
      Time = other.Time;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 16: {
          EliteNum = input.ReadInt32();
          break;
        }
        case 24: {
          Time = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家宠物数据
/// </summary>
public sealed partial class PlayerPetPb : pb::IMessage<PlayerPetPb> {
  private static readonly pb::MessageParser<PlayerPetPb> _parser = new pb::MessageParser<PlayerPetPb>(() => new PlayerPetPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerPetPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[76]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPetPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPetPb(PlayerPetPb other) : this() {
    freeGridNum_ = other.freeGridNum_;
    diamondGridNum_ = other.diamondGridNum_;
    petMap_ = other.petMap_.Clone();
    onBattlePetId_ = other.onBattlePetId_;
    ShopPets = other.shopPets_ != null ? other.ShopPets.Clone() : null;
    refreshShopNum_ = other.refreshShopNum_;
    openCheerNum_ = other.openCheerNum_;
    tmpPetId_ = other.tmpPetId_;
    tmpPassiveSkills_ = other.tmpPassiveSkills_.Clone();
    ownPetList_ = other.ownPetList_.Clone();
    trammelsId_ = other.trammelsId_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPetPb Clone() {
    return new PlayerPetPb(this);
  }

  /// <summary>Field number for the "freeGridNum" field.</summary>
  public const int FreeGridNumFieldNumber = 1;
  private int freeGridNum_;
  /// <summary>
  /// 免费开的格子数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FreeGridNum {
    get { return freeGridNum_; }
    set {
      freeGridNum_ = value;
    }
  }

  /// <summary>Field number for the "diamondGridNum" field.</summary>
  public const int DiamondGridNumFieldNumber = 2;
  private int diamondGridNum_;
  /// <summary>
  ///花钱开的格子数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DiamondGridNum {
    get { return diamondGridNum_; }
    set {
      diamondGridNum_ = value;
    }
  }

  /// <summary>Field number for the "petMap" field.</summary>
  public const int PetMapFieldNumber = 3;
  private static readonly pbc::MapField<int, global::PetPb>.Codec _map_petMap_codec
      = new pbc::MapField<int, global::PetPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PetPb.Parser), 26);
  private readonly pbc::MapField<int, global::PetPb> petMap_ = new pbc::MapField<int, global::PetPb>();
  /// <summary>
  /// 唯一id,pb
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::PetPb> PetMap {
    get { return petMap_; }
  }

  /// <summary>Field number for the "onBattlePetId" field.</summary>
  public const int OnBattlePetIdFieldNumber = 4;
  private int onBattlePetId_;
  /// <summary>
  /// 上阵宠物id;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OnBattlePetId {
    get { return onBattlePetId_; }
    set {
      onBattlePetId_ = value;
    }
  }

  /// <summary>Field number for the "shopPets" field.</summary>
  public const int ShopPetsFieldNumber = 5;
  private global::ShopPetPb shopPets_;
  /// <summary>
  /// 商店显示宠物
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ShopPetPb ShopPets {
    get { return shopPets_; }
    set {
      shopPets_ = value;
    }
  }

  /// <summary>Field number for the "refreshShopNum" field.</summary>
  public const int RefreshShopNumFieldNumber = 6;
  private int refreshShopNum_;
  /// <summary>
  /// 刷新商店次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RefreshShopNum {
    get { return refreshShopNum_; }
    set {
      refreshShopNum_ = value;
    }
  }

  /// <summary>Field number for the "openCheerNum" field.</summary>
  public const int OpenCheerNumFieldNumber = 7;
  private int openCheerNum_;
  /// <summary>
  /// 助战开启的数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OpenCheerNum {
    get { return openCheerNum_; }
    set {
      openCheerNum_ = value;
    }
  }

  /// <summary>Field number for the "tmpPetId" field.</summary>
  public const int TmpPetIdFieldNumber = 8;
  private int tmpPetId_;
  /// <summary>
  /// 洗炼宠物id.. 服务器逻辑
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TmpPetId {
    get { return tmpPetId_; }
    set {
      tmpPetId_ = value;
    }
  }

  /// <summary>Field number for the "tmpPassiveSkills" field.</summary>
  public const int TmpPassiveSkillsFieldNumber = 9;
  private static readonly pbc::MapField<int, int>.Codec _map_tmpPassiveSkills_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 74);
  private readonly pbc::MapField<int, int> tmpPassiveSkills_ = new pbc::MapField<int, int>();
  /// <summary>
  /// 洗炼出的被动技能map，key=0,1,2.. 服务器逻辑
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> TmpPassiveSkills {
    get { return tmpPassiveSkills_; }
  }

  /// <summary>Field number for the "ownPetList" field.</summary>
  public const int OwnPetListFieldNumber = 10;
  private static readonly pb::FieldCodec<int> _repeated_ownPetList_codec
      = pb::FieldCodec.ForInt32(82);
  private readonly pbc::RepeatedField<int> ownPetList_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 获取到的宠物id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> OwnPetList {
    get { return ownPetList_; }
  }

  /// <summary>Field number for the "trammelsId" field.</summary>
  public const int TrammelsIdFieldNumber = 11;
  private static readonly pb::FieldCodec<int> _repeated_trammelsId_codec
      = pb::FieldCodec.ForInt32(90);
  private readonly pbc::RepeatedField<int> trammelsId_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 激活的羁绊id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> TrammelsId {
    get { return trammelsId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerPetPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerPetPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FreeGridNum != other.FreeGridNum) return false;
    if (DiamondGridNum != other.DiamondGridNum) return false;
    if (!PetMap.Equals(other.PetMap)) return false;
    if (OnBattlePetId != other.OnBattlePetId) return false;
    if (!object.Equals(ShopPets, other.ShopPets)) return false;
    if (RefreshShopNum != other.RefreshShopNum) return false;
    if (OpenCheerNum != other.OpenCheerNum) return false;
    if (TmpPetId != other.TmpPetId) return false;
    if (!TmpPassiveSkills.Equals(other.TmpPassiveSkills)) return false;
    if(!ownPetList_.Equals(other.ownPetList_)) return false;
    if(!trammelsId_.Equals(other.trammelsId_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FreeGridNum != 0) hash ^= FreeGridNum.GetHashCode();
    if (DiamondGridNum != 0) hash ^= DiamondGridNum.GetHashCode();
    hash ^= PetMap.GetHashCode();
    if (OnBattlePetId != 0) hash ^= OnBattlePetId.GetHashCode();
    if (shopPets_ != null) hash ^= ShopPets.GetHashCode();
    if (RefreshShopNum != 0) hash ^= RefreshShopNum.GetHashCode();
    if (OpenCheerNum != 0) hash ^= OpenCheerNum.GetHashCode();
    if (TmpPetId != 0) hash ^= TmpPetId.GetHashCode();
    hash ^= TmpPassiveSkills.GetHashCode();
    hash ^= ownPetList_.GetHashCode();
    hash ^= trammelsId_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FreeGridNum != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(FreeGridNum);
    }
    if (DiamondGridNum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DiamondGridNum);
    }
    petMap_.WriteTo(output, _map_petMap_codec);
    if (OnBattlePetId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(OnBattlePetId);
    }
    if (shopPets_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ShopPets);
    }
    if (RefreshShopNum != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(RefreshShopNum);
    }
    if (OpenCheerNum != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(OpenCheerNum);
    }
    if (TmpPetId != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(TmpPetId);
    }
    tmpPassiveSkills_.WriteTo(output, _map_tmpPassiveSkills_codec);
    ownPetList_.WriteTo(output, _repeated_ownPetList_codec);
    trammelsId_.WriteTo(output, _repeated_trammelsId_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FreeGridNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeGridNum);
    }
    if (DiamondGridNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiamondGridNum);
    }
    size += petMap_.CalculateSize(_map_petMap_codec);
    if (OnBattlePetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OnBattlePetId);
    }
    if (shopPets_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShopPets);
    }
    if (RefreshShopNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshShopNum);
    }
    if (OpenCheerNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpenCheerNum);
    }
    if (TmpPetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TmpPetId);
    }
    size += tmpPassiveSkills_.CalculateSize(_map_tmpPassiveSkills_codec);
    size += ownPetList_.CalculateSize(_repeated_ownPetList_codec);
    size += trammelsId_.CalculateSize(_repeated_trammelsId_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerPetPb other) {
    if (other == null) {
      return;
    }
    if (other.FreeGridNum != 0) {
      FreeGridNum = other.FreeGridNum;
    }
    if (other.DiamondGridNum != 0) {
      DiamondGridNum = other.DiamondGridNum;
    }
    petMap_.Add(other.petMap_);
    if (other.OnBattlePetId != 0) {
      OnBattlePetId = other.OnBattlePetId;
    }
    if (other.shopPets_ != null) {
      if (shopPets_ == null) {
        shopPets_ = new global::ShopPetPb();
      }
      ShopPets.MergeFrom(other.ShopPets);
    }
    if (other.RefreshShopNum != 0) {
      RefreshShopNum = other.RefreshShopNum;
    }
    if (other.OpenCheerNum != 0) {
      OpenCheerNum = other.OpenCheerNum;
    }
    if (other.TmpPetId != 0) {
      TmpPetId = other.TmpPetId;
    }
    tmpPassiveSkills_.Add(other.tmpPassiveSkills_);
    ownPetList_.Add(other.ownPetList_);
    trammelsId_.Add(other.trammelsId_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          FreeGridNum = input.ReadInt32();
          break;
        }
        case 16: {
          DiamondGridNum = input.ReadInt32();
          break;
        }
        case 26: {
          petMap_.AddEntriesFrom(input, _map_petMap_codec);
          break;
        }
        case 32: {
          OnBattlePetId = input.ReadInt32();
          break;
        }
        case 42: {
          if (shopPets_ == null) {
            shopPets_ = new global::ShopPetPb();
          }
          input.ReadMessage(shopPets_);
          break;
        }
        case 48: {
          RefreshShopNum = input.ReadInt32();
          break;
        }
        case 56: {
          OpenCheerNum = input.ReadInt32();
          break;
        }
        case 64: {
          TmpPetId = input.ReadInt32();
          break;
        }
        case 74: {
          tmpPassiveSkills_.AddEntriesFrom(input, _map_tmpPassiveSkills_codec);
          break;
        }
        case 82:
        case 80: {
          ownPetList_.AddEntriesFrom(input, _repeated_ownPetList_codec);
          break;
        }
        case 90:
        case 88: {
          trammelsId_.AddEntriesFrom(input, _repeated_trammelsId_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 商店中宠物
/// </summary>
public sealed partial class ShopPetPb : pb::IMessage<ShopPetPb> {
  private static readonly pb::MessageParser<ShopPetPb> _parser = new pb::MessageParser<ShopPetPb>(() => new ShopPetPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ShopPetPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[77]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShopPetPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShopPetPb(ShopPetPb other) : this() {
    petList_ = other.petList_.Clone();
    buyPetIds_ = other.buyPetIds_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShopPetPb Clone() {
    return new ShopPetPb(this);
  }

  /// <summary>Field number for the "petList" field.</summary>
  public const int PetListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PetPb> _repeated_petList_codec
      = pb::FieldCodec.ForMessage(10, global::PetPb.Parser);
  private readonly pbc::RepeatedField<global::PetPb> petList_ = new pbc::RepeatedField<global::PetPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PetPb> PetList {
    get { return petList_; }
  }

  /// <summary>Field number for the "buyPetIds" field.</summary>
  public const int BuyPetIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_buyPetIds_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> buyPetIds_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 已经购买的宠物id;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> BuyPetIds {
    get { return buyPetIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ShopPetPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ShopPetPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!petList_.Equals(other.petList_)) return false;
    if(!buyPetIds_.Equals(other.buyPetIds_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= petList_.GetHashCode();
    hash ^= buyPetIds_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    petList_.WriteTo(output, _repeated_petList_codec);
    buyPetIds_.WriteTo(output, _repeated_buyPetIds_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += petList_.CalculateSize(_repeated_petList_codec);
    size += buyPetIds_.CalculateSize(_repeated_buyPetIds_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ShopPetPb other) {
    if (other == null) {
      return;
    }
    petList_.Add(other.petList_);
    buyPetIds_.Add(other.buyPetIds_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          petList_.AddEntriesFrom(input, _repeated_petList_codec);
          break;
        }
        case 18:
        case 16: {
          buyPetIds_.AddEntriesFrom(input, _repeated_buyPetIds_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///宠物
/// </summary>
public sealed partial class PetPb : pb::IMessage<PetPb> {
  private static readonly pb::MessageParser<PetPb> _parser = new pb::MessageParser<PetPb>(() => new PetPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[78]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetPb(PetPb other) : this() {
    id_ = other.id_;
    configId_ = other.configId_;
    level_ = other.level_;
    grade_ = other.grade_;
    star_ = other.star_;
    Skill = other.skill_ != null ? other.Skill.Clone() : null;
    passiveSkills_ = other.passiveSkills_.Clone();
    isLock_ = other.isLock_;
    cheers_ = other.cheers_.Clone();
    booleLevel_ = other.booleLevel_;
    bloodPassiveSkillNum_ = other.bloodPassiveSkillNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetPb Clone() {
    return new PetPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///唯一id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 2;
  private int configId_;
  /// <summary>
  ///配置id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  /// <summary>
  ///装备等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "grade" field.</summary>
  public const int GradeFieldNumber = 4;
  private int grade_;
  /// <summary>
  ///品质
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Grade {
    get { return grade_; }
    set {
      grade_ = value;
    }
  }

  /// <summary>Field number for the "star" field.</summary>
  public const int StarFieldNumber = 5;
  private int star_;
  /// <summary>
  /// 星
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Star {
    get { return star_; }
    set {
      star_ = value;
    }
  }

  /// <summary>Field number for the "skill" field.</summary>
  public const int SkillFieldNumber = 6;
  private global::PetSkillPb skill_;
  /// <summary>
  /// 主动技能
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PetSkillPb Skill {
    get { return skill_; }
    set {
      skill_ = value;
    }
  }

  /// <summary>Field number for the "passiveSkills" field.</summary>
  public const int PassiveSkillsFieldNumber = 7;
  private static readonly pbc::MapField<int, global::PetSkillPb>.Codec _map_passiveSkills_codec
      = new pbc::MapField<int, global::PetSkillPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PetSkillPb.Parser), 58);
  private readonly pbc::MapField<int, global::PetSkillPb> passiveSkills_ = new pbc::MapField<int, global::PetSkillPb>();
  /// <summary>
  /// 被动技能map，key=0,1,2..
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::PetSkillPb> PassiveSkills {
    get { return passiveSkills_; }
  }

  /// <summary>Field number for the "isLock" field.</summary>
  public const int IsLockFieldNumber = 8;
  private int isLock_;
  /// <summary>
  /// 1锁。0未锁
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsLock {
    get { return isLock_; }
    set {
      isLock_ = value;
    }
  }

  /// <summary>Field number for the "cheers" field.</summary>
  public const int CheersFieldNumber = 9;
  private static readonly pbc::MapField<int, int>.Codec _map_cheers_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 74);
  private readonly pbc::MapField<int, int> cheers_ = new pbc::MapField<int, int>();
  /// <summary>
  /// 助战：key 1、2、3
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Cheers {
    get { return cheers_; }
  }

  /// <summary>Field number for the "booleLevel" field.</summary>
  public const int BooleLevelFieldNumber = 10;
  private int booleLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BooleLevel {
    get { return booleLevel_; }
    set {
      booleLevel_ = value;
    }
  }

  /// <summary>Field number for the "bloodPassiveSkillNum" field.</summary>
  public const int BloodPassiveSkillNumFieldNumber = 11;
  private int bloodPassiveSkillNum_;
  /// <summary>
  /// 血脉增加的被动属性数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BloodPassiveSkillNum {
    get { return bloodPassiveSkillNum_; }
    set {
      bloodPassiveSkillNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (ConfigId != other.ConfigId) return false;
    if (Level != other.Level) return false;
    if (Grade != other.Grade) return false;
    if (Star != other.Star) return false;
    if (!object.Equals(Skill, other.Skill)) return false;
    if (!PassiveSkills.Equals(other.PassiveSkills)) return false;
    if (IsLock != other.IsLock) return false;
    if (!Cheers.Equals(other.Cheers)) return false;
    if (BooleLevel != other.BooleLevel) return false;
    if (BloodPassiveSkillNum != other.BloodPassiveSkillNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Grade != 0) hash ^= Grade.GetHashCode();
    if (Star != 0) hash ^= Star.GetHashCode();
    if (skill_ != null) hash ^= Skill.GetHashCode();
    hash ^= PassiveSkills.GetHashCode();
    if (IsLock != 0) hash ^= IsLock.GetHashCode();
    hash ^= Cheers.GetHashCode();
    if (BooleLevel != 0) hash ^= BooleLevel.GetHashCode();
    if (BloodPassiveSkillNum != 0) hash ^= BloodPassiveSkillNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (ConfigId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ConfigId);
    }
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (Grade != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Grade);
    }
    if (Star != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Star);
    }
    if (skill_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Skill);
    }
    passiveSkills_.WriteTo(output, _map_passiveSkills_codec);
    if (IsLock != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(IsLock);
    }
    cheers_.WriteTo(output, _map_cheers_codec);
    if (BooleLevel != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(BooleLevel);
    }
    if (BloodPassiveSkillNum != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(BloodPassiveSkillNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Grade != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
    }
    if (Star != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
    }
    if (skill_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Skill);
    }
    size += passiveSkills_.CalculateSize(_map_passiveSkills_codec);
    if (IsLock != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsLock);
    }
    size += cheers_.CalculateSize(_map_cheers_codec);
    if (BooleLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BooleLevel);
    }
    if (BloodPassiveSkillNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BloodPassiveSkillNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Grade != 0) {
      Grade = other.Grade;
    }
    if (other.Star != 0) {
      Star = other.Star;
    }
    if (other.skill_ != null) {
      if (skill_ == null) {
        skill_ = new global::PetSkillPb();
      }
      Skill.MergeFrom(other.Skill);
    }
    passiveSkills_.Add(other.passiveSkills_);
    if (other.IsLock != 0) {
      IsLock = other.IsLock;
    }
    cheers_.Add(other.cheers_);
    if (other.BooleLevel != 0) {
      BooleLevel = other.BooleLevel;
    }
    if (other.BloodPassiveSkillNum != 0) {
      BloodPassiveSkillNum = other.BloodPassiveSkillNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
        case 32: {
          Grade = input.ReadInt32();
          break;
        }
        case 40: {
          Star = input.ReadInt32();
          break;
        }
        case 50: {
          if (skill_ == null) {
            skill_ = new global::PetSkillPb();
          }
          input.ReadMessage(skill_);
          break;
        }
        case 58: {
          passiveSkills_.AddEntriesFrom(input, _map_passiveSkills_codec);
          break;
        }
        case 64: {
          IsLock = input.ReadInt32();
          break;
        }
        case 74: {
          cheers_.AddEntriesFrom(input, _map_cheers_codec);
          break;
        }
        case 80: {
          BooleLevel = input.ReadInt32();
          break;
        }
        case 88: {
          BloodPassiveSkillNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 宠物技能
/// </summary>
public sealed partial class PetSkillPb : pb::IMessage<PetSkillPb> {
  private static readonly pb::MessageParser<PetSkillPb> _parser = new pb::MessageParser<PetSkillPb>(() => new PetSkillPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PetSkillPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[79]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetSkillPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetSkillPb(PetSkillPb other) : this() {
    skillId_ = other.skillId_;
    level_ = other.level_;
    key_ = other.key_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PetSkillPb Clone() {
    return new PetSkillPb(this);
  }

  /// <summary>Field number for the "skillId" field.</summary>
  public const int SkillIdFieldNumber = 1;
  private int skillId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SkillId {
    get { return skillId_; }
    set {
      skillId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "key" field.</summary>
  public const int KeyFieldNumber = 3;
  private int key_;
  /// <summary>
  ///PetPb passiveSkills map 的key
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Key {
    get { return key_; }
    set {
      key_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PetSkillPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PetSkillPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SkillId != other.SkillId) return false;
    if (Level != other.Level) return false;
    if (Key != other.Key) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SkillId != 0) hash ^= SkillId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Key != 0) hash ^= Key.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SkillId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SkillId);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (Key != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Key);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SkillId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Key != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PetSkillPb other) {
    if (other == null) {
      return;
    }
    if (other.SkillId != 0) {
      SkillId = other.SkillId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Key != 0) {
      Key = other.Key;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SkillId = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 24: {
          Key = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SysUnlockPb : pb::IMessage<SysUnlockPb> {
  private static readonly pb::MessageParser<SysUnlockPb> _parser = new pb::MessageParser<SysUnlockPb>(() => new SysUnlockPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SysUnlockPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[80]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SysUnlockPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SysUnlockPb(SysUnlockPb other) : this() {
    unlocks_ = other.unlocks_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SysUnlockPb Clone() {
    return new SysUnlockPb(this);
  }

  /// <summary>Field number for the "unlocks" field.</summary>
  public const int UnlocksFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_unlocks_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> unlocks_ = new pbc::MapField<int, int>();
  /// <summary>
  /// 已经解锁的系统 key: configId, value:1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Unlocks {
    get { return unlocks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SysUnlockPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SysUnlockPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Unlocks.Equals(other.Unlocks)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Unlocks.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    unlocks_.WriteTo(output, _map_unlocks_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += unlocks_.CalculateSize(_map_unlocks_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SysUnlockPb other) {
    if (other == null) {
      return;
    }
    unlocks_.Add(other.unlocks_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          unlocks_.AddEntriesFrom(input, _map_unlocks_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 密友
/// </summary>
public sealed partial class PlayerFriendPb : pb::IMessage<PlayerFriendPb> {
  private static readonly pb::MessageParser<PlayerFriendPb> _parser = new pb::MessageParser<PlayerFriendPb>(() => new PlayerFriendPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerFriendPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[81]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerFriendPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerFriendPb(PlayerFriendPb other) : this() {
    friends_ = other.friends_.Clone();
    power_ = other.power_;
    lastCalTime_ = other.lastCalTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerFriendPb Clone() {
    return new PlayerFriendPb(this);
  }

  /// <summary>Field number for the "friends" field.</summary>
  public const int FriendsFieldNumber = 1;
  private static readonly pbc::MapField<int, global::FriendPb>.Codec _map_friends_codec
      = new pbc::MapField<int, global::FriendPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::FriendPb.Parser), 10);
  private readonly pbc::MapField<int, global::FriendPb> friends_ = new pbc::MapField<int, global::FriendPb>();
  /// <summary>
  /// key:configId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::FriendPb> Friends {
    get { return friends_; }
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 2;
  private int power_;
  /// <summary>
  /// 体力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Power {
    get { return power_; }
    set {
      power_ = value;
    }
  }

  /// <summary>Field number for the "lastCalTime" field.</summary>
  public const int LastCalTimeFieldNumber = 3;
  private long lastCalTime_;
  /// <summary>
  /// 上次计算体力时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastCalTime {
    get { return lastCalTime_; }
    set {
      lastCalTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerFriendPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerFriendPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Friends.Equals(other.Friends)) return false;
    if (Power != other.Power) return false;
    if (LastCalTime != other.LastCalTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Friends.GetHashCode();
    if (Power != 0) hash ^= Power.GetHashCode();
    if (LastCalTime != 0L) hash ^= LastCalTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    friends_.WriteTo(output, _map_friends_codec);
    if (Power != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Power);
    }
    if (LastCalTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(LastCalTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += friends_.CalculateSize(_map_friends_codec);
    if (Power != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
    }
    if (LastCalTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastCalTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerFriendPb other) {
    if (other == null) {
      return;
    }
    friends_.Add(other.friends_);
    if (other.Power != 0) {
      Power = other.Power;
    }
    if (other.LastCalTime != 0L) {
      LastCalTime = other.LastCalTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          friends_.AddEntriesFrom(input, _map_friends_codec);
          break;
        }
        case 16: {
          Power = input.ReadInt32();
          break;
        }
        case 24: {
          LastCalTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class FriendPb : pb::IMessage<FriendPb> {
  private static readonly pb::MessageParser<FriendPb> _parser = new pb::MessageParser<FriendPb>(() => new FriendPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FriendPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[82]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FriendPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FriendPb(FriendPb other) : this() {
    configId_ = other.configId_;
    level_ = other.level_;
    isUnlock_ = other.isUnlock_;
    passBoses_ = other.passBoses_.Clone();
    exp_ = other.exp_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FriendPb Clone() {
    return new FriendPb(this);
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 1;
  private int configId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "isUnlock" field.</summary>
  public const int IsUnlockFieldNumber = 3;
  private int isUnlock_;
  /// <summary>
  ///0：未解锁，1可解锁，2解锁
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsUnlock {
    get { return isUnlock_; }
    set {
      isUnlock_ = value;
    }
  }

  /// <summary>Field number for the "passBoses" field.</summary>
  public const int PassBosesFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_passBoses_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> passBoses_ = new pbc::MapField<int, int>();
  /// <summary>
  /// key : bossId, value = 1;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> PassBoses {
    get { return passBoses_; }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 5;
  private int exp_;
  /// <summary>
  /// 好感度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FriendPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FriendPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigId != other.ConfigId) return false;
    if (Level != other.Level) return false;
    if (IsUnlock != other.IsUnlock) return false;
    if (!PassBoses.Equals(other.PassBoses)) return false;
    if (Exp != other.Exp) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (IsUnlock != 0) hash ^= IsUnlock.GetHashCode();
    hash ^= PassBoses.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConfigId);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (IsUnlock != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(IsUnlock);
    }
    passBoses_.WriteTo(output, _map_passBoses_codec);
    if (Exp != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Exp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (IsUnlock != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsUnlock);
    }
    size += passBoses_.CalculateSize(_map_passBoses_codec);
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FriendPb other) {
    if (other == null) {
      return;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.IsUnlock != 0) {
      IsUnlock = other.IsUnlock;
    }
    passBoses_.Add(other.passBoses_);
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 24: {
          IsUnlock = input.ReadInt32();
          break;
        }
        case 34: {
          passBoses_.AddEntriesFrom(input, _map_passBoses_codec);
          break;
        }
        case 40: {
          Exp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerStageTaskInfo : pb::IMessage<PlayerStageTaskInfo> {
  private static readonly pb::MessageParser<PlayerStageTaskInfo> _parser = new pb::MessageParser<PlayerStageTaskInfo>(() => new PlayerStageTaskInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerStageTaskInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[83]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerStageTaskInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerStageTaskInfo(PlayerStageTaskInfo other) : this() {
    taskStatuss_ = other.taskStatuss_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerStageTaskInfo Clone() {
    return new PlayerStageTaskInfo(this);
  }

  /// <summary>Field number for the "taskStatuss" field.</summary>
  public const int TaskStatussFieldNumber = 1;
  private static readonly pbc::MapField<int, global::MainTaskPb>.Codec _map_taskStatuss_codec
      = new pbc::MapField<int, global::MainTaskPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::MainTaskPb.Parser), 10);
  private readonly pbc::MapField<int, global::MainTaskPb> taskStatuss_ = new pbc::MapField<int, global::MainTaskPb>();
  /// <summary>
  /// key taskId, v: MainTaskPb //0-未完成 1-已完成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::MainTaskPb> TaskStatuss {
    get { return taskStatuss_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerStageTaskInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerStageTaskInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!TaskStatuss.Equals(other.TaskStatuss)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= TaskStatuss.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    taskStatuss_.WriteTo(output, _map_taskStatuss_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += taskStatuss_.CalculateSize(_map_taskStatuss_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerStageTaskInfo other) {
    if (other == null) {
      return;
    }
    taskStatuss_.Add(other.taskStatuss_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          taskStatuss_.AddEntriesFrom(input, _map_taskStatuss_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///服务器结构
/// </summary>
public sealed partial class ServerPb : pb::IMessage<ServerPb> {
  private static readonly pb::MessageParser<ServerPb> _parser = new pb::MessageParser<ServerPb>(() => new ServerPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[84]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerPb(ServerPb other) : this() {
    id_ = other.id_;
    isNew_ = other.isNew_;
    url_ = other.url_;
    startTime_ = other.startTime_;
    status_ = other.status_;
    importWeight_ = other.importWeight_;
    crossId_ = other.crossId_.Clone();
    isHot_ = other.isHot_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerPb Clone() {
    return new ServerPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///服务器Id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "isNew" field.</summary>
  public const int IsNewFieldNumber = 2;
  private int isNew_;
  /// <summary>
  ///是否新服
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsNew {
    get { return isNew_; }
    set {
      isNew_ = value;
    }
  }

  /// <summary>Field number for the "url" field.</summary>
  public const int UrlFieldNumber = 3;
  private string url_ = "";
  /// <summary>
  ///游服地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Url {
    get { return url_; }
    set {
      url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 4;
  private long startTime_;
  /// <summary>
  ///开服时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 5;
  private int status_;
  /// <summary>
  ///服务器状态  101:流畅  102:维护中  201：预备服 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "importWeight" field.</summary>
  public const int ImportWeightFieldNumber = 6;
  private int importWeight_;
  /// <summary>
  ///导流权重
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ImportWeight {
    get { return importWeight_; }
    set {
      importWeight_ = value;
    }
  }

  /// <summary>Field number for the "crossId" field.</summary>
  public const int CrossIdFieldNumber = 7;
  private static readonly pb::FieldCodec<int> _repeated_crossId_codec
      = pb::FieldCodec.ForInt32(58);
  private readonly pbc::RepeatedField<int> crossId_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///跨服Id   
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CrossId {
    get { return crossId_; }
  }

  /// <summary>Field number for the "isHot" field.</summary>
  public const int IsHotFieldNumber = 8;
  private int isHot_;
  /// <summary>
  ///是否爆满
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsHot {
    get { return isHot_; }
    set {
      isHot_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (IsNew != other.IsNew) return false;
    if (Url != other.Url) return false;
    if (StartTime != other.StartTime) return false;
    if (Status != other.Status) return false;
    if (ImportWeight != other.ImportWeight) return false;
    if(!crossId_.Equals(other.crossId_)) return false;
    if (IsHot != other.IsHot) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (IsNew != 0) hash ^= IsNew.GetHashCode();
    if (Url.Length != 0) hash ^= Url.GetHashCode();
    if (StartTime != 0L) hash ^= StartTime.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (ImportWeight != 0) hash ^= ImportWeight.GetHashCode();
    hash ^= crossId_.GetHashCode();
    if (IsHot != 0) hash ^= IsHot.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (IsNew != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(IsNew);
    }
    if (Url.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Url);
    }
    if (StartTime != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(StartTime);
    }
    if (Status != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Status);
    }
    if (ImportWeight != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(ImportWeight);
    }
    crossId_.WriteTo(output, _repeated_crossId_codec);
    if (IsHot != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(IsHot);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (IsNew != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsNew);
    }
    if (Url.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
    }
    if (StartTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (ImportWeight != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImportWeight);
    }
    size += crossId_.CalculateSize(_repeated_crossId_codec);
    if (IsHot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsHot);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.IsNew != 0) {
      IsNew = other.IsNew;
    }
    if (other.Url.Length != 0) {
      Url = other.Url;
    }
    if (other.StartTime != 0L) {
      StartTime = other.StartTime;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.ImportWeight != 0) {
      ImportWeight = other.ImportWeight;
    }
    crossId_.Add(other.crossId_);
    if (other.IsHot != 0) {
      IsHot = other.IsHot;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          IsNew = input.ReadInt32();
          break;
        }
        case 26: {
          Url = input.ReadString();
          break;
        }
        case 32: {
          StartTime = input.ReadInt64();
          break;
        }
        case 40: {
          Status = input.ReadInt32();
          break;
        }
        case 48: {
          ImportWeight = input.ReadInt32();
          break;
        }
        case 58:
        case 56: {
          crossId_.AddEntriesFrom(input, _repeated_crossId_codec);
          break;
        }
        case 64: {
          IsHot = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ServersPb : pb::IMessage<ServersPb> {
  private static readonly pb::MessageParser<ServersPb> _parser = new pb::MessageParser<ServersPb>(() => new ServersPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServersPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[85]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServersPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServersPb(ServersPb other) : this() {
    serverList_ = other.serverList_.Clone();
    myList_ = other.myList_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServersPb Clone() {
    return new ServersPb(this);
  }

  /// <summary>Field number for the "serverList" field.</summary>
  public const int ServerListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ServerPb> _repeated_serverList_codec
      = pb::FieldCodec.ForMessage(10, global::ServerPb.Parser);
  private readonly pbc::RepeatedField<global::ServerPb> serverList_ = new pbc::RepeatedField<global::ServerPb>();
  /// <summary>
  ///服务器列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ServerPb> ServerList {
    get { return serverList_; }
  }

  /// <summary>Field number for the "myList" field.</summary>
  public const int MyListFieldNumber = 2;
  private static readonly pb::FieldCodec<global::ServerPb> _repeated_myList_codec
      = pb::FieldCodec.ForMessage(18, global::ServerPb.Parser);
  private readonly pbc::RepeatedField<global::ServerPb> myList_ = new pbc::RepeatedField<global::ServerPb>();
  /// <summary>
  ///我的服务器列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ServerPb> MyList {
    get { return myList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServersPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServersPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!serverList_.Equals(other.serverList_)) return false;
    if(!myList_.Equals(other.myList_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= serverList_.GetHashCode();
    hash ^= myList_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    serverList_.WriteTo(output, _repeated_serverList_codec);
    myList_.WriteTo(output, _repeated_myList_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += serverList_.CalculateSize(_repeated_serverList_codec);
    size += myList_.CalculateSize(_repeated_myList_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServersPb other) {
    if (other == null) {
      return;
    }
    serverList_.Add(other.serverList_);
    myList_.Add(other.myList_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          serverList_.AddEntriesFrom(input, _repeated_serverList_codec);
          break;
        }
        case 18: {
          myList_.AddEntriesFrom(input, _repeated_myList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerOverInfoPb : pb::IMessage<PlayerOverInfoPb> {
  private static readonly pb::MessageParser<PlayerOverInfoPb> _parser = new pb::MessageParser<PlayerOverInfoPb>(() => new PlayerOverInfoPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerOverInfoPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[86]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerOverInfoPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerOverInfoPb(PlayerOverInfoPb other) : this() {
    pid_ = other.pid_;
    name_ = other.name_;
    avatar_ = other.avatar_;
    stage_ = other.stage_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerOverInfoPb Clone() {
    return new PlayerOverInfoPb(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  /// <summary>
  ///用户ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  ///用户名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar" field.</summary>
  public const int AvatarFieldNumber = 3;
  private string avatar_ = "";
  /// <summary>
  ///用户头像
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Avatar {
    get { return avatar_; }
    set {
      avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "stage" field.</summary>
  public const int StageFieldNumber = 4;
  private int stage_;
  /// <summary>
  ///用户境界
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stage {
    get { return stage_; }
    set {
      stage_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerOverInfoPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerOverInfoPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Name != other.Name) return false;
    if (Avatar != other.Avatar) return false;
    if (Stage != other.Stage) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
    if (Stage != 0) hash ^= Stage.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Avatar);
    }
    if (Stage != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Stage);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Avatar.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
    }
    if (Stage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerOverInfoPb other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Avatar.Length != 0) {
      Avatar = other.Avatar;
    }
    if (other.Stage != 0) {
      Stage = other.Stage;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Avatar = input.ReadString();
          break;
        }
        case 32: {
          Stage = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ChatPb : pb::IMessage<ChatPb> {
  private static readonly pb::MessageParser<ChatPb> _parser = new pb::MessageParser<ChatPb>(() => new ChatPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChatPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[87]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChatPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChatPb(ChatPb other) : this() {
    id_ = other.id_;
    channel_ = other.channel_;
    msg_ = other.msg_;
    dateline_ = other.dateline_;
    PlayerOverInfo = other.playerOverInfo_ != null ? other.PlayerOverInfo.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChatPb Clone() {
    return new ChatPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///消息ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 2;
  private int channel_;
  /// <summary>
  ///消息频道
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Channel {
    get { return channel_; }
    set {
      channel_ = value;
    }
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 3;
  private string msg_ = "";
  /// <summary>
  ///消息内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Msg {
    get { return msg_; }
    set {
      msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "dateline" field.</summary>
  public const int DatelineFieldNumber = 4;
  private long dateline_;
  /// <summary>
  ///发送时间 毫秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Dateline {
    get { return dateline_; }
    set {
      dateline_ = value;
    }
  }

  /// <summary>Field number for the "playerOverInfo" field.</summary>
  public const int PlayerOverInfoFieldNumber = 5;
  private global::PlayerOverInfoPb playerOverInfo_;
  /// <summary>
  ///用户外显信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerOverInfoPb PlayerOverInfo {
    get { return playerOverInfo_; }
    set {
      playerOverInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChatPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChatPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Channel != other.Channel) return false;
    if (Msg != other.Msg) return false;
    if (Dateline != other.Dateline) return false;
    if (!object.Equals(PlayerOverInfo, other.PlayerOverInfo)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Channel != 0) hash ^= Channel.GetHashCode();
    if (Msg.Length != 0) hash ^= Msg.GetHashCode();
    if (Dateline != 0L) hash ^= Dateline.GetHashCode();
    if (playerOverInfo_ != null) hash ^= PlayerOverInfo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Channel != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Channel);
    }
    if (Msg.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Msg);
    }
    if (Dateline != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(Dateline);
    }
    if (playerOverInfo_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(PlayerOverInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Channel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
    }
    if (Msg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
    }
    if (Dateline != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Dateline);
    }
    if (playerOverInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerOverInfo);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChatPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Channel != 0) {
      Channel = other.Channel;
    }
    if (other.Msg.Length != 0) {
      Msg = other.Msg;
    }
    if (other.Dateline != 0L) {
      Dateline = other.Dateline;
    }
    if (other.playerOverInfo_ != null) {
      if (playerOverInfo_ == null) {
        playerOverInfo_ = new global::PlayerOverInfoPb();
      }
      PlayerOverInfo.MergeFrom(other.PlayerOverInfo);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          Channel = input.ReadInt32();
          break;
        }
        case 26: {
          Msg = input.ReadString();
          break;
        }
        case 32: {
          Dateline = input.ReadInt64();
          break;
        }
        case 42: {
          if (playerOverInfo_ == null) {
            playerOverInfo_ = new global::PlayerOverInfoPb();
          }
          input.ReadMessage(playerOverInfo_);
          break;
        }
      }
    }
  }

}

public sealed partial class ChatPbs : pb::IMessage<ChatPbs> {
  private static readonly pb::MessageParser<ChatPbs> _parser = new pb::MessageParser<ChatPbs>(() => new ChatPbs());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChatPbs> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[88]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChatPbs() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChatPbs(ChatPbs other) : this() {
    chatPbList_ = other.chatPbList_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChatPbs Clone() {
    return new ChatPbs(this);
  }

  /// <summary>Field number for the "chatPbList" field.</summary>
  public const int ChatPbListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ChatPb> _repeated_chatPbList_codec
      = pb::FieldCodec.ForMessage(10, global::ChatPb.Parser);
  private readonly pbc::RepeatedField<global::ChatPb> chatPbList_ = new pbc::RepeatedField<global::ChatPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ChatPb> ChatPbList {
    get { return chatPbList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChatPbs);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChatPbs other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!chatPbList_.Equals(other.chatPbList_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= chatPbList_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    chatPbList_.WriteTo(output, _repeated_chatPbList_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += chatPbList_.CalculateSize(_repeated_chatPbList_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChatPbs other) {
    if (other == null) {
      return;
    }
    chatPbList_.Add(other.chatPbList_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          chatPbList_.AddEntriesFrom(input, _repeated_chatPbList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ChatRecordPb : pb::IMessage<ChatRecordPb> {
  private static readonly pb::MessageParser<ChatRecordPb> _parser = new pb::MessageParser<ChatRecordPb>(() => new ChatRecordPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChatRecordPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[89]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChatRecordPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChatRecordPb(ChatRecordPb other) : this() {
    recordList_ = other.recordList_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChatRecordPb Clone() {
    return new ChatRecordPb(this);
  }

  /// <summary>Field number for the "recordList" field.</summary>
  public const int RecordListFieldNumber = 1;
  private static readonly pbc::MapField<int, global::ChatPbs>.Codec _map_recordList_codec
      = new pbc::MapField<int, global::ChatPbs>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::ChatPbs.Parser), 10);
  private readonly pbc::MapField<int, global::ChatPbs> recordList_ = new pbc::MapField<int, global::ChatPbs>();
  /// <summary>
  ///消息列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::ChatPbs> RecordList {
    get { return recordList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChatRecordPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChatRecordPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!RecordList.Equals(other.RecordList)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= RecordList.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    recordList_.WriteTo(output, _map_recordList_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += recordList_.CalculateSize(_map_recordList_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChatRecordPb other) {
    if (other == null) {
      return;
    }
    recordList_.Add(other.recordList_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          recordList_.AddEntriesFrom(input, _map_recordList_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 挑战boss
/// </summary>
public sealed partial class ChallengeInfoPb : pb::IMessage<ChallengeInfoPb> {
  private static readonly pb::MessageParser<ChallengeInfoPb> _parser = new pb::MessageParser<ChallengeInfoPb>(() => new ChallengeInfoPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChallengeInfoPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[90]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeInfoPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeInfoPb(ChallengeInfoPb other) : this() {
    fieldBossId_ = other.fieldBossId_;
    seed_ = other.seed_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChallengeInfoPb Clone() {
    return new ChallengeInfoPb(this);
  }

  /// <summary>Field number for the "fieldBossId" field.</summary>
  public const int FieldBossIdFieldNumber = 1;
  private int fieldBossId_;
  /// <summary>
  /// 野外boss
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FieldBossId {
    get { return fieldBossId_; }
    set {
      fieldBossId_ = value;
    }
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 2;
  private int seed_;
  /// <summary>
  /// seed
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChallengeInfoPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChallengeInfoPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FieldBossId != other.FieldBossId) return false;
    if (Seed != other.Seed) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FieldBossId != 0) hash ^= FieldBossId.GetHashCode();
    if (Seed != 0) hash ^= Seed.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FieldBossId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(FieldBossId);
    }
    if (Seed != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Seed);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FieldBossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FieldBossId);
    }
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChallengeInfoPb other) {
    if (other == null) {
      return;
    }
    if (other.FieldBossId != 0) {
      FieldBossId = other.FieldBossId;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          FieldBossId = input.ReadInt32();
          break;
        }
        case 16: {
          Seed = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlatformUserPb : pb::IMessage<PlatformUserPb> {
  private static readonly pb::MessageParser<PlatformUserPb> _parser = new pb::MessageParser<PlatformUserPb>(() => new PlatformUserPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlatformUserPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[91]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlatformUserPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlatformUserPb(PlatformUserPb other) : this() {
    userId_ = other.userId_;
    country_ = other.country_;
    lang_ = other.lang_;
    currency_ = other.currency_;
    isCreateRole_ = other.isCreateRole_;
    servers_ = other.servers_.Clone();
    lastLoginServer_ = other.lastLoginServer_;
    loginNum_ = other.loginNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlatformUserPb Clone() {
    return new PlatformUserPb(this);
  }

  /// <summary>Field number for the "userId" field.</summary>
  public const int UserIdFieldNumber = 1;
  private string userId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserId {
    get { return userId_; }
    set {
      userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "country" field.</summary>
  public const int CountryFieldNumber = 3;
  private string country_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Country {
    get { return country_; }
    set {
      country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "lang" field.</summary>
  public const int LangFieldNumber = 4;
  private string lang_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Lang {
    get { return lang_; }
    set {
      lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "currency" field.</summary>
  public const int CurrencyFieldNumber = 5;
  private string currency_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Currency {
    get { return currency_; }
    set {
      currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isCreateRole" field.</summary>
  public const int IsCreateRoleFieldNumber = 6;
  private int isCreateRole_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsCreateRole {
    get { return isCreateRole_; }
    set {
      isCreateRole_ = value;
    }
  }

  /// <summary>Field number for the "servers" field.</summary>
  public const int ServersFieldNumber = 7;
  private static readonly pb::FieldCodec<int> _repeated_servers_codec
      = pb::FieldCodec.ForInt32(58);
  private readonly pbc::RepeatedField<int> servers_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Servers {
    get { return servers_; }
  }

  /// <summary>Field number for the "lastLoginServer" field.</summary>
  public const int LastLoginServerFieldNumber = 8;
  private int lastLoginServer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastLoginServer {
    get { return lastLoginServer_; }
    set {
      lastLoginServer_ = value;
    }
  }

  /// <summary>Field number for the "loginNum" field.</summary>
  public const int LoginNumFieldNumber = 9;
  private int loginNum_;
  /// <summary>
  ///是否新注册用户
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LoginNum {
    get { return loginNum_; }
    set {
      loginNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlatformUserPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlatformUserPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Country != other.Country) return false;
    if (Lang != other.Lang) return false;
    if (Currency != other.Currency) return false;
    if (IsCreateRole != other.IsCreateRole) return false;
    if(!servers_.Equals(other.servers_)) return false;
    if (LastLoginServer != other.LastLoginServer) return false;
    if (LoginNum != other.LoginNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId.Length != 0) hash ^= UserId.GetHashCode();
    if (Country.Length != 0) hash ^= Country.GetHashCode();
    if (Lang.Length != 0) hash ^= Lang.GetHashCode();
    if (Currency.Length != 0) hash ^= Currency.GetHashCode();
    if (IsCreateRole != 0) hash ^= IsCreateRole.GetHashCode();
    hash ^= servers_.GetHashCode();
    if (LastLoginServer != 0) hash ^= LastLoginServer.GetHashCode();
    if (LoginNum != 0) hash ^= LoginNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(UserId);
    }
    if (Country.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Country);
    }
    if (Lang.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Lang);
    }
    if (Currency.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Currency);
    }
    if (IsCreateRole != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(IsCreateRole);
    }
    servers_.WriteTo(output, _repeated_servers_codec);
    if (LastLoginServer != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(LastLoginServer);
    }
    if (LoginNum != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(LoginNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
    }
    if (Country.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
    }
    if (Lang.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
    }
    if (Currency.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
    }
    if (IsCreateRole != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsCreateRole);
    }
    size += servers_.CalculateSize(_repeated_servers_codec);
    if (LastLoginServer != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastLoginServer);
    }
    if (LoginNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlatformUserPb other) {
    if (other == null) {
      return;
    }
    if (other.UserId.Length != 0) {
      UserId = other.UserId;
    }
    if (other.Country.Length != 0) {
      Country = other.Country;
    }
    if (other.Lang.Length != 0) {
      Lang = other.Lang;
    }
    if (other.Currency.Length != 0) {
      Currency = other.Currency;
    }
    if (other.IsCreateRole != 0) {
      IsCreateRole = other.IsCreateRole;
    }
    servers_.Add(other.servers_);
    if (other.LastLoginServer != 0) {
      LastLoginServer = other.LastLoginServer;
    }
    if (other.LoginNum != 0) {
      LoginNum = other.LoginNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          UserId = input.ReadString();
          break;
        }
        case 26: {
          Country = input.ReadString();
          break;
        }
        case 34: {
          Lang = input.ReadString();
          break;
        }
        case 42: {
          Currency = input.ReadString();
          break;
        }
        case 48: {
          IsCreateRole = input.ReadInt32();
          break;
        }
        case 58:
        case 56: {
          servers_.AddEntriesFrom(input, _repeated_servers_codec);
          break;
        }
        case 64: {
          LastLoginServer = input.ReadInt32();
          break;
        }
        case 72: {
          LoginNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerMiniInfoPb : pb::IMessage<PlayerMiniInfoPb> {
  private static readonly pb::MessageParser<PlayerMiniInfoPb> _parser = new pb::MessageParser<PlayerMiniInfoPb>(() => new PlayerMiniInfoPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerMiniInfoPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[92]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerMiniInfoPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerMiniInfoPb(PlayerMiniInfoPb other) : this() {
    pid_ = other.pid_;
    level_ = other.level_;
    head_ = other.head_;
    name_ = other.name_;
    attr_ = other.attr_.Clone();
    curMount_ = other.curMount_;
    battlePet_ = other.battlePet_;
    partners_ = other.partners_.Clone();
    equips_ = other.equips_.Clone();
    objs_ = other.objs_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerMiniInfoPb Clone() {
    return new PlayerMiniInfoPb(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "head" field.</summary>
  public const int HeadFieldNumber = 3;
  private string head_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Head {
    get { return head_; }
    set {
      head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 4;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 5;
  private static readonly pbc::MapField<int, long>.Codec _map_attr_codec
      = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt64(16), 42);
  private readonly pbc::MapField<int, long> attr_ = new pbc::MapField<int, long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, long> Attr {
    get { return attr_; }
  }

  /// <summary>Field number for the "curMount" field.</summary>
  public const int CurMountFieldNumber = 6;
  private int curMount_;
  /// <summary>
  ///当前坐骑
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurMount {
    get { return curMount_; }
    set {
      curMount_ = value;
    }
  }

  /// <summary>Field number for the "battlePet" field.</summary>
  public const int BattlePetFieldNumber = 7;
  private int battlePet_;
  /// <summary>
  ///出站宠物 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BattlePet {
    get { return battlePet_; }
    set {
      battlePet_ = value;
    }
  }

  /// <summary>Field number for the "partners" field.</summary>
  public const int PartnersFieldNumber = 8;
  private static readonly pb::FieldCodec<global::PartnerPvpPb> _repeated_partners_codec
      = pb::FieldCodec.ForMessage(66, global::PartnerPvpPb.Parser);
  private readonly pbc::RepeatedField<global::PartnerPvpPb> partners_ = new pbc::RepeatedField<global::PartnerPvpPb>();
  /// <summary>
  /// 伙伴
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PartnerPvpPb> Partners {
    get { return partners_; }
  }

  /// <summary>Field number for the "equips" field.</summary>
  public const int EquipsFieldNumber = 9;
  private static readonly pb::FieldCodec<global::EquipV2Pb> _repeated_equips_codec
      = pb::FieldCodec.ForMessage(74, global::EquipV2Pb.Parser);
  private readonly pbc::RepeatedField<global::EquipV2Pb> equips_ = new pbc::RepeatedField<global::EquipV2Pb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EquipV2Pb> Equips {
    get { return equips_; }
  }

  /// <summary>Field number for the "objs" field.</summary>
  public const int ObjsFieldNumber = 10;
  private static readonly pb::FieldCodec<global::CommonObjInfoPb> _repeated_objs_codec
      = pb::FieldCodec.ForMessage(82, global::CommonObjInfoPb.Parser);
  private readonly pbc::RepeatedField<global::CommonObjInfoPb> objs_ = new pbc::RepeatedField<global::CommonObjInfoPb>();
  /// <summary>
  /// 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CommonObjInfoPb> Objs {
    get { return objs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerMiniInfoPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerMiniInfoPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Level != other.Level) return false;
    if (Head != other.Head) return false;
    if (Name != other.Name) return false;
    if (!Attr.Equals(other.Attr)) return false;
    if (CurMount != other.CurMount) return false;
    if (BattlePet != other.BattlePet) return false;
    if(!partners_.Equals(other.partners_)) return false;
    if(!equips_.Equals(other.equips_)) return false;
    if(!objs_.Equals(other.objs_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Head.Length != 0) hash ^= Head.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= Attr.GetHashCode();
    if (CurMount != 0) hash ^= CurMount.GetHashCode();
    if (BattlePet != 0) hash ^= BattlePet.GetHashCode();
    hash ^= partners_.GetHashCode();
    hash ^= equips_.GetHashCode();
    hash ^= objs_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (Head.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Head);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    attr_.WriteTo(output, _map_attr_codec);
    if (CurMount != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(CurMount);
    }
    if (BattlePet != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(BattlePet);
    }
    partners_.WriteTo(output, _repeated_partners_codec);
    equips_.WriteTo(output, _repeated_equips_codec);
    objs_.WriteTo(output, _repeated_objs_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Head.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += attr_.CalculateSize(_map_attr_codec);
    if (CurMount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurMount);
    }
    if (BattlePet != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattlePet);
    }
    size += partners_.CalculateSize(_repeated_partners_codec);
    size += equips_.CalculateSize(_repeated_equips_codec);
    size += objs_.CalculateSize(_repeated_objs_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerMiniInfoPb other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Head.Length != 0) {
      Head = other.Head;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    attr_.Add(other.attr_);
    if (other.CurMount != 0) {
      CurMount = other.CurMount;
    }
    if (other.BattlePet != 0) {
      BattlePet = other.BattlePet;
    }
    partners_.Add(other.partners_);
    equips_.Add(other.equips_);
    objs_.Add(other.objs_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 26: {
          Head = input.ReadString();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 42: {
          attr_.AddEntriesFrom(input, _map_attr_codec);
          break;
        }
        case 48: {
          CurMount = input.ReadInt32();
          break;
        }
        case 56: {
          BattlePet = input.ReadInt32();
          break;
        }
        case 66: {
          partners_.AddEntriesFrom(input, _repeated_partners_codec);
          break;
        }
        case 74: {
          equips_.AddEntriesFrom(input, _repeated_equips_codec);
          break;
        }
        case 82: {
          objs_.AddEntriesFrom(input, _repeated_objs_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CommonObjInfoPb : pb::IMessage<CommonObjInfoPb> {
  private static readonly pb::MessageParser<CommonObjInfoPb> _parser = new pb::MessageParser<CommonObjInfoPb>(() => new CommonObjInfoPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CommonObjInfoPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[93]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommonObjInfoPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommonObjInfoPb(CommonObjInfoPb other) : this() {
    type_ = other.type_;
    confId_ = other.confId_;
    level_ = other.level_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommonObjInfoPb Clone() {
    return new CommonObjInfoPb(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  /// 自定义类型. 1坐骑；2宠物
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "confId" field.</summary>
  public const int ConfIdFieldNumber = 2;
  private int confId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfId {
    get { return confId_; }
    set {
      confId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CommonObjInfoPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CommonObjInfoPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (ConfId != other.ConfId) return false;
    if (Level != other.Level) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (ConfId != 0) hash ^= ConfId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (ConfId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ConfId);
    }
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (ConfId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CommonObjInfoPb other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.ConfId != 0) {
      ConfId = other.ConfId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          ConfId = input.ReadInt32();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 后端存储对象
/// </summary>
public sealed partial class PvpPlayerInfoPb : pb::IMessage<PvpPlayerInfoPb> {
  private static readonly pb::MessageParser<PvpPlayerInfoPb> _parser = new pb::MessageParser<PvpPlayerInfoPb>(() => new PvpPlayerInfoPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpPlayerInfoPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[94]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpPlayerInfoPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpPlayerInfoPb(PvpPlayerInfoPb other) : this() {
    rankIdList_ = other.rankIdList_.Clone();
    integral_ = other.integral_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpPlayerInfoPb Clone() {
    return new PvpPlayerInfoPb(this);
  }

  /// <summary>Field number for the "rankIdList" field.</summary>
  public const int RankIdListFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_rankIdList_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> rankIdList_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 对手排名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> RankIdList {
    get { return rankIdList_; }
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 2;
  private int integral_;
  /// <summary>
  /// 积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpPlayerInfoPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpPlayerInfoPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!rankIdList_.Equals(other.rankIdList_)) return false;
    if (Integral != other.Integral) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= rankIdList_.GetHashCode();
    if (Integral != 0) hash ^= Integral.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    rankIdList_.WriteTo(output, _repeated_rankIdList_codec);
    if (Integral != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Integral);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += rankIdList_.CalculateSize(_repeated_rankIdList_codec);
    if (Integral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpPlayerInfoPb other) {
    if (other == null) {
      return;
    }
    rankIdList_.Add(other.rankIdList_);
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          rankIdList_.AddEntriesFrom(input, _repeated_rankIdList_codec);
          break;
        }
        case 16: {
          Integral = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///个人排行  pb
/// </summary>
public sealed partial class PlayerRankInfoPb : pb::IMessage<PlayerRankInfoPb> {
  private static readonly pb::MessageParser<PlayerRankInfoPb> _parser = new pb::MessageParser<PlayerRankInfoPb>(() => new PlayerRankInfoPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerRankInfoPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[95]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerRankInfoPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerRankInfoPb(PlayerRankInfoPb other) : this() {
    pId_ = other.pId_;
    level_ = other.level_;
    head_ = other.head_;
    name_ = other.name_;
    integral_ = other.integral_;
    pos_ = other.pos_;
    allyName_ = other.allyName_;
    sId_ = other.sId_;
    combat_ = other.combat_;
    rank_ = other.rank_;
    isRobot_ = other.isRobot_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerRankInfoPb Clone() {
    return new PlayerRankInfoPb(this);
  }

  /// <summary>Field number for the "pId" field.</summary>
  public const int PIdFieldNumber = 1;
  private int pId_;
  /// <summary>
  /// 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PId {
    get { return pId_; }
    set {
      pId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "head" field.</summary>
  public const int HeadFieldNumber = 3;
  private string head_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Head {
    get { return head_; }
    set {
      head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 4;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 5;
  private int integral_;
  /// <summary>
  /// 排行榜分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 6;
  private int pos_;
  /// <summary>
  ///成员职位 0-盟主 1-护法 2-成员 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "allyName" field.</summary>
  public const int AllyNameFieldNumber = 7;
  private string allyName_ = "";
  /// <summary>
  ///仙盟名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AllyName {
    get { return allyName_; }
    set {
      allyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sId" field.</summary>
  public const int SIdFieldNumber = 8;
  private int sId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SId {
    get { return sId_; }
    set {
      sId_ = value;
    }
  }

  /// <summary>Field number for the "combat" field.</summary>
  public const int CombatFieldNumber = 9;
  private long combat_;
  /// <summary>
  ///战力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Combat {
    get { return combat_; }
    set {
      combat_ = value;
    }
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 10;
  private int rank_;
  /// <summary>
  /// 排名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rank {
    get { return rank_; }
    set {
      rank_ = value;
    }
  }

  /// <summary>Field number for the "isRobot" field.</summary>
  public const int IsRobotFieldNumber = 11;
  private int isRobot_;
  /// <summary>
  /// 1机器人
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsRobot {
    get { return isRobot_; }
    set {
      isRobot_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerRankInfoPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerRankInfoPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PId != other.PId) return false;
    if (Level != other.Level) return false;
    if (Head != other.Head) return false;
    if (Name != other.Name) return false;
    if (Integral != other.Integral) return false;
    if (Pos != other.Pos) return false;
    if (AllyName != other.AllyName) return false;
    if (SId != other.SId) return false;
    if (Combat != other.Combat) return false;
    if (Rank != other.Rank) return false;
    if (IsRobot != other.IsRobot) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PId != 0) hash ^= PId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Head.Length != 0) hash ^= Head.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Integral != 0) hash ^= Integral.GetHashCode();
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (AllyName.Length != 0) hash ^= AllyName.GetHashCode();
    if (SId != 0) hash ^= SId.GetHashCode();
    if (Combat != 0L) hash ^= Combat.GetHashCode();
    if (Rank != 0) hash ^= Rank.GetHashCode();
    if (IsRobot != 0) hash ^= IsRobot.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PId);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (Head.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Head);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    if (Integral != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Integral);
    }
    if (Pos != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Pos);
    }
    if (AllyName.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(AllyName);
    }
    if (SId != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(SId);
    }
    if (Combat != 0L) {
      output.WriteRawTag(72);
      output.WriteInt64(Combat);
    }
    if (Rank != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Rank);
    }
    if (IsRobot != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(IsRobot);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Head.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Integral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (AllyName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AllyName);
    }
    if (SId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SId);
    }
    if (Combat != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Combat);
    }
    if (Rank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
    }
    if (IsRobot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsRobot);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerRankInfoPb other) {
    if (other == null) {
      return;
    }
    if (other.PId != 0) {
      PId = other.PId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Head.Length != 0) {
      Head = other.Head;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.AllyName.Length != 0) {
      AllyName = other.AllyName;
    }
    if (other.SId != 0) {
      SId = other.SId;
    }
    if (other.Combat != 0L) {
      Combat = other.Combat;
    }
    if (other.Rank != 0) {
      Rank = other.Rank;
    }
    if (other.IsRobot != 0) {
      IsRobot = other.IsRobot;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PId = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 26: {
          Head = input.ReadString();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 40: {
          Integral = input.ReadInt32();
          break;
        }
        case 48: {
          Pos = input.ReadInt32();
          break;
        }
        case 58: {
          AllyName = input.ReadString();
          break;
        }
        case 64: {
          SId = input.ReadInt32();
          break;
        }
        case 72: {
          Combat = input.ReadInt64();
          break;
        }
        case 80: {
          Rank = input.ReadInt32();
          break;
        }
        case 88: {
          IsRobot = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///个人信息
/// </summary>
public sealed partial class PlayerInformationPb : pb::IMessage<PlayerInformationPb> {
  private static readonly pb::MessageParser<PlayerInformationPb> _parser = new pb::MessageParser<PlayerInformationPb>(() => new PlayerInformationPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerInformationPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[96]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInformationPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInformationPb(PlayerInformationPb other) : this() {
    pId_ = other.pId_;
    name_ = other.name_;
    head_ = other.head_;
    realm_ = other.realm_;
    level_ = other.level_;
    sd_ = other.sd_;
    integral_ = other.integral_;
    pos_ = other.pos_;
    allyName_ = other.allyName_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInformationPb Clone() {
    return new PlayerInformationPb(this);
  }

  /// <summary>Field number for the "pId" field.</summary>
  public const int PIdFieldNumber = 1;
  private int pId_;
  /// <summary>
  ///玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PId {
    get { return pId_; }
    set {
      pId_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "head" field.</summary>
  public const int HeadFieldNumber = 3;
  private string head_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Head {
    get { return head_; }
    set {
      head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "realm" field.</summary>
  public const int RealmFieldNumber = 4;
  private int realm_;
  /// <summary>
  /// 境界
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Realm {
    get { return realm_; }
    set {
      realm_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 5;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "sd" field.</summary>
  public const int SdFieldNumber = 6;
  private int sd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sd {
    get { return sd_; }
    set {
      sd_ = value;
    }
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 7;
  private int integral_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 8;
  private int pos_;
  /// <summary>
  ///成员职位 0-盟主 1-护法 2-成员 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "allyName" field.</summary>
  public const int AllyNameFieldNumber = 9;
  private string allyName_ = "";
  /// <summary>
  ///仙盟名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AllyName {
    get { return allyName_; }
    set {
      allyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerInformationPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerInformationPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PId != other.PId) return false;
    if (Name != other.Name) return false;
    if (Head != other.Head) return false;
    if (Realm != other.Realm) return false;
    if (Level != other.Level) return false;
    if (Sd != other.Sd) return false;
    if (Integral != other.Integral) return false;
    if (Pos != other.Pos) return false;
    if (AllyName != other.AllyName) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PId != 0) hash ^= PId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Head.Length != 0) hash ^= Head.GetHashCode();
    if (Realm != 0) hash ^= Realm.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Sd != 0) hash ^= Sd.GetHashCode();
    if (Integral != 0) hash ^= Integral.GetHashCode();
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (AllyName.Length != 0) hash ^= AllyName.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Head.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Head);
    }
    if (Realm != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Realm);
    }
    if (Level != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Level);
    }
    if (Sd != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Sd);
    }
    if (Integral != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Integral);
    }
    if (Pos != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Pos);
    }
    if (AllyName.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(AllyName);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Head.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
    }
    if (Realm != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Realm);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Sd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sd);
    }
    if (Integral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (AllyName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AllyName);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerInformationPb other) {
    if (other == null) {
      return;
    }
    if (other.PId != 0) {
      PId = other.PId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Head.Length != 0) {
      Head = other.Head;
    }
    if (other.Realm != 0) {
      Realm = other.Realm;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Sd != 0) {
      Sd = other.Sd;
    }
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.AllyName.Length != 0) {
      AllyName = other.AllyName;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PId = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Head = input.ReadString();
          break;
        }
        case 32: {
          Realm = input.ReadInt32();
          break;
        }
        case 40: {
          Level = input.ReadInt32();
          break;
        }
        case 48: {
          Sd = input.ReadInt32();
          break;
        }
        case 56: {
          Integral = input.ReadInt32();
          break;
        }
        case 64: {
          Pos = input.ReadInt32();
          break;
        }
        case 74: {
          AllyName = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 战斗
/// </summary>
public sealed partial class PartnerPvpPb : pb::IMessage<PartnerPvpPb> {
  private static readonly pb::MessageParser<PartnerPvpPb> _parser = new pb::MessageParser<PartnerPvpPb>(() => new PartnerPvpPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PartnerPvpPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[97]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerPvpPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerPvpPb(PartnerPvpPb other) : this() {
    configId_ = other.configId_;
    level_ = other.level_;
    skillLevel_ = other.skillLevel_;
    pos_ = other.pos_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PartnerPvpPb Clone() {
    return new PartnerPvpPb(this);
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 1;
  private int configId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "skillLevel" field.</summary>
  public const int SkillLevelFieldNumber = 3;
  private int skillLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SkillLevel {
    get { return skillLevel_; }
    set {
      skillLevel_ = value;
    }
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 4;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PartnerPvpPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PartnerPvpPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigId != other.ConfigId) return false;
    if (Level != other.Level) return false;
    if (SkillLevel != other.SkillLevel) return false;
    if (Pos != other.Pos) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (SkillLevel != 0) hash ^= SkillLevel.GetHashCode();
    if (Pos != 0) hash ^= Pos.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConfigId);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (SkillLevel != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SkillLevel);
    }
    if (Pos != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Pos);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (SkillLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLevel);
    }
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PartnerPvpPb other) {
    if (other == null) {
      return;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.SkillLevel != 0) {
      SkillLevel = other.SkillLevel;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 24: {
          SkillLevel = input.ReadInt32();
          break;
        }
        case 32: {
          Pos = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///Pvp消息对象
/// </summary>
public sealed partial class PvpPlayerPb : pb::IMessage<PvpPlayerPb> {
  private static readonly pb::MessageParser<PvpPlayerPb> _parser = new pb::MessageParser<PvpPlayerPb>(() => new PvpPlayerPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpPlayerPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[98]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpPlayerPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpPlayerPb(PvpPlayerPb other) : this() {
    pid_ = other.pid_;
    level_ = other.level_;
    head_ = other.head_;
    allyName_ = other.allyName_;
    integral_ = other.integral_;
    pName_ = other.pName_;
    attr_ = other.attr_.Clone();
    isRobot_ = other.isRobot_;
    curMount_ = other.curMount_;
    battlePet_ = other.battlePet_;
    partners_ = other.partners_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpPlayerPb Clone() {
    return new PvpPlayerPb(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "head" field.</summary>
  public const int HeadFieldNumber = 3;
  private string head_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Head {
    get { return head_; }
    set {
      head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "allyName" field.</summary>
  public const int AllyNameFieldNumber = 4;
  private string allyName_ = "";
  /// <summary>
  ///仙盟名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AllyName {
    get { return allyName_; }
    set {
      allyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 5;
  private int integral_;
  /// <summary>
  ///积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  /// <summary>Field number for the "pName" field.</summary>
  public const int PNameFieldNumber = 6;
  private string pName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PName {
    get { return pName_; }
    set {
      pName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "attr" field.</summary>
  public const int AttrFieldNumber = 7;
  private static readonly pbc::MapField<int, long>.Codec _map_attr_codec
      = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt64(16), 58);
  private readonly pbc::MapField<int, long> attr_ = new pbc::MapField<int, long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, long> Attr {
    get { return attr_; }
  }

  /// <summary>Field number for the "isRobot" field.</summary>
  public const int IsRobotFieldNumber = 8;
  private int isRobot_;
  /// <summary>
  /// 0是玩家，1是配表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsRobot {
    get { return isRobot_; }
    set {
      isRobot_ = value;
    }
  }

  /// <summary>Field number for the "curMount" field.</summary>
  public const int CurMountFieldNumber = 9;
  private int curMount_;
  /// <summary>
  ///当前坐骑id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurMount {
    get { return curMount_; }
    set {
      curMount_ = value;
    }
  }

  /// <summary>Field number for the "battlePet" field.</summary>
  public const int BattlePetFieldNumber = 10;
  private int battlePet_;
  /// <summary>
  ///出站宠物id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BattlePet {
    get { return battlePet_; }
    set {
      battlePet_ = value;
    }
  }

  /// <summary>Field number for the "partners" field.</summary>
  public const int PartnersFieldNumber = 11;
  private static readonly pb::FieldCodec<global::PartnerPvpPb> _repeated_partners_codec
      = pb::FieldCodec.ForMessage(90, global::PartnerPvpPb.Parser);
  private readonly pbc::RepeatedField<global::PartnerPvpPb> partners_ = new pbc::RepeatedField<global::PartnerPvpPb>();
  /// <summary>
  /// 伙伴
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PartnerPvpPb> Partners {
    get { return partners_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpPlayerPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpPlayerPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Level != other.Level) return false;
    if (Head != other.Head) return false;
    if (AllyName != other.AllyName) return false;
    if (Integral != other.Integral) return false;
    if (PName != other.PName) return false;
    if (!Attr.Equals(other.Attr)) return false;
    if (IsRobot != other.IsRobot) return false;
    if (CurMount != other.CurMount) return false;
    if (BattlePet != other.BattlePet) return false;
    if(!partners_.Equals(other.partners_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Head.Length != 0) hash ^= Head.GetHashCode();
    if (AllyName.Length != 0) hash ^= AllyName.GetHashCode();
    if (Integral != 0) hash ^= Integral.GetHashCode();
    if (PName.Length != 0) hash ^= PName.GetHashCode();
    hash ^= Attr.GetHashCode();
    if (IsRobot != 0) hash ^= IsRobot.GetHashCode();
    if (CurMount != 0) hash ^= CurMount.GetHashCode();
    if (BattlePet != 0) hash ^= BattlePet.GetHashCode();
    hash ^= partners_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (Head.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Head);
    }
    if (AllyName.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(AllyName);
    }
    if (Integral != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Integral);
    }
    if (PName.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(PName);
    }
    attr_.WriteTo(output, _map_attr_codec);
    if (IsRobot != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(IsRobot);
    }
    if (CurMount != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(CurMount);
    }
    if (BattlePet != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(BattlePet);
    }
    partners_.WriteTo(output, _repeated_partners_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Head.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
    }
    if (AllyName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AllyName);
    }
    if (Integral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    if (PName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PName);
    }
    size += attr_.CalculateSize(_map_attr_codec);
    if (IsRobot != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsRobot);
    }
    if (CurMount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurMount);
    }
    if (BattlePet != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattlePet);
    }
    size += partners_.CalculateSize(_repeated_partners_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpPlayerPb other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Head.Length != 0) {
      Head = other.Head;
    }
    if (other.AllyName.Length != 0) {
      AllyName = other.AllyName;
    }
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
    if (other.PName.Length != 0) {
      PName = other.PName;
    }
    attr_.Add(other.attr_);
    if (other.IsRobot != 0) {
      IsRobot = other.IsRobot;
    }
    if (other.CurMount != 0) {
      CurMount = other.CurMount;
    }
    if (other.BattlePet != 0) {
      BattlePet = other.BattlePet;
    }
    partners_.Add(other.partners_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 26: {
          Head = input.ReadString();
          break;
        }
        case 34: {
          AllyName = input.ReadString();
          break;
        }
        case 40: {
          Integral = input.ReadInt32();
          break;
        }
        case 50: {
          PName = input.ReadString();
          break;
        }
        case 58: {
          attr_.AddEntriesFrom(input, _map_attr_codec);
          break;
        }
        case 64: {
          IsRobot = input.ReadInt32();
          break;
        }
        case 72: {
          CurMount = input.ReadInt32();
          break;
        }
        case 80: {
          BattlePet = input.ReadInt32();
          break;
        }
        case 90: {
          partners_.AddEntriesFrom(input, _repeated_partners_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///pvp日志
/// </summary>
public sealed partial class PvpLogPb : pb::IMessage<PvpLogPb> {
  private static readonly pb::MessageParser<PvpLogPb> _parser = new pb::MessageParser<PvpLogPb>(() => new PvpLogPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PvpLogPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[99]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpLogPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpLogPb(PvpLogPb other) : this() {
    pid_ = other.pid_;
    level_ = other.level_;
    head_ = other.head_;
    pName_ = other.pName_;
    time_ = other.time_;
    result_ = other.result_;
    integral_ = other.integral_;
    isRevenge_ = other.isRevenge_;
    combat_ = other.combat_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PvpLogPb Clone() {
    return new PvpLogPb(this);
  }

  /// <summary>Field number for the "pid" field.</summary>
  public const int PidFieldNumber = 1;
  private int pid_;
  /// <summary>
  ///敌人pid
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pid {
    get { return pid_; }
    set {
      pid_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private int level_;
  /// <summary>
  ///敌人等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "head" field.</summary>
  public const int HeadFieldNumber = 3;
  private string head_ = "";
  /// <summary>
  ///敌人头像
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Head {
    get { return head_; }
    set {
      head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pName" field.</summary>
  public const int PNameFieldNumber = 6;
  private string pName_ = "";
  /// <summary>
  ///敌人名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PName {
    get { return pName_; }
    set {
      pName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 7;
  private int time_;
  /// <summary>
  ///log时间，秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 8;
  private int result_;
  /// <summary>
  ///0-失败 1-胜利
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "integral" field.</summary>
  public const int IntegralFieldNumber = 9;
  private int integral_;
  /// <summary>
  ///积分 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Integral {
    get { return integral_; }
    set {
      integral_ = value;
    }
  }

  /// <summary>Field number for the "isRevenge" field.</summary>
  public const int IsRevengeFieldNumber = 10;
  private int isRevenge_;
  /// <summary>
  ///是否复仇 0-未复仇 1-已复仇
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsRevenge {
    get { return isRevenge_; }
    set {
      isRevenge_ = value;
    }
  }

  /// <summary>Field number for the "combat" field.</summary>
  public const int CombatFieldNumber = 11;
  private int combat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Combat {
    get { return combat_; }
    set {
      combat_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PvpLogPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PvpLogPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pid != other.Pid) return false;
    if (Level != other.Level) return false;
    if (Head != other.Head) return false;
    if (PName != other.PName) return false;
    if (Time != other.Time) return false;
    if (Result != other.Result) return false;
    if (Integral != other.Integral) return false;
    if (IsRevenge != other.IsRevenge) return false;
    if (Combat != other.Combat) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pid != 0) hash ^= Pid.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Head.Length != 0) hash ^= Head.GetHashCode();
    if (PName.Length != 0) hash ^= PName.GetHashCode();
    if (Time != 0) hash ^= Time.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Integral != 0) hash ^= Integral.GetHashCode();
    if (IsRevenge != 0) hash ^= IsRevenge.GetHashCode();
    if (Combat != 0) hash ^= Combat.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pid);
    }
    if (Level != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (Head.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Head);
    }
    if (PName.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(PName);
    }
    if (Time != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Time);
    }
    if (Result != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Result);
    }
    if (Integral != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Integral);
    }
    if (IsRevenge != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(IsRevenge);
    }
    if (Combat != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Combat);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Head.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
    }
    if (PName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PName);
    }
    if (Time != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Integral != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integral);
    }
    if (IsRevenge != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsRevenge);
    }
    if (Combat != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Combat);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PvpLogPb other) {
    if (other == null) {
      return;
    }
    if (other.Pid != 0) {
      Pid = other.Pid;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Head.Length != 0) {
      Head = other.Head;
    }
    if (other.PName.Length != 0) {
      PName = other.PName;
    }
    if (other.Time != 0) {
      Time = other.Time;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Integral != 0) {
      Integral = other.Integral;
    }
    if (other.IsRevenge != 0) {
      IsRevenge = other.IsRevenge;
    }
    if (other.Combat != 0) {
      Combat = other.Combat;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pid = input.ReadInt32();
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 26: {
          Head = input.ReadString();
          break;
        }
        case 50: {
          PName = input.ReadString();
          break;
        }
        case 56: {
          Time = input.ReadInt32();
          break;
        }
        case 64: {
          Result = input.ReadInt32();
          break;
        }
        case 72: {
          Integral = input.ReadInt32();
          break;
        }
        case 80: {
          IsRevenge = input.ReadInt32();
          break;
        }
        case 88: {
          Combat = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///公会Boss讨伐奖励以及伤害记录
/// </summary>
public sealed partial class GuildRecordsPb : pb::IMessage<GuildRecordsPb> {
  private static readonly pb::MessageParser<GuildRecordsPb> _parser = new pb::MessageParser<GuildRecordsPb>(() => new GuildRecordsPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildRecordsPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[100]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRecordsPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRecordsPb(GuildRecordsPb other) : this() {
    name_ = other.name_;
    bossId_ = other.bossId_;
    bossDamage_ = other.bossDamage_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildRecordsPb Clone() {
    return new GuildRecordsPb(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  /// <summary>
  ///讨伐者名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "bossId" field.</summary>
  public const int BossIdFieldNumber = 2;
  private int bossId_;
  /// <summary>
  ///被讨伐的boss
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossId {
    get { return bossId_; }
    set {
      bossId_ = value;
    }
  }

  /// <summary>Field number for the "bossDamage" field.</summary>
  public const int BossDamageFieldNumber = 3;
  private long bossDamage_;
  /// <summary>
  ///对boss造成的伤害值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BossDamage {
    get { return bossDamage_; }
    set {
      bossDamage_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  /// 带回的奖励ID以及数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildRecordsPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildRecordsPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (BossId != other.BossId) return false;
    if (BossDamage != other.BossDamage) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (BossId != 0) hash ^= BossId.GetHashCode();
    if (BossDamage != 0L) hash ^= BossDamage.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (BossId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(BossId);
    }
    if (BossDamage != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(BossDamage);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (BossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossId);
    }
    if (BossDamage != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BossDamage);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildRecordsPb other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.BossId != 0) {
      BossId = other.BossId;
    }
    if (other.BossDamage != 0L) {
      BossDamage = other.BossDamage;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          BossId = input.ReadInt32();
          break;
        }
        case 24: {
          BossDamage = input.ReadInt64();
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///公会pb
/// </summary>
public sealed partial class GuildPb : pb::IMessage<GuildPb> {
  private static readonly pb::MessageParser<GuildPb> _parser = new pb::MessageParser<GuildPb>(() => new GuildPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[101]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildPb(GuildPb other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    level_ = other.level_;
    exp_ = other.exp_;
    notice_ = other.notice_;
    badgeId_ = other.badgeId_;
    creatTime_ = other.creatTime_;
    allowAutoJoin_ = other.allowAutoJoin_;
    joinMinLevel_ = other.joinMinLevel_;
    order_ = other.order_;
    memberIds_ = other.memberIds_.Clone();
    combat_ = other.combat_;
    rank_ = other.rank_;
    Applies = other.applies_ != null ? other.Applies.Clone() : null;
    assisMap_ = other.assisMap_.Clone();
    Boss = other.boss_ != null ? other.Boss.Clone() : null;
    todayJoinNumber_ = other.todayJoinNumber_;
    presidentName_ = other.presidentName_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildPb Clone() {
    return new GuildPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  ///名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  /// <summary>
  ///等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 4;
  private int exp_;
  /// <summary>
  ///经验
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "notice" field.</summary>
  public const int NoticeFieldNumber = 5;
  private string notice_ = "";
  /// <summary>
  ///公告
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Notice {
    get { return notice_; }
    set {
      notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "badgeId" field.</summary>
  public const int BadgeIdFieldNumber = 6;
  private int badgeId_;
  /// <summary>
  ///徽章id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BadgeId {
    get { return badgeId_; }
    set {
      badgeId_ = value;
    }
  }

  /// <summary>Field number for the "creatTime" field.</summary>
  public const int CreatTimeFieldNumber = 7;
  private long creatTime_;
  /// <summary>
  /// 创建时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CreatTime {
    get { return creatTime_; }
    set {
      creatTime_ = value;
    }
  }

  /// <summary>Field number for the "allowAutoJoin" field.</summary>
  public const int AllowAutoJoinFieldNumber = 8;
  private int allowAutoJoin_;
  /// <summary>
  ///1允许自动加入
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AllowAutoJoin {
    get { return allowAutoJoin_; }
    set {
      allowAutoJoin_ = value;
    }
  }

  /// <summary>Field number for the "joinMinLevel" field.</summary>
  public const int JoinMinLevelFieldNumber = 9;
  private int joinMinLevel_;
  /// <summary>
  ///入会最低等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int JoinMinLevel {
    get { return joinMinLevel_; }
    set {
      joinMinLevel_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 10;
  private int order_;
  /// <summary>
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "memberIds" field.</summary>
  public const int MemberIdsFieldNumber = 11;
  private static readonly pb::FieldCodec<int> _repeated_memberIds_codec
      = pb::FieldCodec.ForInt32(90);
  private readonly pbc::RepeatedField<int> memberIds_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// 公会成员id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> MemberIds {
    get { return memberIds_; }
  }

  /// <summary>Field number for the "combat" field.</summary>
  public const int CombatFieldNumber = 12;
  private long combat_;
  /// <summary>
  ///战力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Combat {
    get { return combat_; }
    set {
      combat_ = value;
    }
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 13;
  private int rank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rank {
    get { return rank_; }
    set {
      rank_ = value;
    }
  }

  /// <summary>Field number for the "applies" field.</summary>
  public const int AppliesFieldNumber = 14;
  private global::GuildApplyPlayerPb applies_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildApplyPlayerPb Applies {
    get { return applies_; }
    set {
      applies_ = value;
    }
  }

  /// <summary>Field number for the "assisMap" field.</summary>
  public const int AssisMapFieldNumber = 15;
  private static readonly pbc::MapField<int, global::GuildAssistPb>.Codec _map_assisMap_codec
      = new pbc::MapField<int, global::GuildAssistPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::GuildAssistPb.Parser), 122);
  private readonly pbc::MapField<int, global::GuildAssistPb> assisMap_ = new pbc::MapField<int, global::GuildAssistPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::GuildAssistPb> AssisMap {
    get { return assisMap_; }
  }

  /// <summary>Field number for the "boss" field.</summary>
  public const int BossFieldNumber = 16;
  private global::GuildBossPb boss_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildBossPb Boss {
    get { return boss_; }
    set {
      boss_ = value;
    }
  }

  /// <summary>Field number for the "todayJoinNumber" field.</summary>
  public const int TodayJoinNumberFieldNumber = 17;
  private int todayJoinNumber_;
  /// <summary>
  ///今日加入公会人数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TodayJoinNumber {
    get { return todayJoinNumber_; }
    set {
      todayJoinNumber_ = value;
    }
  }

  /// <summary>Field number for the "presidentName" field.</summary>
  public const int PresidentNameFieldNumber = 18;
  private string presidentName_ = "";
  /// <summary>
  ///会长名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PresidentName {
    get { return presidentName_; }
    set {
      presidentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    if (Notice != other.Notice) return false;
    if (BadgeId != other.BadgeId) return false;
    if (CreatTime != other.CreatTime) return false;
    if (AllowAutoJoin != other.AllowAutoJoin) return false;
    if (JoinMinLevel != other.JoinMinLevel) return false;
    if (Order != other.Order) return false;
    if(!memberIds_.Equals(other.memberIds_)) return false;
    if (Combat != other.Combat) return false;
    if (Rank != other.Rank) return false;
    if (!object.Equals(Applies, other.Applies)) return false;
    if (!AssisMap.Equals(other.AssisMap)) return false;
    if (!object.Equals(Boss, other.Boss)) return false;
    if (TodayJoinNumber != other.TodayJoinNumber) return false;
    if (PresidentName != other.PresidentName) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (Notice.Length != 0) hash ^= Notice.GetHashCode();
    if (BadgeId != 0) hash ^= BadgeId.GetHashCode();
    if (CreatTime != 0L) hash ^= CreatTime.GetHashCode();
    if (AllowAutoJoin != 0) hash ^= AllowAutoJoin.GetHashCode();
    if (JoinMinLevel != 0) hash ^= JoinMinLevel.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    hash ^= memberIds_.GetHashCode();
    if (Combat != 0L) hash ^= Combat.GetHashCode();
    if (Rank != 0) hash ^= Rank.GetHashCode();
    if (applies_ != null) hash ^= Applies.GetHashCode();
    hash ^= AssisMap.GetHashCode();
    if (boss_ != null) hash ^= Boss.GetHashCode();
    if (TodayJoinNumber != 0) hash ^= TodayJoinNumber.GetHashCode();
    if (PresidentName.Length != 0) hash ^= PresidentName.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Exp);
    }
    if (Notice.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Notice);
    }
    if (BadgeId != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(BadgeId);
    }
    if (CreatTime != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(CreatTime);
    }
    if (AllowAutoJoin != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(AllowAutoJoin);
    }
    if (JoinMinLevel != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(JoinMinLevel);
    }
    if (Order != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Order);
    }
    memberIds_.WriteTo(output, _repeated_memberIds_codec);
    if (Combat != 0L) {
      output.WriteRawTag(96);
      output.WriteInt64(Combat);
    }
    if (Rank != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(Rank);
    }
    if (applies_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(Applies);
    }
    assisMap_.WriteTo(output, _map_assisMap_codec);
    if (boss_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(Boss);
    }
    if (TodayJoinNumber != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(TodayJoinNumber);
    }
    if (PresidentName.Length != 0) {
      output.WriteRawTag(146, 1);
      output.WriteString(PresidentName);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (Notice.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
    }
    if (BadgeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BadgeId);
    }
    if (CreatTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatTime);
    }
    if (AllowAutoJoin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllowAutoJoin);
    }
    if (JoinMinLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinMinLevel);
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Order);
    }
    size += memberIds_.CalculateSize(_repeated_memberIds_codec);
    if (Combat != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Combat);
    }
    if (Rank != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
    }
    if (applies_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Applies);
    }
    size += assisMap_.CalculateSize(_map_assisMap_codec);
    if (boss_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Boss);
    }
    if (TodayJoinNumber != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TodayJoinNumber);
    }
    if (PresidentName.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(PresidentName);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.Notice.Length != 0) {
      Notice = other.Notice;
    }
    if (other.BadgeId != 0) {
      BadgeId = other.BadgeId;
    }
    if (other.CreatTime != 0L) {
      CreatTime = other.CreatTime;
    }
    if (other.AllowAutoJoin != 0) {
      AllowAutoJoin = other.AllowAutoJoin;
    }
    if (other.JoinMinLevel != 0) {
      JoinMinLevel = other.JoinMinLevel;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    memberIds_.Add(other.memberIds_);
    if (other.Combat != 0L) {
      Combat = other.Combat;
    }
    if (other.Rank != 0) {
      Rank = other.Rank;
    }
    if (other.applies_ != null) {
      if (applies_ == null) {
        applies_ = new global::GuildApplyPlayerPb();
      }
      Applies.MergeFrom(other.Applies);
    }
    assisMap_.Add(other.assisMap_);
    if (other.boss_ != null) {
      if (boss_ == null) {
        boss_ = new global::GuildBossPb();
      }
      Boss.MergeFrom(other.Boss);
    }
    if (other.TodayJoinNumber != 0) {
      TodayJoinNumber = other.TodayJoinNumber;
    }
    if (other.PresidentName.Length != 0) {
      PresidentName = other.PresidentName;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
        case 32: {
          Exp = input.ReadInt32();
          break;
        }
        case 42: {
          Notice = input.ReadString();
          break;
        }
        case 48: {
          BadgeId = input.ReadInt32();
          break;
        }
        case 56: {
          CreatTime = input.ReadInt64();
          break;
        }
        case 64: {
          AllowAutoJoin = input.ReadInt32();
          break;
        }
        case 72: {
          JoinMinLevel = input.ReadInt32();
          break;
        }
        case 80: {
          Order = input.ReadInt32();
          break;
        }
        case 90:
        case 88: {
          memberIds_.AddEntriesFrom(input, _repeated_memberIds_codec);
          break;
        }
        case 96: {
          Combat = input.ReadInt64();
          break;
        }
        case 104: {
          Rank = input.ReadInt32();
          break;
        }
        case 114: {
          if (applies_ == null) {
            applies_ = new global::GuildApplyPlayerPb();
          }
          input.ReadMessage(applies_);
          break;
        }
        case 122: {
          assisMap_.AddEntriesFrom(input, _map_assisMap_codec);
          break;
        }
        case 130: {
          if (boss_ == null) {
            boss_ = new global::GuildBossPb();
          }
          input.ReadMessage(boss_);
          break;
        }
        case 136: {
          TodayJoinNumber = input.ReadInt32();
          break;
        }
        case 146: {
          PresidentName = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///公会成员pb
/// </summary>
public sealed partial class GuildMemberPb : pb::IMessage<GuildMemberPb> {
  private static readonly pb::MessageParser<GuildMemberPb> _parser = new pb::MessageParser<GuildMemberPb>(() => new GuildMemberPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildMemberPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[102]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildMemberPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildMemberPb(GuildMemberPb other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    level_ = other.level_;
    dutiesId_ = other.dutiesId_;
    head_ = other.head_;
    exp_ = other.exp_;
    guildId_ = other.guildId_;
    combat_ = other.combat_;
    isOnline_ = other.isOnline_;
    loginTime_ = other.loginTime_;
    todayContribution_ = other.todayContribution_;
    hisContribution_ = other.hisContribution_;
    bossHurtReward_ = other.bossHurtReward_.Clone();
    crusadeReward_ = other.crusadeReward_.Clone();
    numReward_ = other.numReward_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildMemberPb Clone() {
    return new GuildMemberPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  ///名字  --
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  /// <summary>
  ///等级 --
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "dutiesId" field.</summary>
  public const int DutiesIdFieldNumber = 4;
  private int dutiesId_;
  /// <summary>
  ///职务id（1会长，2副会长，3精英，4成员）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DutiesId {
    get { return dutiesId_; }
    set {
      dutiesId_ = value;
    }
  }

  /// <summary>Field number for the "head" field.</summary>
  public const int HeadFieldNumber = 5;
  private string head_ = "";
  /// <summary>
  ///头像 --
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Head {
    get { return head_; }
    set {
      head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 6;
  private int exp_;
  /// <summary>
  ///活跃度 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "guildId" field.</summary>
  public const int GuildIdFieldNumber = 7;
  private int guildId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuildId {
    get { return guildId_; }
    set {
      guildId_ = value;
    }
  }

  /// <summary>Field number for the "combat" field.</summary>
  public const int CombatFieldNumber = 8;
  private long combat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Combat {
    get { return combat_; }
    set {
      combat_ = value;
    }
  }

  /// <summary>Field number for the "isOnline" field.</summary>
  public const int IsOnlineFieldNumber = 9;
  private int isOnline_;
  /// <summary>
  /// 1在线
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsOnline {
    get { return isOnline_; }
    set {
      isOnline_ = value;
    }
  }

  /// <summary>Field number for the "loginTime" field.</summary>
  public const int LoginTimeFieldNumber = 10;
  private long loginTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LoginTime {
    get { return loginTime_; }
    set {
      loginTime_ = value;
    }
  }

  /// <summary>Field number for the "todayContribution" field.</summary>
  public const int TodayContributionFieldNumber = 11;
  private long todayContribution_;
  /// <summary>
  /// 今日贡献
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TodayContribution {
    get { return todayContribution_; }
    set {
      todayContribution_ = value;
    }
  }

  /// <summary>Field number for the "hisContribution" field.</summary>
  public const int HisContributionFieldNumber = 12;
  private long hisContribution_;
  /// <summary>
  /// 历史贡献
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long HisContribution {
    get { return hisContribution_; }
    set {
      hisContribution_ = value;
    }
  }

  /// <summary>Field number for the "bossHurtReward" field.</summary>
  public const int BossHurtRewardFieldNumber = 13;
  private static readonly pbc::MapField<int, int>.Codec _map_bossHurtReward_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 106);
  private readonly pbc::MapField<int, int> bossHurtReward_ = new pbc::MapField<int, int>();
  /// <summary>
  /// count 活跃奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> BossHurtReward {
    get { return bossHurtReward_; }
  }

  /// <summary>Field number for the "crusadeReward" field.</summary>
  public const int CrusadeRewardFieldNumber = 14;
  private static readonly pbc::MapField<int, int>.Codec _map_crusadeReward_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 114);
  private readonly pbc::MapField<int, int> crusadeReward_ = new pbc::MapField<int, int>();
  /// <summary>
  /// crusadeBoss
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> CrusadeReward {
    get { return crusadeReward_; }
  }

  /// <summary>Field number for the "numReward" field.</summary>
  public const int NumRewardFieldNumber = 15;
  private static readonly pbc::MapField<int, int>.Codec _map_numReward_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 122);
  private readonly pbc::MapField<int, int> numReward_ = new pbc::MapField<int, int>();
  /// <summary>
  /// count 次数奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> NumReward {
    get { return numReward_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildMemberPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildMemberPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Level != other.Level) return false;
    if (DutiesId != other.DutiesId) return false;
    if (Head != other.Head) return false;
    if (Exp != other.Exp) return false;
    if (GuildId != other.GuildId) return false;
    if (Combat != other.Combat) return false;
    if (IsOnline != other.IsOnline) return false;
    if (LoginTime != other.LoginTime) return false;
    if (TodayContribution != other.TodayContribution) return false;
    if (HisContribution != other.HisContribution) return false;
    if (!BossHurtReward.Equals(other.BossHurtReward)) return false;
    if (!CrusadeReward.Equals(other.CrusadeReward)) return false;
    if (!NumReward.Equals(other.NumReward)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (DutiesId != 0) hash ^= DutiesId.GetHashCode();
    if (Head.Length != 0) hash ^= Head.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (GuildId != 0) hash ^= GuildId.GetHashCode();
    if (Combat != 0L) hash ^= Combat.GetHashCode();
    if (IsOnline != 0) hash ^= IsOnline.GetHashCode();
    if (LoginTime != 0L) hash ^= LoginTime.GetHashCode();
    if (TodayContribution != 0L) hash ^= TodayContribution.GetHashCode();
    if (HisContribution != 0L) hash ^= HisContribution.GetHashCode();
    hash ^= BossHurtReward.GetHashCode();
    hash ^= CrusadeReward.GetHashCode();
    hash ^= NumReward.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (DutiesId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(DutiesId);
    }
    if (Head.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Head);
    }
    if (Exp != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Exp);
    }
    if (GuildId != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(GuildId);
    }
    if (Combat != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(Combat);
    }
    if (IsOnline != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(IsOnline);
    }
    if (LoginTime != 0L) {
      output.WriteRawTag(80);
      output.WriteInt64(LoginTime);
    }
    if (TodayContribution != 0L) {
      output.WriteRawTag(88);
      output.WriteInt64(TodayContribution);
    }
    if (HisContribution != 0L) {
      output.WriteRawTag(96);
      output.WriteInt64(HisContribution);
    }
    bossHurtReward_.WriteTo(output, _map_bossHurtReward_codec);
    crusadeReward_.WriteTo(output, _map_crusadeReward_codec);
    numReward_.WriteTo(output, _map_numReward_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (DutiesId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DutiesId);
    }
    if (Head.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (GuildId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
    }
    if (Combat != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Combat);
    }
    if (IsOnline != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsOnline);
    }
    if (LoginTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LoginTime);
    }
    if (TodayContribution != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TodayContribution);
    }
    if (HisContribution != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(HisContribution);
    }
    size += bossHurtReward_.CalculateSize(_map_bossHurtReward_codec);
    size += crusadeReward_.CalculateSize(_map_crusadeReward_codec);
    size += numReward_.CalculateSize(_map_numReward_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildMemberPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.DutiesId != 0) {
      DutiesId = other.DutiesId;
    }
    if (other.Head.Length != 0) {
      Head = other.Head;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.GuildId != 0) {
      GuildId = other.GuildId;
    }
    if (other.Combat != 0L) {
      Combat = other.Combat;
    }
    if (other.IsOnline != 0) {
      IsOnline = other.IsOnline;
    }
    if (other.LoginTime != 0L) {
      LoginTime = other.LoginTime;
    }
    if (other.TodayContribution != 0L) {
      TodayContribution = other.TodayContribution;
    }
    if (other.HisContribution != 0L) {
      HisContribution = other.HisContribution;
    }
    bossHurtReward_.Add(other.bossHurtReward_);
    crusadeReward_.Add(other.crusadeReward_);
    numReward_.Add(other.numReward_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
        case 32: {
          DutiesId = input.ReadInt32();
          break;
        }
        case 42: {
          Head = input.ReadString();
          break;
        }
        case 48: {
          Exp = input.ReadInt32();
          break;
        }
        case 56: {
          GuildId = input.ReadInt32();
          break;
        }
        case 64: {
          Combat = input.ReadInt64();
          break;
        }
        case 72: {
          IsOnline = input.ReadInt32();
          break;
        }
        case 80: {
          LoginTime = input.ReadInt64();
          break;
        }
        case 88: {
          TodayContribution = input.ReadInt64();
          break;
        }
        case 96: {
          HisContribution = input.ReadInt64();
          break;
        }
        case 106: {
          bossHurtReward_.AddEntriesFrom(input, _map_bossHurtReward_codec);
          break;
        }
        case 114: {
          crusadeReward_.AddEntriesFrom(input, _map_crusadeReward_codec);
          break;
        }
        case 122: {
          numReward_.AddEntriesFrom(input, _map_numReward_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GuildApplyPb : pb::IMessage<GuildApplyPb> {
  private static readonly pb::MessageParser<GuildApplyPb> _parser = new pb::MessageParser<GuildApplyPb>(() => new GuildApplyPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildApplyPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[103]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyPb(GuildApplyPb other) : this() {
    id_ = other.id_;
    pId_ = other.pId_;
    guildId_ = other.guildId_;
    applyTime_ = other.applyTime_;
    combat_ = other.combat_;
    name_ = other.name_;
    head_ = other.head_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyPb Clone() {
    return new GuildApplyPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "pId" field.</summary>
  public const int PIdFieldNumber = 2;
  private int pId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PId {
    get { return pId_; }
    set {
      pId_ = value;
    }
  }

  /// <summary>Field number for the "guildId" field.</summary>
  public const int GuildIdFieldNumber = 3;
  private int guildId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuildId {
    get { return guildId_; }
    set {
      guildId_ = value;
    }
  }

  /// <summary>Field number for the "applyTime" field.</summary>
  public const int ApplyTimeFieldNumber = 4;
  private long applyTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ApplyTime {
    get { return applyTime_; }
    set {
      applyTime_ = value;
    }
  }

  /// <summary>Field number for the "combat" field.</summary>
  public const int CombatFieldNumber = 5;
  private long combat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Combat {
    get { return combat_; }
    set {
      combat_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 6;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "head" field.</summary>
  public const int HeadFieldNumber = 7;
  private string head_ = "";
  /// <summary>
  ///头像
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Head {
    get { return head_; }
    set {
      head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildApplyPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildApplyPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (PId != other.PId) return false;
    if (GuildId != other.GuildId) return false;
    if (ApplyTime != other.ApplyTime) return false;
    if (Combat != other.Combat) return false;
    if (Name != other.Name) return false;
    if (Head != other.Head) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (PId != 0) hash ^= PId.GetHashCode();
    if (GuildId != 0) hash ^= GuildId.GetHashCode();
    if (ApplyTime != 0L) hash ^= ApplyTime.GetHashCode();
    if (Combat != 0L) hash ^= Combat.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Head.Length != 0) hash ^= Head.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (PId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PId);
    }
    if (GuildId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(GuildId);
    }
    if (ApplyTime != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(ApplyTime);
    }
    if (Combat != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(Combat);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Name);
    }
    if (Head.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Head);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (PId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PId);
    }
    if (GuildId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
    }
    if (ApplyTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplyTime);
    }
    if (Combat != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Combat);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Head.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildApplyPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.PId != 0) {
      PId = other.PId;
    }
    if (other.GuildId != 0) {
      GuildId = other.GuildId;
    }
    if (other.ApplyTime != 0L) {
      ApplyTime = other.ApplyTime;
    }
    if (other.Combat != 0L) {
      Combat = other.Combat;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Head.Length != 0) {
      Head = other.Head;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          PId = input.ReadInt32();
          break;
        }
        case 24: {
          GuildId = input.ReadInt32();
          break;
        }
        case 32: {
          ApplyTime = input.ReadInt64();
          break;
        }
        case 40: {
          Combat = input.ReadInt64();
          break;
        }
        case 50: {
          Name = input.ReadString();
          break;
        }
        case 58: {
          Head = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildAssistPb : pb::IMessage<GuildAssistPb> {
  private static readonly pb::MessageParser<GuildAssistPb> _parser = new pb::MessageParser<GuildAssistPb>(() => new GuildAssistPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildAssistPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[104]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistPb(GuildAssistPb other) : this() {
    playerId_ = other.playerId_;
    guildId_ = other.guildId_;
    crateTime_ = other.crateTime_;
    poolLvl_ = other.poolLvl_;
    assistPlayers_ = other.assistPlayers_.Clone();
    name_ = other.name_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistPb Clone() {
    return new GuildAssistPb(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private int playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "guildId" field.</summary>
  public const int GuildIdFieldNumber = 2;
  private int guildId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GuildId {
    get { return guildId_; }
    set {
      guildId_ = value;
    }
  }

  /// <summary>Field number for the "crateTime" field.</summary>
  public const int CrateTimeFieldNumber = 3;
  private long crateTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CrateTime {
    get { return crateTime_; }
    set {
      crateTime_ = value;
    }
  }

  /// <summary>Field number for the "poolLvl" field.</summary>
  public const int PoolLvlFieldNumber = 4;
  private int poolLvl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PoolLvl {
    get { return poolLvl_; }
    set {
      poolLvl_ = value;
    }
  }

  /// <summary>Field number for the "assistPlayers" field.</summary>
  public const int AssistPlayersFieldNumber = 5;
  private static readonly pbc::MapField<int, int>.Codec _map_assistPlayers_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 42);
  private readonly pbc::MapField<int, int> assistPlayers_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> AssistPlayers {
    get { return assistPlayers_; }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 6;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildAssistPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildAssistPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (GuildId != other.GuildId) return false;
    if (CrateTime != other.CrateTime) return false;
    if (PoolLvl != other.PoolLvl) return false;
    if (!AssistPlayers.Equals(other.AssistPlayers)) return false;
    if (Name != other.Name) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
    if (GuildId != 0) hash ^= GuildId.GetHashCode();
    if (CrateTime != 0L) hash ^= CrateTime.GetHashCode();
    if (PoolLvl != 0) hash ^= PoolLvl.GetHashCode();
    hash ^= AssistPlayers.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PlayerId);
    }
    if (GuildId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(GuildId);
    }
    if (CrateTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(CrateTime);
    }
    if (PoolLvl != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(PoolLvl);
    }
    assistPlayers_.WriteTo(output, _map_assistPlayers_codec);
    if (Name.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Name);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
    }
    if (GuildId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuildId);
    }
    if (CrateTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CrateTime);
    }
    if (PoolLvl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoolLvl);
    }
    size += assistPlayers_.CalculateSize(_map_assistPlayers_codec);
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildAssistPb other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0) {
      PlayerId = other.PlayerId;
    }
    if (other.GuildId != 0) {
      GuildId = other.GuildId;
    }
    if (other.CrateTime != 0L) {
      CrateTime = other.CrateTime;
    }
    if (other.PoolLvl != 0) {
      PoolLvl = other.PoolLvl;
    }
    assistPlayers_.Add(other.assistPlayers_);
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PlayerId = input.ReadInt32();
          break;
        }
        case 16: {
          GuildId = input.ReadInt32();
          break;
        }
        case 24: {
          CrateTime = input.ReadInt64();
          break;
        }
        case 32: {
          PoolLvl = input.ReadInt32();
          break;
        }
        case 42: {
          assistPlayers_.AddEntriesFrom(input, _map_assistPlayers_codec);
          break;
        }
        case 50: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GuildApplyPlayerPb : pb::IMessage<GuildApplyPlayerPb> {
  private static readonly pb::MessageParser<GuildApplyPlayerPb> _parser = new pb::MessageParser<GuildApplyPlayerPb>(() => new GuildApplyPlayerPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildApplyPlayerPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[105]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyPlayerPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyPlayerPb(GuildApplyPlayerPb other) : this() {
    applies_ = other.applies_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildApplyPlayerPb Clone() {
    return new GuildApplyPlayerPb(this);
  }

  /// <summary>Field number for the "applies" field.</summary>
  public const int AppliesFieldNumber = 1;
  private static readonly pbc::MapField<long, global::GuildApplyPb>.Codec _map_applies_codec
      = new pbc::MapField<long, global::GuildApplyPb>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::GuildApplyPb.Parser), 10);
  private readonly pbc::MapField<long, global::GuildApplyPb> applies_ = new pbc::MapField<long, global::GuildApplyPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<long, global::GuildApplyPb> Applies {
    get { return applies_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildApplyPlayerPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildApplyPlayerPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Applies.Equals(other.Applies)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Applies.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    applies_.WriteTo(output, _map_applies_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += applies_.CalculateSize(_map_applies_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildApplyPlayerPb other) {
    if (other == null) {
      return;
    }
    applies_.Add(other.applies_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          applies_.AddEntriesFrom(input, _map_applies_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GuildAssistPbPlayerPb : pb::IMessage<GuildAssistPbPlayerPb> {
  private static readonly pb::MessageParser<GuildAssistPbPlayerPb> _parser = new pb::MessageParser<GuildAssistPbPlayerPb>(() => new GuildAssistPbPlayerPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildAssistPbPlayerPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[106]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistPbPlayerPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistPbPlayerPb(GuildAssistPbPlayerPb other) : this() {
    assis_ = other.assis_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildAssistPbPlayerPb Clone() {
    return new GuildAssistPbPlayerPb(this);
  }

  /// <summary>Field number for the "assis" field.</summary>
  public const int AssisFieldNumber = 1;
  private static readonly pbc::MapField<int, global::GuildAssistPb>.Codec _map_assis_codec
      = new pbc::MapField<int, global::GuildAssistPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::GuildAssistPb.Parser), 10);
  private readonly pbc::MapField<int, global::GuildAssistPb> assis_ = new pbc::MapField<int, global::GuildAssistPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::GuildAssistPb> Assis {
    get { return assis_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildAssistPbPlayerPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildAssistPbPlayerPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Assis.Equals(other.Assis)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Assis.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    assis_.WriteTo(output, _map_assis_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += assis_.CalculateSize(_map_assis_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildAssistPbPlayerPb other) {
    if (other == null) {
      return;
    }
    assis_.Add(other.assis_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          assis_.AddEntriesFrom(input, _map_assis_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GuildBossPb : pb::IMessage<GuildBossPb> {
  private static readonly pb::MessageParser<GuildBossPb> _parser = new pb::MessageParser<GuildBossPb>(() => new GuildBossPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[107]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossPb(GuildBossPb other) : this() {
    id_ = other.id_;
    accumulatedDamage_ = other.accumulatedDamage_;
    playerDamages_ = other.playerDamages_.Clone();
    totalBattleNum_ = other.totalBattleNum_;
    hp_ = other.hp_;
    BossReward = other.bossReward_ != null ? other.BossReward.Clone() : null;
    records_ = other.records_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossPb Clone() {
    return new GuildBossPb(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "accumulatedDamage" field.</summary>
  public const int AccumulatedDamageFieldNumber = 2;
  private long accumulatedDamage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long AccumulatedDamage {
    get { return accumulatedDamage_; }
    set {
      accumulatedDamage_ = value;
    }
  }

  /// <summary>Field number for the "playerDamages" field.</summary>
  public const int PlayerDamagesFieldNumber = 3;
  private static readonly pbc::MapField<int, long>.Codec _map_playerDamages_codec
      = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt64(16), 26);
  private readonly pbc::MapField<int, long> playerDamages_ = new pbc::MapField<int, long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, long> PlayerDamages {
    get { return playerDamages_; }
  }

  /// <summary>Field number for the "totalBattleNum" field.</summary>
  public const int TotalBattleNumFieldNumber = 4;
  private int totalBattleNum_;
  /// <summary>
  /// 挑战次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalBattleNum {
    get { return totalBattleNum_; }
    set {
      totalBattleNum_ = value;
    }
  }

  /// <summary>Field number for the "hp" field.</summary>
  public const int HpFieldNumber = 5;
  private long hp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Hp {
    get { return hp_; }
    set {
      hp_ = value;
    }
  }

  /// <summary>Field number for the "bossReward" field.</summary>
  public const int BossRewardFieldNumber = 6;
  private global::GuildBossRewardPb bossReward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildBossRewardPb BossReward {
    get { return bossReward_; }
    set {
      bossReward_ = value;
    }
  }

  /// <summary>Field number for the "records" field.</summary>
  public const int RecordsFieldNumber = 7;
  private static readonly pbc::MapField<int, global::GuildRecordsPb>.Codec _map_records_codec
      = new pbc::MapField<int, global::GuildRecordsPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::GuildRecordsPb.Parser), 58);
  private readonly pbc::MapField<int, global::GuildRecordsPb> records_ = new pbc::MapField<int, global::GuildRecordsPb>();
  /// <summary>
  ///讨伐记录
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::GuildRecordsPb> Records {
    get { return records_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (AccumulatedDamage != other.AccumulatedDamage) return false;
    if (!PlayerDamages.Equals(other.PlayerDamages)) return false;
    if (TotalBattleNum != other.TotalBattleNum) return false;
    if (Hp != other.Hp) return false;
    if (!object.Equals(BossReward, other.BossReward)) return false;
    if (!Records.Equals(other.Records)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (AccumulatedDamage != 0L) hash ^= AccumulatedDamage.GetHashCode();
    hash ^= PlayerDamages.GetHashCode();
    if (TotalBattleNum != 0) hash ^= TotalBattleNum.GetHashCode();
    if (Hp != 0L) hash ^= Hp.GetHashCode();
    if (bossReward_ != null) hash ^= BossReward.GetHashCode();
    hash ^= Records.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (AccumulatedDamage != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(AccumulatedDamage);
    }
    playerDamages_.WriteTo(output, _map_playerDamages_codec);
    if (TotalBattleNum != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TotalBattleNum);
    }
    if (Hp != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(Hp);
    }
    if (bossReward_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(BossReward);
    }
    records_.WriteTo(output, _map_records_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (AccumulatedDamage != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccumulatedDamage);
    }
    size += playerDamages_.CalculateSize(_map_playerDamages_codec);
    if (TotalBattleNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalBattleNum);
    }
    if (Hp != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Hp);
    }
    if (bossReward_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BossReward);
    }
    size += records_.CalculateSize(_map_records_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossPb other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.AccumulatedDamage != 0L) {
      AccumulatedDamage = other.AccumulatedDamage;
    }
    playerDamages_.Add(other.playerDamages_);
    if (other.TotalBattleNum != 0) {
      TotalBattleNum = other.TotalBattleNum;
    }
    if (other.Hp != 0L) {
      Hp = other.Hp;
    }
    if (other.bossReward_ != null) {
      if (bossReward_ == null) {
        bossReward_ = new global::GuildBossRewardPb();
      }
      BossReward.MergeFrom(other.BossReward);
    }
    records_.Add(other.records_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          AccumulatedDamage = input.ReadInt64();
          break;
        }
        case 26: {
          playerDamages_.AddEntriesFrom(input, _map_playerDamages_codec);
          break;
        }
        case 32: {
          TotalBattleNum = input.ReadInt32();
          break;
        }
        case 40: {
          Hp = input.ReadInt64();
          break;
        }
        case 50: {
          if (bossReward_ == null) {
            bossReward_ = new global::GuildBossRewardPb();
          }
          input.ReadMessage(bossReward_);
          break;
        }
        case 58: {
          records_.AddEntriesFrom(input, _map_records_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class GuildBossRewardPb : pb::IMessage<GuildBossRewardPb> {
  private static readonly pb::MessageParser<GuildBossRewardPb> _parser = new pb::MessageParser<GuildBossRewardPb>(() => new GuildBossRewardPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildBossRewardPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[108]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossRewardPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossRewardPb(GuildBossRewardPb other) : this() {
    crusadeReward_ = other.crusadeReward_.Clone();
    numReward_ = other.numReward_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildBossRewardPb Clone() {
    return new GuildBossRewardPb(this);
  }

  /// <summary>Field number for the "crusadeReward" field.</summary>
  public const int CrusadeRewardFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_crusadeReward_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> crusadeReward_ = new pbc::MapField<int, int>();
  /// <summary>
  /// crusadeBoss 固定和随机
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> CrusadeReward {
    get { return crusadeReward_; }
  }

  /// <summary>Field number for the "numReward" field.</summary>
  public const int NumRewardFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_numReward_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> numReward_ = new pbc::MapField<int, int>();
  /// <summary>
  /// count 次数奖励-- 挑战boss总次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> NumReward {
    get { return numReward_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildBossRewardPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildBossRewardPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!CrusadeReward.Equals(other.CrusadeReward)) return false;
    if (!NumReward.Equals(other.NumReward)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= CrusadeReward.GetHashCode();
    hash ^= NumReward.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    crusadeReward_.WriteTo(output, _map_crusadeReward_codec);
    numReward_.WriteTo(output, _map_numReward_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += crusadeReward_.CalculateSize(_map_crusadeReward_codec);
    size += numReward_.CalculateSize(_map_numReward_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildBossRewardPb other) {
    if (other == null) {
      return;
    }
    crusadeReward_.Add(other.crusadeReward_);
    numReward_.Add(other.numReward_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          crusadeReward_.AddEntriesFrom(input, _map_crusadeReward_codec);
          break;
        }
        case 18: {
          numReward_.AddEntriesFrom(input, _map_numReward_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 后端对象
/// </summary>
public sealed partial class GuildPlayerPb : pb::IMessage<GuildPlayerPb> {
  private static readonly pb::MessageParser<GuildPlayerPb> _parser = new pb::MessageParser<GuildPlayerPb>(() => new GuildPlayerPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GuildPlayerPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[109]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildPlayerPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildPlayerPb(GuildPlayerPb other) : this() {
    Applies = other.applies_ != null ? other.Applies.Clone() : null;
    InitiateAssists = other.initiateAssists_ != null ? other.InitiateAssists.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GuildPlayerPb Clone() {
    return new GuildPlayerPb(this);
  }

  /// <summary>Field number for the "applies" field.</summary>
  public const int AppliesFieldNumber = 1;
  private global::GuildApplyPlayerPb applies_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildApplyPlayerPb Applies {
    get { return applies_; }
    set {
      applies_ = value;
    }
  }

  /// <summary>Field number for the "initiateAssists" field.</summary>
  public const int InitiateAssistsFieldNumber = 2;
  private global::GuildAssistPbPlayerPb initiateAssists_;
  /// <summary>
  /// 发起协助数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GuildAssistPbPlayerPb InitiateAssists {
    get { return initiateAssists_; }
    set {
      initiateAssists_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GuildPlayerPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GuildPlayerPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Applies, other.Applies)) return false;
    if (!object.Equals(InitiateAssists, other.InitiateAssists)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (applies_ != null) hash ^= Applies.GetHashCode();
    if (initiateAssists_ != null) hash ^= InitiateAssists.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (applies_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Applies);
    }
    if (initiateAssists_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(InitiateAssists);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (applies_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Applies);
    }
    if (initiateAssists_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitiateAssists);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GuildPlayerPb other) {
    if (other == null) {
      return;
    }
    if (other.applies_ != null) {
      if (applies_ == null) {
        applies_ = new global::GuildApplyPlayerPb();
      }
      Applies.MergeFrom(other.Applies);
    }
    if (other.initiateAssists_ != null) {
      if (initiateAssists_ == null) {
        initiateAssists_ = new global::GuildAssistPbPlayerPb();
      }
      InitiateAssists.MergeFrom(other.InitiateAssists);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (applies_ == null) {
            applies_ = new global::GuildApplyPlayerPb();
          }
          input.ReadMessage(applies_);
          break;
        }
        case 18: {
          if (initiateAssists_ == null) {
            initiateAssists_ = new global::GuildAssistPbPlayerPb();
          }
          input.ReadMessage(initiateAssists_);
          break;
        }
      }
    }
  }

}

/// <summary>
///*
///module:
///1：item							背包
///2：partners					伙伴
///3：mount						坐骑
///4：pets							宠物
///5：sv								圣器 缩写sv
///6：friends					密友
///7：player						玩家
///8：mail 						邮件
///9：dailyrefresh			免费次数
/// </summary>
public sealed partial class GmInfoPb : pb::IMessage<GmInfoPb> {
  private static readonly pb::MessageParser<GmInfoPb> _parser = new pb::MessageParser<GmInfoPb>(() => new GmInfoPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GmInfoPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[110]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmInfoPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmInfoPb(GmInfoPb other) : this() {
    module_ = other.module_;
    errorMsg_ = other.errorMsg_;
    items_ = other.items_.Clone();
    partners_ = other.partners_.Clone();
    partnerChips_ = other.partnerChips_.Clone();
    Mounts = other.mounts_ != null ? other.Mounts.Clone() : null;
    ownPetList_ = other.ownPetList_.Clone();
    SacredVessels = other.sacredVessels_ != null ? other.SacredVessels.Clone() : null;
    Friend = other.friend_ != null ? other.Friend.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmInfoPb Clone() {
    return new GmInfoPb(this);
  }

  /// <summary>Field number for the "module" field.</summary>
  public const int ModuleFieldNumber = 1;
  private int module_;
  /// <summary>
  ///模块  1：item
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Module {
    get { return module_; }
    set {
      module_ = value;
    }
  }

  /// <summary>Field number for the "errorMsg" field.</summary>
  public const int ErrorMsgFieldNumber = 2;
  private string errorMsg_ = "";
  /// <summary>
  ///错误消息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrorMsg {
    get { return errorMsg_; }
    set {
      errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "items" field.</summary>
  public const int ItemsFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_items_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> items_ = new pbc::MapField<int, int>();
  /// <summary>
  ///道具列表  对应GM
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Items {
    get { return items_; }
  }

  /// <summary>Field number for the "partners" field.</summary>
  public const int PartnersFieldNumber = 4;
  private static readonly pbc::MapField<int, global::PartnerPb>.Codec _map_partners_codec
      = new pbc::MapField<int, global::PartnerPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PartnerPb.Parser), 34);
  private readonly pbc::MapField<int, global::PartnerPb> partners_ = new pbc::MapField<int, global::PartnerPb>();
  /// <summary>
  ///获得的伙伴  对应GM
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::PartnerPb> Partners {
    get { return partners_; }
  }

  /// <summary>Field number for the "partnerChips" field.</summary>
  public const int PartnerChipsFieldNumber = 5;
  private static readonly pbc::MapField<int, int>.Codec _map_partnerChips_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 42);
  private readonly pbc::MapField<int, int> partnerChips_ = new pbc::MapField<int, int>();
  /// <summary>
  ///获得伙伴碎片
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> PartnerChips {
    get { return partnerChips_; }
  }

  /// <summary>Field number for the "mounts" field.</summary>
  public const int MountsFieldNumber = 6;
  private global::MountsPb mounts_;
  /// <summary>
  ///GM获得坐骑
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MountsPb Mounts {
    get { return mounts_; }
    set {
      mounts_ = value;
    }
  }

  /// <summary>Field number for the "ownPetList" field.</summary>
  public const int OwnPetListFieldNumber = 7;
  private static readonly pb::FieldCodec<int> _repeated_ownPetList_codec
      = pb::FieldCodec.ForInt32(58);
  private readonly pbc::RepeatedField<int> ownPetList_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///GM 获得宠物
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> OwnPetList {
    get { return ownPetList_; }
  }

  /// <summary>Field number for the "sacredVessels" field.</summary>
  public const int SacredVesselsFieldNumber = 8;
  private global::SacredVesselsPb sacredVessels_;
  /// <summary>
  ///GM获得圣器
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SacredVesselsPb SacredVessels {
    get { return sacredVessels_; }
    set {
      sacredVessels_ = value;
    }
  }

  /// <summary>Field number for the "friend" field.</summary>
  public const int FriendFieldNumber = 9;
  private global::FriendPb friend_;
  /// <summary>
  ///GM获得密友
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FriendPb Friend {
    get { return friend_; }
    set {
      friend_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GmInfoPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GmInfoPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Module != other.Module) return false;
    if (ErrorMsg != other.ErrorMsg) return false;
    if (!Items.Equals(other.Items)) return false;
    if (!Partners.Equals(other.Partners)) return false;
    if (!PartnerChips.Equals(other.PartnerChips)) return false;
    if (!object.Equals(Mounts, other.Mounts)) return false;
    if(!ownPetList_.Equals(other.ownPetList_)) return false;
    if (!object.Equals(SacredVessels, other.SacredVessels)) return false;
    if (!object.Equals(Friend, other.Friend)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Module != 0) hash ^= Module.GetHashCode();
    if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
    hash ^= Items.GetHashCode();
    hash ^= Partners.GetHashCode();
    hash ^= PartnerChips.GetHashCode();
    if (mounts_ != null) hash ^= Mounts.GetHashCode();
    hash ^= ownPetList_.GetHashCode();
    if (sacredVessels_ != null) hash ^= SacredVessels.GetHashCode();
    if (friend_ != null) hash ^= Friend.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Module != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Module);
    }
    if (ErrorMsg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorMsg);
    }
    items_.WriteTo(output, _map_items_codec);
    partners_.WriteTo(output, _map_partners_codec);
    partnerChips_.WriteTo(output, _map_partnerChips_codec);
    if (mounts_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Mounts);
    }
    ownPetList_.WriteTo(output, _repeated_ownPetList_codec);
    if (sacredVessels_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(SacredVessels);
    }
    if (friend_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(Friend);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Module != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Module);
    }
    if (ErrorMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
    }
    size += items_.CalculateSize(_map_items_codec);
    size += partners_.CalculateSize(_map_partners_codec);
    size += partnerChips_.CalculateSize(_map_partnerChips_codec);
    if (mounts_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mounts);
    }
    size += ownPetList_.CalculateSize(_repeated_ownPetList_codec);
    if (sacredVessels_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SacredVessels);
    }
    if (friend_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Friend);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GmInfoPb other) {
    if (other == null) {
      return;
    }
    if (other.Module != 0) {
      Module = other.Module;
    }
    if (other.ErrorMsg.Length != 0) {
      ErrorMsg = other.ErrorMsg;
    }
    items_.Add(other.items_);
    partners_.Add(other.partners_);
    partnerChips_.Add(other.partnerChips_);
    if (other.mounts_ != null) {
      if (mounts_ == null) {
        mounts_ = new global::MountsPb();
      }
      Mounts.MergeFrom(other.Mounts);
    }
    ownPetList_.Add(other.ownPetList_);
    if (other.sacredVessels_ != null) {
      if (sacredVessels_ == null) {
        sacredVessels_ = new global::SacredVesselsPb();
      }
      SacredVessels.MergeFrom(other.SacredVessels);
    }
    if (other.friend_ != null) {
      if (friend_ == null) {
        friend_ = new global::FriendPb();
      }
      Friend.MergeFrom(other.Friend);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Module = input.ReadInt32();
          break;
        }
        case 18: {
          ErrorMsg = input.ReadString();
          break;
        }
        case 26: {
          items_.AddEntriesFrom(input, _map_items_codec);
          break;
        }
        case 34: {
          partners_.AddEntriesFrom(input, _map_partners_codec);
          break;
        }
        case 42: {
          partnerChips_.AddEntriesFrom(input, _map_partnerChips_codec);
          break;
        }
        case 50: {
          if (mounts_ == null) {
            mounts_ = new global::MountsPb();
          }
          input.ReadMessage(mounts_);
          break;
        }
        case 58:
        case 56: {
          ownPetList_.AddEntriesFrom(input, _repeated_ownPetList_codec);
          break;
        }
        case 66: {
          if (sacredVessels_ == null) {
            sacredVessels_ = new global::SacredVesselsPb();
          }
          input.ReadMessage(sacredVessels_);
          break;
        }
        case 74: {
          if (friend_ == null) {
            friend_ = new global::FriendPb();
          }
          input.ReadMessage(friend_);
          break;
        }
      }
    }
  }

}

/// <summary>
///*
///付费运营活动信息
/// </summary>
public sealed partial class RechargeActivityPb : pb::IMessage<RechargeActivityPb> {
  private static readonly pb::MessageParser<RechargeActivityPb> _parser = new pb::MessageParser<RechargeActivityPb>(() => new RechargeActivityPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RechargeActivityPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[111]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RechargeActivityPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RechargeActivityPb(RechargeActivityPb other) : this() {
    buyNumMap_ = other.buyNumMap_.Clone();
    firstRechargeInfo_ = other.firstRechargeInfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RechargeActivityPb Clone() {
    return new RechargeActivityPb(this);
  }

  /// <summary>Field number for the "buyNumMap" field.</summary>
  public const int BuyNumMapFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_buyNumMap_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> buyNumMap_ = new pbc::MapField<int, int>();
  /// <summary>
  ///k:商品ID   v：成功购买的次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> BuyNumMap {
    get { return buyNumMap_; }
  }

  /// <summary>Field number for the "firstRechargeInfo" field.</summary>
  public const int FirstRechargeInfoFieldNumber = 2;
  private static readonly pbc::MapField<int, global::FirstRechargePb>.Codec _map_firstRechargeInfo_codec
      = new pbc::MapField<int, global::FirstRechargePb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::FirstRechargePb.Parser), 18);
  private readonly pbc::MapField<int, global::FirstRechargePb> firstRechargeInfo_ = new pbc::MapField<int, global::FirstRechargePb>();
  /// <summary>
  ///首充信息   k：rechargeId  v：该档首充的其他信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::FirstRechargePb> FirstRechargeInfo {
    get { return firstRechargeInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RechargeActivityPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RechargeActivityPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!BuyNumMap.Equals(other.BuyNumMap)) return false;
    if (!FirstRechargeInfo.Equals(other.FirstRechargeInfo)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= BuyNumMap.GetHashCode();
    hash ^= FirstRechargeInfo.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    buyNumMap_.WriteTo(output, _map_buyNumMap_codec);
    firstRechargeInfo_.WriteTo(output, _map_firstRechargeInfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += buyNumMap_.CalculateSize(_map_buyNumMap_codec);
    size += firstRechargeInfo_.CalculateSize(_map_firstRechargeInfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RechargeActivityPb other) {
    if (other == null) {
      return;
    }
    buyNumMap_.Add(other.buyNumMap_);
    firstRechargeInfo_.Add(other.firstRechargeInfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          buyNumMap_.AddEntriesFrom(input, _map_buyNumMap_codec);
          break;
        }
        case 18: {
          firstRechargeInfo_.AddEntriesFrom(input, _map_firstRechargeInfo_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///首充结构
/// </summary>
public sealed partial class FirstRechargePb : pb::IMessage<FirstRechargePb> {
  private static readonly pb::MessageParser<FirstRechargePb> _parser = new pb::MessageParser<FirstRechargePb>(() => new FirstRechargePb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FirstRechargePb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[112]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FirstRechargePb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FirstRechargePb(FirstRechargePb other) : this() {
    rechargeId_ = other.rechargeId_;
    buyTime_ = other.buyTime_;
    dayStatus_ = other.dayStatus_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FirstRechargePb Clone() {
    return new FirstRechargePb(this);
  }

  /// <summary>Field number for the "rechargeId" field.</summary>
  public const int RechargeIdFieldNumber = 1;
  private int rechargeId_;
  /// <summary>
  ///商品ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RechargeId {
    get { return rechargeId_; }
    set {
      rechargeId_ = value;
    }
  }

  /// <summary>Field number for the "buyTime" field.</summary>
  public const int BuyTimeFieldNumber = 2;
  private long buyTime_;
  /// <summary>
  ///购买时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BuyTime {
    get { return buyTime_; }
    set {
      buyTime_ = value;
    }
  }

  /// <summary>Field number for the "dayStatus" field.</summary>
  public const int DayStatusFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_dayStatus_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> dayStatus_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///每日奖励状态  0 未购买  1：可领取  2：已领取
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> DayStatus {
    get { return dayStatus_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FirstRechargePb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FirstRechargePb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RechargeId != other.RechargeId) return false;
    if (BuyTime != other.BuyTime) return false;
    if(!dayStatus_.Equals(other.dayStatus_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RechargeId != 0) hash ^= RechargeId.GetHashCode();
    if (BuyTime != 0L) hash ^= BuyTime.GetHashCode();
    hash ^= dayStatus_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RechargeId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RechargeId);
    }
    if (BuyTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(BuyTime);
    }
    dayStatus_.WriteTo(output, _repeated_dayStatus_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RechargeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RechargeId);
    }
    if (BuyTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuyTime);
    }
    size += dayStatus_.CalculateSize(_repeated_dayStatus_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FirstRechargePb other) {
    if (other == null) {
      return;
    }
    if (other.RechargeId != 0) {
      RechargeId = other.RechargeId;
    }
    if (other.BuyTime != 0L) {
      BuyTime = other.BuyTime;
    }
    dayStatus_.Add(other.dayStatus_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RechargeId = input.ReadInt32();
          break;
        }
        case 16: {
          BuyTime = input.ReadInt64();
          break;
        }
        case 26:
        case 24: {
          dayStatus_.AddEntriesFrom(input, _repeated_dayStatus_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///特权卡
/// </summary>
public sealed partial class PrivilegeCardsPb : pb::IMessage<PrivilegeCardsPb> {
  private static readonly pb::MessageParser<PrivilegeCardsPb> _parser = new pb::MessageParser<PrivilegeCardsPb>(() => new PrivilegeCardsPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PrivilegeCardsPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[113]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PrivilegeCardsPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PrivilegeCardsPb(PrivilegeCardsPb other) : this() {
    cardInfos_ = other.cardInfos_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PrivilegeCardsPb Clone() {
    return new PrivilegeCardsPb(this);
  }

  /// <summary>Field number for the "cardInfos" field.</summary>
  public const int CardInfosFieldNumber = 1;
  private static readonly pbc::MapField<int, global::PrivilegeCardInfo>.Codec _map_cardInfos_codec
      = new pbc::MapField<int, global::PrivilegeCardInfo>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PrivilegeCardInfo.Parser), 10);
  private readonly pbc::MapField<int, global::PrivilegeCardInfo> cardInfos_ = new pbc::MapField<int, global::PrivilegeCardInfo>();
  /// <summary>
  ///k 特权卡ID		v:特权卡信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::PrivilegeCardInfo> CardInfos {
    get { return cardInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PrivilegeCardsPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PrivilegeCardsPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!CardInfos.Equals(other.CardInfos)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= CardInfos.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    cardInfos_.WriteTo(output, _map_cardInfos_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += cardInfos_.CalculateSize(_map_cardInfos_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PrivilegeCardsPb other) {
    if (other == null) {
      return;
    }
    cardInfos_.Add(other.cardInfos_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          cardInfos_.AddEntriesFrom(input, _map_cardInfos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PrivilegeCardInfo : pb::IMessage<PrivilegeCardInfo> {
  private static readonly pb::MessageParser<PrivilegeCardInfo> _parser = new pb::MessageParser<PrivilegeCardInfo>(() => new PrivilegeCardInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PrivilegeCardInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[114]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PrivilegeCardInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PrivilegeCardInfo(PrivilegeCardInfo other) : this() {
    id_ = other.id_;
    cardType_ = other.cardType_;
    expireTime_ = other.expireTime_;
    todayReward_ = other.todayReward_;
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PrivilegeCardInfo Clone() {
    return new PrivilegeCardInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  /// <summary>
  ///特权卡ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "cardType" field.</summary>
  public const int CardTypeFieldNumber = 2;
  private int cardType_;
  /// <summary>
  ///特权卡类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CardType {
    get { return cardType_; }
    set {
      cardType_ = value;
    }
  }

  /// <summary>Field number for the "expireTime" field.</summary>
  public const int ExpireTimeFieldNumber = 3;
  private long expireTime_;
  /// <summary>
  ///过期时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ExpireTime {
    get { return expireTime_; }
    set {
      expireTime_ = value;
    }
  }

  /// <summary>Field number for the "todayReward" field.</summary>
  public const int TodayRewardFieldNumber = 4;
  private int todayReward_;
  /// <summary>
  ///今日奖励是否领取  0：未领取  1：已领取
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TodayReward {
    get { return todayReward_; }
    set {
      todayReward_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 5;
  private int status_;
  /// <summary>
  ///状态 0：未购买  1：已生效  2：已过期
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PrivilegeCardInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PrivilegeCardInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (CardType != other.CardType) return false;
    if (ExpireTime != other.ExpireTime) return false;
    if (TodayReward != other.TodayReward) return false;
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (CardType != 0) hash ^= CardType.GetHashCode();
    if (ExpireTime != 0L) hash ^= ExpireTime.GetHashCode();
    if (TodayReward != 0) hash ^= TodayReward.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (CardType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CardType);
    }
    if (ExpireTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(ExpireTime);
    }
    if (TodayReward != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TodayReward);
    }
    if (Status != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (CardType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
    }
    if (ExpireTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
    }
    if (TodayReward != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TodayReward);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PrivilegeCardInfo other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.CardType != 0) {
      CardType = other.CardType;
    }
    if (other.ExpireTime != 0L) {
      ExpireTime = other.ExpireTime;
    }
    if (other.TodayReward != 0) {
      TodayReward = other.TodayReward;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          CardType = input.ReadInt32();
          break;
        }
        case 24: {
          ExpireTime = input.ReadInt64();
          break;
        }
        case 32: {
          TodayReward = input.ReadInt32();
          break;
        }
        case 40: {
          Status = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 商店
/// </summary>
public sealed partial class PlayerShopInfoPb : pb::IMessage<PlayerShopInfoPb> {
  private static readonly pb::MessageParser<PlayerShopInfoPb> _parser = new pb::MessageParser<PlayerShopInfoPb>(() => new PlayerShopInfoPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerShopInfoPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[115]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerShopInfoPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerShopInfoPb(PlayerShopInfoPb other) : this() {
    shopItems_ = other.shopItems_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerShopInfoPb Clone() {
    return new PlayerShopInfoPb(this);
  }

  /// <summary>Field number for the "shopItems" field.</summary>
  public const int ShopItemsFieldNumber = 1;
  private static readonly pbc::MapField<int, global::PlayerShopPb>.Codec _map_shopItems_codec
      = new pbc::MapField<int, global::PlayerShopPb>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PlayerShopPb.Parser), 10);
  private readonly pbc::MapField<int, global::PlayerShopPb> shopItems_ = new pbc::MapField<int, global::PlayerShopPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, global::PlayerShopPb> ShopItems {
    get { return shopItems_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerShopInfoPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerShopInfoPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ShopItems.Equals(other.ShopItems)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ShopItems.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    shopItems_.WriteTo(output, _map_shopItems_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += shopItems_.CalculateSize(_map_shopItems_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerShopInfoPb other) {
    if (other == null) {
      return;
    }
    shopItems_.Add(other.shopItems_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          shopItems_.AddEntriesFrom(input, _map_shopItems_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerShopPb : pb::IMessage<PlayerShopPb> {
  private static readonly pb::MessageParser<PlayerShopPb> _parser = new pb::MessageParser<PlayerShopPb>(() => new PlayerShopPb());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerShopPb> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BeanReflection.Descriptor.MessageTypes[116]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerShopPb() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerShopPb(PlayerShopPb other) : this() {
    goodsId_ = other.goodsId_;
    num_ = other.num_;
    freshTime_ = other.freshTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerShopPb Clone() {
    return new PlayerShopPb(this);
  }

  /// <summary>Field number for the "goodsId" field.</summary>
  public const int GoodsIdFieldNumber = 1;
  private int goodsId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoodsId {
    get { return goodsId_; }
    set {
      goodsId_ = value;
    }
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 2;
  private int num_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  /// <summary>Field number for the "freshTime" field.</summary>
  public const int FreshTimeFieldNumber = 3;
  private long freshTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FreshTime {
    get { return freshTime_; }
    set {
      freshTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerShopPb);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerShopPb other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GoodsId != other.GoodsId) return false;
    if (Num != other.Num) return false;
    if (FreshTime != other.FreshTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GoodsId != 0) hash ^= GoodsId.GetHashCode();
    if (Num != 0) hash ^= Num.GetHashCode();
    if (FreshTime != 0L) hash ^= FreshTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GoodsId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GoodsId);
    }
    if (Num != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Num);
    }
    if (FreshTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(FreshTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GoodsId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsId);
    }
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    if (FreshTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FreshTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerShopPb other) {
    if (other == null) {
      return;
    }
    if (other.GoodsId != 0) {
      GoodsId = other.GoodsId;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
    if (other.FreshTime != 0L) {
      FreshTime = other.FreshTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GoodsId = input.ReadInt32();
          break;
        }
        case 16: {
          Num = input.ReadInt32();
          break;
        }
        case 24: {
          FreshTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
