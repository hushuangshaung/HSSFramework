// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from task.proto</summary>
public static partial class TaskReflection {

  #region Descriptor
  /// <summary>File descriptor for task.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TaskReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgp0YXNrLnByb3RvGgpiZWFuLnByb3RvIh8KEUZpbmlzaE1haW5UYXNrUmVx",
          "EgoKAmlkGAEgASgFIqEBChJGaW5pc2hNYWluVGFza1Jlc3ASHAoHbmV3VGFz",
          "axgBIAEoCzILLk1haW5UYXNrUGISOQoLY2hhbmdlSXRlbXMYAiADKAsyJC5G",
          "aW5pc2hNYWluVGFza1Jlc3AuQ2hhbmdlSXRlbXNFbnRyeRoyChBDaGFuZ2VJ",
          "dGVtc0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAFCFAoK",
          "Y29tLmNiLm1zZ0IGUEJUYXNrYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::FinishMainTaskReq), global::FinishMainTaskReq.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FinishMainTaskResp), global::FinishMainTaskResp.Parser, new[]{ "NewTask", "ChangeItems" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
        }));
  }
  #endregion

}
#region Messages
public sealed partial class FinishMainTaskReq : pb::IMessage<FinishMainTaskReq> {
  private static readonly pb::MessageParser<FinishMainTaskReq> _parser = new pb::MessageParser<FinishMainTaskReq>(() => new FinishMainTaskReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FinishMainTaskReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TaskReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FinishMainTaskReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FinishMainTaskReq(FinishMainTaskReq other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FinishMainTaskReq Clone() {
    return new FinishMainTaskReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FinishMainTaskReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FinishMainTaskReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FinishMainTaskReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class FinishMainTaskResp : pb::IMessage<FinishMainTaskResp> {
  private static readonly pb::MessageParser<FinishMainTaskResp> _parser = new pb::MessageParser<FinishMainTaskResp>(() => new FinishMainTaskResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FinishMainTaskResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TaskReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FinishMainTaskResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FinishMainTaskResp(FinishMainTaskResp other) : this() {
    NewTask = other.newTask_ != null ? other.NewTask.Clone() : null;
    changeItems_ = other.changeItems_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FinishMainTaskResp Clone() {
    return new FinishMainTaskResp(this);
  }

  /// <summary>Field number for the "newTask" field.</summary>
  public const int NewTaskFieldNumber = 1;
  private global::MainTaskPb newTask_;
  /// <summary>
  ///新的任务pb，如果没有返回空
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MainTaskPb NewTask {
    get { return newTask_; }
    set {
      newTask_ = value;
    }
  }

  /// <summary>Field number for the "changeItems" field.</summary>
  public const int ChangeItemsFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItems_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItems_ = new pbc::MapField<int, int>();
  /// <summary>
  /// 道具变化
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItems {
    get { return changeItems_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FinishMainTaskResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FinishMainTaskResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(NewTask, other.NewTask)) return false;
    if (!ChangeItems.Equals(other.ChangeItems)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (newTask_ != null) hash ^= NewTask.GetHashCode();
    hash ^= ChangeItems.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (newTask_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(NewTask);
    }
    changeItems_.WriteTo(output, _map_changeItems_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (newTask_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewTask);
    }
    size += changeItems_.CalculateSize(_map_changeItems_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FinishMainTaskResp other) {
    if (other == null) {
      return;
    }
    if (other.newTask_ != null) {
      if (newTask_ == null) {
        newTask_ = new global::MainTaskPb();
      }
      NewTask.MergeFrom(other.NewTask);
    }
    changeItems_.Add(other.changeItems_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (newTask_ == null) {
            newTask_ = new global::MainTaskPb();
          }
          input.ReadMessage(newTask_);
          break;
        }
        case 18: {
          changeItems_.AddEntriesFrom(input, _map_changeItems_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
