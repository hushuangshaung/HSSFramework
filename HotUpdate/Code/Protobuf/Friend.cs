// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from friend.proto</summary>
public static partial class FriendReflection {

  #region Descriptor
  /// <summary>File descriptor for friend.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static FriendReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxmcmllbmQucHJvdG8aCmJlYW4ucHJvdG8iEwoRR2V0RnJpZW5kc0luZm9S",
          "ZXEiNgoSR2V0RnJpZW5kc0luZm9SZXNwEiAKB2ZyaWVuZHMYASABKAsyDy5Q",
          "bGF5ZXJGcmllbmRQYiJCChRCYXR0bGVGcmllbmRTdGFydFJlcRIQCghmcmll",
          "bmRJZBgBIAEoBRIYChBmcmllbmREdWVsQm9zc0lkGAIgASgFIlEKFUJhdHRs",
          "ZUZyaWVuZFN0YXJ0UmVzcBIQCghmcmllbmRJZBgBIAEoBRIYChBmcmllbmRE",
          "dWVsQm9zc0lkGAIgASgFEgwKBHNlZWQYAyABKAUiXgoSQmF0dGxlRnJpZW5k",
          "RW5kUmVxEhAKCGZyaWVuZElkGAEgASgFEg4KBnJlc3VsdBgCIAEoBRIYChBm",
          "cmllbmREdWVsQm9zc0lkGAMgASgFEgwKBHNlZWQYBCABKAUirgEKE0JhdHRs",
          "ZUZyaWVuZEVuZFJlc3ASEAoIZnJpZW5kSWQYASABKAUSOAoKY2hhbmdlSXRl",
          "bRgDIAMoCzIkLkJhdHRsZUZyaWVuZEVuZFJlc3AuQ2hhbmdlSXRlbUVudHJ5",
          "EhgKEGZyaWVuZER1ZWxCb3NzSWQYBCABKAUaMQoPQ2hhbmdlSXRlbUVudHJ5",
          "EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiHgoPVHJhdmVsRnJp",
          "ZW5kUmVxEgsKA251bRgBIAEoBSKvAQoQVHJhdmVsRnJpZW5kUmVzcBI1Cgpj",
          "aGFuZ2VJdGVtGAEgAygLMiEuVHJhdmVsRnJpZW5kUmVzcC5DaGFuZ2VJdGVt",
          "RW50cnkSDQoFcG93ZXIYAiABKAUSEwoLbGFzdENhbFRpbWUYAyABKAMSDQoF",
          "cG9kSWQYBCABKAUaMQoPQ2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEoBRIN",
          "CgV2YWx1ZRgCIAEoBToCOAEiPgoNRmVlZEZyaWVuZFJlcRIOCgZpdGVtSWQY",
          "ASABKAUSCwoDbnVtGAIgASgFEhAKCGZyaWVuZElkGAMgASgFIpMBCg5GZWVk",
          "RnJpZW5kUmVzcBIzCgpjaGFuZ2VJdGVtGAEgAygLMh8uRmVlZEZyaWVuZFJl",
          "c3AuQ2hhbmdlSXRlbUVudHJ5EhkKBmZyaWVuZBgCIAEoCzIJLkZyaWVuZFBi",
          "GjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiAB",
          "KAU6AjgBIiMKD1VubG9ja0ZyaWVuZFJlcRIQCghmcmllbmRJZBgBIAEoBSIt",
          "ChBVbmxvY2tGcmllbmRSZXNwEhkKBmZyaWVuZBgBIAEoCzIJLkZyaWVuZFBi",
          "QhYKCmNvbS5jYi5tc2dCCFBCRnJpZW5kYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::GetFriendsInfoReq), global::GetFriendsInfoReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetFriendsInfoResp), global::GetFriendsInfoResp.Parser, new[]{ "Friends" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BattleFriendStartReq), global::BattleFriendStartReq.Parser, new[]{ "FriendId", "FriendDuelBossId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BattleFriendStartResp), global::BattleFriendStartResp.Parser, new[]{ "FriendId", "FriendDuelBossId", "Seed" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BattleFriendEndReq), global::BattleFriendEndReq.Parser, new[]{ "FriendId", "Result", "FriendDuelBossId", "Seed" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BattleFriendEndResp), global::BattleFriendEndResp.Parser, new[]{ "FriendId", "ChangeItem", "FriendDuelBossId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::TravelFriendReq), global::TravelFriendReq.Parser, new[]{ "Num" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TravelFriendResp), global::TravelFriendResp.Parser, new[]{ "ChangeItem", "Power", "LastCalTime", "PodId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::FeedFriendReq), global::FeedFriendReq.Parser, new[]{ "ItemId", "Num", "FriendId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FeedFriendResp), global::FeedFriendResp.Parser, new[]{ "ChangeItem", "Friend" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::UnlockFriendReq), global::UnlockFriendReq.Parser, new[]{ "FriendId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UnlockFriendResp), global::UnlockFriendResp.Parser, new[]{ "Friend" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class GetFriendsInfoReq : pb::IMessage<GetFriendsInfoReq> {
  private static readonly pb::MessageParser<GetFriendsInfoReq> _parser = new pb::MessageParser<GetFriendsInfoReq>(() => new GetFriendsInfoReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetFriendsInfoReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FriendReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetFriendsInfoReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetFriendsInfoReq(GetFriendsInfoReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetFriendsInfoReq Clone() {
    return new GetFriendsInfoReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetFriendsInfoReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetFriendsInfoReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetFriendsInfoReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GetFriendsInfoResp : pb::IMessage<GetFriendsInfoResp> {
  private static readonly pb::MessageParser<GetFriendsInfoResp> _parser = new pb::MessageParser<GetFriendsInfoResp>(() => new GetFriendsInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetFriendsInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FriendReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetFriendsInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetFriendsInfoResp(GetFriendsInfoResp other) : this() {
    Friends = other.friends_ != null ? other.Friends.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetFriendsInfoResp Clone() {
    return new GetFriendsInfoResp(this);
  }

  /// <summary>Field number for the "friends" field.</summary>
  public const int FriendsFieldNumber = 1;
  private global::PlayerFriendPb friends_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerFriendPb Friends {
    get { return friends_; }
    set {
      friends_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetFriendsInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetFriendsInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Friends, other.Friends)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (friends_ != null) hash ^= Friends.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (friends_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Friends);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (friends_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Friends);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetFriendsInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.friends_ != null) {
      if (friends_ == null) {
        friends_ = new global::PlayerFriendPb();
      }
      Friends.MergeFrom(other.Friends);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (friends_ == null) {
            friends_ = new global::PlayerFriendPb();
          }
          input.ReadMessage(friends_);
          break;
        }
      }
    }
  }

}

/// <summary>
///密友切磋开始
/// </summary>
public sealed partial class BattleFriendStartReq : pb::IMessage<BattleFriendStartReq> {
  private static readonly pb::MessageParser<BattleFriendStartReq> _parser = new pb::MessageParser<BattleFriendStartReq>(() => new BattleFriendStartReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BattleFriendStartReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FriendReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleFriendStartReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleFriendStartReq(BattleFriendStartReq other) : this() {
    friendId_ = other.friendId_;
    friendDuelBossId_ = other.friendDuelBossId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleFriendStartReq Clone() {
    return new BattleFriendStartReq(this);
  }

  /// <summary>Field number for the "friendId" field.</summary>
  public const int FriendIdFieldNumber = 1;
  private int friendId_;
  /// <summary>
  ///密友唯一id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FriendId {
    get { return friendId_; }
    set {
      friendId_ = value;
    }
  }

  /// <summary>Field number for the "friendDuelBossId" field.</summary>
  public const int FriendDuelBossIdFieldNumber = 2;
  private int friendDuelBossId_;
  /// <summary>
  ///配置表FriendDuelBoss id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FriendDuelBossId {
    get { return friendDuelBossId_; }
    set {
      friendDuelBossId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BattleFriendStartReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BattleFriendStartReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FriendId != other.FriendId) return false;
    if (FriendDuelBossId != other.FriendDuelBossId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FriendId != 0) hash ^= FriendId.GetHashCode();
    if (FriendDuelBossId != 0) hash ^= FriendDuelBossId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FriendId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(FriendId);
    }
    if (FriendDuelBossId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(FriendDuelBossId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FriendId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendId);
    }
    if (FriendDuelBossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendDuelBossId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BattleFriendStartReq other) {
    if (other == null) {
      return;
    }
    if (other.FriendId != 0) {
      FriendId = other.FriendId;
    }
    if (other.FriendDuelBossId != 0) {
      FriendDuelBossId = other.FriendDuelBossId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          FriendId = input.ReadInt32();
          break;
        }
        case 16: {
          FriendDuelBossId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class BattleFriendStartResp : pb::IMessage<BattleFriendStartResp> {
  private static readonly pb::MessageParser<BattleFriendStartResp> _parser = new pb::MessageParser<BattleFriendStartResp>(() => new BattleFriendStartResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BattleFriendStartResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FriendReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleFriendStartResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleFriendStartResp(BattleFriendStartResp other) : this() {
    friendId_ = other.friendId_;
    friendDuelBossId_ = other.friendDuelBossId_;
    seed_ = other.seed_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleFriendStartResp Clone() {
    return new BattleFriendStartResp(this);
  }

  /// <summary>Field number for the "friendId" field.</summary>
  public const int FriendIdFieldNumber = 1;
  private int friendId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FriendId {
    get { return friendId_; }
    set {
      friendId_ = value;
    }
  }

  /// <summary>Field number for the "friendDuelBossId" field.</summary>
  public const int FriendDuelBossIdFieldNumber = 2;
  private int friendDuelBossId_;
  /// <summary>
  ///配置表FriendDuelBoss id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FriendDuelBossId {
    get { return friendDuelBossId_; }
    set {
      friendDuelBossId_ = value;
    }
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 3;
  private int seed_;
  /// <summary>
  ///种子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BattleFriendStartResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BattleFriendStartResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FriendId != other.FriendId) return false;
    if (FriendDuelBossId != other.FriendDuelBossId) return false;
    if (Seed != other.Seed) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FriendId != 0) hash ^= FriendId.GetHashCode();
    if (FriendDuelBossId != 0) hash ^= FriendDuelBossId.GetHashCode();
    if (Seed != 0) hash ^= Seed.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FriendId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(FriendId);
    }
    if (FriendDuelBossId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(FriendDuelBossId);
    }
    if (Seed != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Seed);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FriendId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendId);
    }
    if (FriendDuelBossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendDuelBossId);
    }
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BattleFriendStartResp other) {
    if (other == null) {
      return;
    }
    if (other.FriendId != 0) {
      FriendId = other.FriendId;
    }
    if (other.FriendDuelBossId != 0) {
      FriendDuelBossId = other.FriendDuelBossId;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          FriendId = input.ReadInt32();
          break;
        }
        case 16: {
          FriendDuelBossId = input.ReadInt32();
          break;
        }
        case 24: {
          Seed = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///挑战切磋结束
/// </summary>
public sealed partial class BattleFriendEndReq : pb::IMessage<BattleFriendEndReq> {
  private static readonly pb::MessageParser<BattleFriendEndReq> _parser = new pb::MessageParser<BattleFriendEndReq>(() => new BattleFriendEndReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BattleFriendEndReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FriendReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleFriendEndReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleFriendEndReq(BattleFriendEndReq other) : this() {
    friendId_ = other.friendId_;
    result_ = other.result_;
    friendDuelBossId_ = other.friendDuelBossId_;
    seed_ = other.seed_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleFriendEndReq Clone() {
    return new BattleFriendEndReq(this);
  }

  /// <summary>Field number for the "friendId" field.</summary>
  public const int FriendIdFieldNumber = 1;
  private int friendId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FriendId {
    get { return friendId_; }
    set {
      friendId_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  ///0-失败 1-胜利
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "friendDuelBossId" field.</summary>
  public const int FriendDuelBossIdFieldNumber = 3;
  private int friendDuelBossId_;
  /// <summary>
  ///配置表FriendDuelBoss id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FriendDuelBossId {
    get { return friendDuelBossId_; }
    set {
      friendDuelBossId_ = value;
    }
  }

  /// <summary>Field number for the "seed" field.</summary>
  public const int SeedFieldNumber = 4;
  private int seed_;
  /// <summary>
  ///种子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seed {
    get { return seed_; }
    set {
      seed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BattleFriendEndReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BattleFriendEndReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FriendId != other.FriendId) return false;
    if (Result != other.Result) return false;
    if (FriendDuelBossId != other.FriendDuelBossId) return false;
    if (Seed != other.Seed) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FriendId != 0) hash ^= FriendId.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (FriendDuelBossId != 0) hash ^= FriendDuelBossId.GetHashCode();
    if (Seed != 0) hash ^= Seed.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FriendId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(FriendId);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (FriendDuelBossId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FriendDuelBossId);
    }
    if (Seed != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Seed);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FriendId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendId);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (FriendDuelBossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendDuelBossId);
    }
    if (Seed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BattleFriendEndReq other) {
    if (other == null) {
      return;
    }
    if (other.FriendId != 0) {
      FriendId = other.FriendId;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.FriendDuelBossId != 0) {
      FriendDuelBossId = other.FriendDuelBossId;
    }
    if (other.Seed != 0) {
      Seed = other.Seed;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          FriendId = input.ReadInt32();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 24: {
          FriendDuelBossId = input.ReadInt32();
          break;
        }
        case 32: {
          Seed = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class BattleFriendEndResp : pb::IMessage<BattleFriendEndResp> {
  private static readonly pb::MessageParser<BattleFriendEndResp> _parser = new pb::MessageParser<BattleFriendEndResp>(() => new BattleFriendEndResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BattleFriendEndResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FriendReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleFriendEndResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleFriendEndResp(BattleFriendEndResp other) : this() {
    friendId_ = other.friendId_;
    changeItem_ = other.changeItem_.Clone();
    friendDuelBossId_ = other.friendDuelBossId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BattleFriendEndResp Clone() {
    return new BattleFriendEndResp(this);
  }

  /// <summary>Field number for the "friendId" field.</summary>
  public const int FriendIdFieldNumber = 1;
  private int friendId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FriendId {
    get { return friendId_; }
    set {
      friendId_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "friendDuelBossId" field.</summary>
  public const int FriendDuelBossIdFieldNumber = 4;
  private int friendDuelBossId_;
  /// <summary>
  ///配置表FriendDuelBoss id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FriendDuelBossId {
    get { return friendDuelBossId_; }
    set {
      friendDuelBossId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BattleFriendEndResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BattleFriendEndResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FriendId != other.FriendId) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (FriendDuelBossId != other.FriendDuelBossId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FriendId != 0) hash ^= FriendId.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    if (FriendDuelBossId != 0) hash ^= FriendDuelBossId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FriendId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(FriendId);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (FriendDuelBossId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(FriendDuelBossId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FriendId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendId);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (FriendDuelBossId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendDuelBossId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BattleFriendEndResp other) {
    if (other == null) {
      return;
    }
    if (other.FriendId != 0) {
      FriendId = other.FriendId;
    }
    changeItem_.Add(other.changeItem_);
    if (other.FriendDuelBossId != 0) {
      FriendDuelBossId = other.FriendDuelBossId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          FriendId = input.ReadInt32();
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 32: {
          FriendDuelBossId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 游历
/// </summary>
public sealed partial class TravelFriendReq : pb::IMessage<TravelFriendReq> {
  private static readonly pb::MessageParser<TravelFriendReq> _parser = new pb::MessageParser<TravelFriendReq>(() => new TravelFriendReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TravelFriendReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FriendReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TravelFriendReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TravelFriendReq(TravelFriendReq other) : this() {
    num_ = other.num_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TravelFriendReq Clone() {
    return new TravelFriendReq(this);
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 1;
  private int num_;
  /// <summary>
  /// 游历次数，1或者10
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TravelFriendReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TravelFriendReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Num != other.Num) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Num != 0) hash ^= Num.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Num != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Num);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TravelFriendReq other) {
    if (other == null) {
      return;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Num = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TravelFriendResp : pb::IMessage<TravelFriendResp> {
  private static readonly pb::MessageParser<TravelFriendResp> _parser = new pb::MessageParser<TravelFriendResp>(() => new TravelFriendResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TravelFriendResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FriendReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TravelFriendResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TravelFriendResp(TravelFriendResp other) : this() {
    changeItem_ = other.changeItem_.Clone();
    power_ = other.power_;
    lastCalTime_ = other.lastCalTime_;
    podId_ = other.podId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TravelFriendResp Clone() {
    return new TravelFriendResp(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 2;
  private int power_;
  /// <summary>
  /// 体力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Power {
    get { return power_; }
    set {
      power_ = value;
    }
  }

  /// <summary>Field number for the "lastCalTime" field.</summary>
  public const int LastCalTimeFieldNumber = 3;
  private long lastCalTime_;
  /// <summary>
  /// 上次计算体力时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastCalTime {
    get { return lastCalTime_; }
    set {
      lastCalTime_ = value;
    }
  }

  /// <summary>Field number for the "podId" field.</summary>
  public const int PodIdFieldNumber = 4;
  private int podId_;
  /// <summary>
  /// 配置表pond id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PodId {
    get { return podId_; }
    set {
      podId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TravelFriendResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TravelFriendResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (Power != other.Power) return false;
    if (LastCalTime != other.LastCalTime) return false;
    if (PodId != other.PodId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    if (Power != 0) hash ^= Power.GetHashCode();
    if (LastCalTime != 0L) hash ^= LastCalTime.GetHashCode();
    if (PodId != 0) hash ^= PodId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (Power != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Power);
    }
    if (LastCalTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(LastCalTime);
    }
    if (PodId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(PodId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (Power != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
    }
    if (LastCalTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastCalTime);
    }
    if (PodId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PodId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TravelFriendResp other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
    if (other.Power != 0) {
      Power = other.Power;
    }
    if (other.LastCalTime != 0L) {
      LastCalTime = other.LastCalTime;
    }
    if (other.PodId != 0) {
      PodId = other.PodId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 16: {
          Power = input.ReadInt32();
          break;
        }
        case 24: {
          LastCalTime = input.ReadInt64();
          break;
        }
        case 32: {
          PodId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 喂养
/// </summary>
public sealed partial class FeedFriendReq : pb::IMessage<FeedFriendReq> {
  private static readonly pb::MessageParser<FeedFriendReq> _parser = new pb::MessageParser<FeedFriendReq>(() => new FeedFriendReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FeedFriendReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FriendReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FeedFriendReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FeedFriendReq(FeedFriendReq other) : this() {
    itemId_ = other.itemId_;
    num_ = other.num_;
    friendId_ = other.friendId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FeedFriendReq Clone() {
    return new FeedFriendReq(this);
  }

  /// <summary>Field number for the "itemId" field.</summary>
  public const int ItemIdFieldNumber = 1;
  private int itemId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ItemId {
    get { return itemId_; }
    set {
      itemId_ = value;
    }
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 2;
  private int num_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  /// <summary>Field number for the "friendId" field.</summary>
  public const int FriendIdFieldNumber = 3;
  private int friendId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FriendId {
    get { return friendId_; }
    set {
      friendId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FeedFriendReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FeedFriendReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ItemId != other.ItemId) return false;
    if (Num != other.Num) return false;
    if (FriendId != other.FriendId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ItemId != 0) hash ^= ItemId.GetHashCode();
    if (Num != 0) hash ^= Num.GetHashCode();
    if (FriendId != 0) hash ^= FriendId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ItemId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ItemId);
    }
    if (Num != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Num);
    }
    if (FriendId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FriendId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ItemId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
    }
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    if (FriendId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FeedFriendReq other) {
    if (other == null) {
      return;
    }
    if (other.ItemId != 0) {
      ItemId = other.ItemId;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
    if (other.FriendId != 0) {
      FriendId = other.FriendId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ItemId = input.ReadInt32();
          break;
        }
        case 16: {
          Num = input.ReadInt32();
          break;
        }
        case 24: {
          FriendId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class FeedFriendResp : pb::IMessage<FeedFriendResp> {
  private static readonly pb::MessageParser<FeedFriendResp> _parser = new pb::MessageParser<FeedFriendResp>(() => new FeedFriendResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FeedFriendResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FriendReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FeedFriendResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FeedFriendResp(FeedFriendResp other) : this() {
    changeItem_ = other.changeItem_.Clone();
    Friend = other.friend_ != null ? other.Friend.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FeedFriendResp Clone() {
    return new FeedFriendResp(this);
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "friend" field.</summary>
  public const int FriendFieldNumber = 2;
  private global::FriendPb friend_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FriendPb Friend {
    get { return friend_; }
    set {
      friend_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FeedFriendResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FeedFriendResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (!object.Equals(Friend, other.Friend)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ChangeItem.GetHashCode();
    if (friend_ != null) hash ^= Friend.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (friend_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Friend);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (friend_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Friend);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FeedFriendResp other) {
    if (other == null) {
      return;
    }
    changeItem_.Add(other.changeItem_);
    if (other.friend_ != null) {
      if (friend_ == null) {
        friend_ = new global::FriendPb();
      }
      Friend.MergeFrom(other.Friend);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 18: {
          if (friend_ == null) {
            friend_ = new global::FriendPb();
          }
          input.ReadMessage(friend_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 解锁
/// </summary>
public sealed partial class UnlockFriendReq : pb::IMessage<UnlockFriendReq> {
  private static readonly pb::MessageParser<UnlockFriendReq> _parser = new pb::MessageParser<UnlockFriendReq>(() => new UnlockFriendReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UnlockFriendReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FriendReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnlockFriendReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnlockFriendReq(UnlockFriendReq other) : this() {
    friendId_ = other.friendId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnlockFriendReq Clone() {
    return new UnlockFriendReq(this);
  }

  /// <summary>Field number for the "friendId" field.</summary>
  public const int FriendIdFieldNumber = 1;
  private int friendId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FriendId {
    get { return friendId_; }
    set {
      friendId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UnlockFriendReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UnlockFriendReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FriendId != other.FriendId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FriendId != 0) hash ^= FriendId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FriendId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(FriendId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FriendId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FriendId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UnlockFriendReq other) {
    if (other == null) {
      return;
    }
    if (other.FriendId != 0) {
      FriendId = other.FriendId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          FriendId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class UnlockFriendResp : pb::IMessage<UnlockFriendResp> {
  private static readonly pb::MessageParser<UnlockFriendResp> _parser = new pb::MessageParser<UnlockFriendResp>(() => new UnlockFriendResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UnlockFriendResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FriendReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnlockFriendResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnlockFriendResp(UnlockFriendResp other) : this() {
    Friend = other.friend_ != null ? other.Friend.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UnlockFriendResp Clone() {
    return new UnlockFriendResp(this);
  }

  /// <summary>Field number for the "friend" field.</summary>
  public const int FriendFieldNumber = 1;
  private global::FriendPb friend_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FriendPb Friend {
    get { return friend_; }
    set {
      friend_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UnlockFriendResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UnlockFriendResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Friend, other.Friend)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (friend_ != null) hash ^= Friend.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (friend_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Friend);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (friend_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Friend);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UnlockFriendResp other) {
    if (other == null) {
      return;
    }
    if (other.friend_ != null) {
      if (friend_ == null) {
        friend_ = new global::FriendPb();
      }
      Friend.MergeFrom(other.Friend);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (friend_ == null) {
            friend_ = new global::FriendPb();
          }
          input.ReadMessage(friend_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
