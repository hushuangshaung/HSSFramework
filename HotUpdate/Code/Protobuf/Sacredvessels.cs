// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sacredvessels.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from sacredvessels.proto</summary>
public static partial class SacredvesselsReflection {

  #region Descriptor
  /// <summary>File descriptor for sacredvessels.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SacredvesselsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChNzYWNyZWR2ZXNzZWxzLnByb3RvGgpiZWFuLnByb3RvIhkKF0dldFNhY3Jl",
          "ZFZlc3NlbHNJbmZvUmVxIkkKGEdldFNhY3JlZFZlc3NlbHNJbmZvUmVzcBIt",
          "Cg1zYWNyZWRWZXNzZWxzGAEgASgLMhYuUGxheWVyU2FjcmVkVmVzc2Vsc1Bi",
          "IjcKFERyYXdTYWNyZWRWZXNzZWxzUmVxEg4KBmlzRnJlZRgBIAEoBRIPCgdk",
          "cmF3TnVtGAIgASgFIuYBChVEcmF3U2FjcmVkVmVzc2Vsc1Jlc3ASMAoFY2hp",
          "cHMYASADKAsyIS5EcmF3U2FjcmVkVmVzc2Vsc1Jlc3AuQ2hpcHNFbnRyeRI6",
          "CgpjaGFuZ2VJdGVtGAIgAygLMiYuRHJhd1NhY3JlZFZlc3NlbHNSZXNwLkNo",
          "YW5nZUl0ZW1FbnRyeRosCgpDaGlwc0VudHJ5EgsKA2tleRgBIAEoBRINCgV2",
          "YWx1ZRgCIAEoBToCOAEaMQoPQ2hhbmdlSXRlbUVudHJ5EgsKA2tleRgBIAEo",
          "BRINCgV2YWx1ZRgCIAEoBToCOAEiOAoXU2FjcmVkVmVzc2Vsc0xldmVsVXBS",
          "ZXESEAoIY29uZmlnSWQYASABKAUSCwoDb3B0GAIgASgFIrgBChhTYWNyZWRW",
          "ZXNzZWxzTGV2ZWxVcFJlc3ASJwoNc2FjcmVkVmVzc2VscxgBIAEoCzIQLlNh",
          "Y3JlZFZlc3NlbHNQYhI/CgtjaGFuZ2VDaGlwcxgCIAMoCzIqLlNhY3JlZFZl",
          "c3NlbHNMZXZlbFVwUmVzcC5DaGFuZ2VDaGlwc0VudHJ5GjIKEENoYW5nZUNo",
          "aXBzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASIpChVT",
          "YWNyZWRWZXNzZWxzUHV0T25SZXESEAoIY29uZmlnSWQYASABKAUiPwoWU2Fj",
          "cmVkVmVzc2Vsc1B1dE9uUmVzcBIOCgZpc1N1Y2MYASABKAUSFQoNcHV0T25D",
          "b25maWdJZBgCIAEoBSIZChdTYWNyZWRWZXNzZWxzUmVjb3Jkc1JlcSJDChhT",
          "YWNyZWRWZXNzZWxzUmVjb3Jkc1Jlc3ASJwoHcmVjb3JkcxgBIAMoCzIWLlNh",
          "Y3JlZFZlc3NlbHNSZWNvcmRQYkIdCgpjb20uY2IubXNnQg9QQlNhY3JlZFZl",
          "c3NlbHNiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::GetSacredVesselsInfoReq), global::GetSacredVesselsInfoReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetSacredVesselsInfoResp), global::GetSacredVesselsInfoResp.Parser, new[]{ "SacredVessels" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DrawSacredVesselsReq), global::DrawSacredVesselsReq.Parser, new[]{ "IsFree", "DrawNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DrawSacredVesselsResp), global::DrawSacredVesselsResp.Parser, new[]{ "Chips", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::SacredVesselsLevelUpReq), global::SacredVesselsLevelUpReq.Parser, new[]{ "ConfigId", "Opt" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SacredVesselsLevelUpResp), global::SacredVesselsLevelUpResp.Parser, new[]{ "SacredVessels", "ChangeChips" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::SacredVesselsPutOnReq), global::SacredVesselsPutOnReq.Parser, new[]{ "ConfigId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SacredVesselsPutOnResp), global::SacredVesselsPutOnResp.Parser, new[]{ "IsSucc", "PutOnConfigId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SacredVesselsRecordsReq), global::SacredVesselsRecordsReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SacredVesselsRecordsResp), global::SacredVesselsRecordsResp.Parser, new[]{ "Records" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// 圣器信息
/// </summary>
public sealed partial class GetSacredVesselsInfoReq : pb::IMessage<GetSacredVesselsInfoReq> {
  private static readonly pb::MessageParser<GetSacredVesselsInfoReq> _parser = new pb::MessageParser<GetSacredVesselsInfoReq>(() => new GetSacredVesselsInfoReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetSacredVesselsInfoReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SacredvesselsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSacredVesselsInfoReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSacredVesselsInfoReq(GetSacredVesselsInfoReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSacredVesselsInfoReq Clone() {
    return new GetSacredVesselsInfoReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetSacredVesselsInfoReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetSacredVesselsInfoReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetSacredVesselsInfoReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class GetSacredVesselsInfoResp : pb::IMessage<GetSacredVesselsInfoResp> {
  private static readonly pb::MessageParser<GetSacredVesselsInfoResp> _parser = new pb::MessageParser<GetSacredVesselsInfoResp>(() => new GetSacredVesselsInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetSacredVesselsInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SacredvesselsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSacredVesselsInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSacredVesselsInfoResp(GetSacredVesselsInfoResp other) : this() {
    SacredVessels = other.sacredVessels_ != null ? other.SacredVessels.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSacredVesselsInfoResp Clone() {
    return new GetSacredVesselsInfoResp(this);
  }

  /// <summary>Field number for the "sacredVessels" field.</summary>
  public const int SacredVesselsFieldNumber = 1;
  private global::PlayerSacredVesselsPb sacredVessels_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerSacredVesselsPb SacredVessels {
    get { return sacredVessels_; }
    set {
      sacredVessels_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetSacredVesselsInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetSacredVesselsInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SacredVessels, other.SacredVessels)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (sacredVessels_ != null) hash ^= SacredVessels.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (sacredVessels_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(SacredVessels);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (sacredVessels_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SacredVessels);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetSacredVesselsInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.sacredVessels_ != null) {
      if (sacredVessels_ == null) {
        sacredVessels_ = new global::PlayerSacredVesselsPb();
      }
      SacredVessels.MergeFrom(other.SacredVessels);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (sacredVessels_ == null) {
            sacredVessels_ = new global::PlayerSacredVesselsPb();
          }
          input.ReadMessage(sacredVessels_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 抽圣器
/// </summary>
public sealed partial class DrawSacredVesselsReq : pb::IMessage<DrawSacredVesselsReq> {
  private static readonly pb::MessageParser<DrawSacredVesselsReq> _parser = new pb::MessageParser<DrawSacredVesselsReq>(() => new DrawSacredVesselsReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DrawSacredVesselsReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SacredvesselsReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawSacredVesselsReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawSacredVesselsReq(DrawSacredVesselsReq other) : this() {
    isFree_ = other.isFree_;
    drawNum_ = other.drawNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawSacredVesselsReq Clone() {
    return new DrawSacredVesselsReq(this);
  }

  /// <summary>Field number for the "isFree" field.</summary>
  public const int IsFreeFieldNumber = 1;
  private int isFree_;
  /// <summary>
  /// 1免费， 0使用抽奖券
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsFree {
    get { return isFree_; }
    set {
      isFree_ = value;
    }
  }

  /// <summary>Field number for the "drawNum" field.</summary>
  public const int DrawNumFieldNumber = 2;
  private int drawNum_;
  /// <summary>
  /// 抽卡数量，验证：1或者10
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DrawNum {
    get { return drawNum_; }
    set {
      drawNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DrawSacredVesselsReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DrawSacredVesselsReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsFree != other.IsFree) return false;
    if (DrawNum != other.DrawNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsFree != 0) hash ^= IsFree.GetHashCode();
    if (DrawNum != 0) hash ^= DrawNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsFree != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(IsFree);
    }
    if (DrawNum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DrawNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsFree != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFree);
    }
    if (DrawNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DrawSacredVesselsReq other) {
    if (other == null) {
      return;
    }
    if (other.IsFree != 0) {
      IsFree = other.IsFree;
    }
    if (other.DrawNum != 0) {
      DrawNum = other.DrawNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          IsFree = input.ReadInt32();
          break;
        }
        case 16: {
          DrawNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class DrawSacredVesselsResp : pb::IMessage<DrawSacredVesselsResp> {
  private static readonly pb::MessageParser<DrawSacredVesselsResp> _parser = new pb::MessageParser<DrawSacredVesselsResp>(() => new DrawSacredVesselsResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DrawSacredVesselsResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SacredvesselsReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawSacredVesselsResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawSacredVesselsResp(DrawSacredVesselsResp other) : this() {
    chips_ = other.chips_.Clone();
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawSacredVesselsResp Clone() {
    return new DrawSacredVesselsResp(this);
  }

  /// <summary>Field number for the "chips" field.</summary>
  public const int ChipsFieldNumber = 1;
  private static readonly pbc::MapField<int, int>.Codec _map_chips_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
  private readonly pbc::MapField<int, int> chips_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> Chips {
    get { return chips_; }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具,客户端直接k,v覆盖掉道具原有的k,v
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DrawSacredVesselsResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DrawSacredVesselsResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!Chips.Equals(other.Chips)) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= Chips.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    chips_.WriteTo(output, _map_chips_codec);
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += chips_.CalculateSize(_map_chips_codec);
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DrawSacredVesselsResp other) {
    if (other == null) {
      return;
    }
    chips_.Add(other.chips_);
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          chips_.AddEntriesFrom(input, _map_chips_codec);
          break;
        }
        case 18: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// level up
/// </summary>
public sealed partial class SacredVesselsLevelUpReq : pb::IMessage<SacredVesselsLevelUpReq> {
  private static readonly pb::MessageParser<SacredVesselsLevelUpReq> _parser = new pb::MessageParser<SacredVesselsLevelUpReq>(() => new SacredVesselsLevelUpReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SacredVesselsLevelUpReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SacredvesselsReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsLevelUpReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsLevelUpReq(SacredVesselsLevelUpReq other) : this() {
    configId_ = other.configId_;
    opt_ = other.opt_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsLevelUpReq Clone() {
    return new SacredVesselsLevelUpReq(this);
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 1;
  private int configId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  /// <summary>Field number for the "opt" field.</summary>
  public const int OptFieldNumber = 2;
  private int opt_;
  /// <summary>
  /// 1激活，2升级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Opt {
    get { return opt_; }
    set {
      opt_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SacredVesselsLevelUpReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SacredVesselsLevelUpReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigId != other.ConfigId) return false;
    if (Opt != other.Opt) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    if (Opt != 0) hash ^= Opt.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConfigId);
    }
    if (Opt != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Opt);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    if (Opt != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Opt);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SacredVesselsLevelUpReq other) {
    if (other == null) {
      return;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
    if (other.Opt != 0) {
      Opt = other.Opt;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ConfigId = input.ReadInt32();
          break;
        }
        case 16: {
          Opt = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SacredVesselsLevelUpResp : pb::IMessage<SacredVesselsLevelUpResp> {
  private static readonly pb::MessageParser<SacredVesselsLevelUpResp> _parser = new pb::MessageParser<SacredVesselsLevelUpResp>(() => new SacredVesselsLevelUpResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SacredVesselsLevelUpResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SacredvesselsReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsLevelUpResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsLevelUpResp(SacredVesselsLevelUpResp other) : this() {
    SacredVessels = other.sacredVessels_ != null ? other.SacredVessels.Clone() : null;
    changeChips_ = other.changeChips_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsLevelUpResp Clone() {
    return new SacredVesselsLevelUpResp(this);
  }

  /// <summary>Field number for the "sacredVessels" field.</summary>
  public const int SacredVesselsFieldNumber = 1;
  private global::SacredVesselsPb sacredVessels_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SacredVesselsPb SacredVessels {
    get { return sacredVessels_; }
    set {
      sacredVessels_ = value;
    }
  }

  /// <summary>Field number for the "changeChips" field.</summary>
  public const int ChangeChipsFieldNumber = 2;
  private static readonly pbc::MapField<int, int>.Codec _map_changeChips_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
  private readonly pbc::MapField<int, int> changeChips_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeChips {
    get { return changeChips_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SacredVesselsLevelUpResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SacredVesselsLevelUpResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SacredVessels, other.SacredVessels)) return false;
    if (!ChangeChips.Equals(other.ChangeChips)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (sacredVessels_ != null) hash ^= SacredVessels.GetHashCode();
    hash ^= ChangeChips.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (sacredVessels_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(SacredVessels);
    }
    changeChips_.WriteTo(output, _map_changeChips_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (sacredVessels_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SacredVessels);
    }
    size += changeChips_.CalculateSize(_map_changeChips_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SacredVesselsLevelUpResp other) {
    if (other == null) {
      return;
    }
    if (other.sacredVessels_ != null) {
      if (sacredVessels_ == null) {
        sacredVessels_ = new global::SacredVesselsPb();
      }
      SacredVessels.MergeFrom(other.SacredVessels);
    }
    changeChips_.Add(other.changeChips_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (sacredVessels_ == null) {
            sacredVessels_ = new global::SacredVesselsPb();
          }
          input.ReadMessage(sacredVessels_);
          break;
        }
        case 18: {
          changeChips_.AddEntriesFrom(input, _map_changeChips_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 装备
/// </summary>
public sealed partial class SacredVesselsPutOnReq : pb::IMessage<SacredVesselsPutOnReq> {
  private static readonly pb::MessageParser<SacredVesselsPutOnReq> _parser = new pb::MessageParser<SacredVesselsPutOnReq>(() => new SacredVesselsPutOnReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SacredVesselsPutOnReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SacredvesselsReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsPutOnReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsPutOnReq(SacredVesselsPutOnReq other) : this() {
    configId_ = other.configId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsPutOnReq Clone() {
    return new SacredVesselsPutOnReq(this);
  }

  /// <summary>Field number for the "configId" field.</summary>
  public const int ConfigIdFieldNumber = 1;
  private int configId_;
  /// <summary>
  /// 伙伴id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ConfigId {
    get { return configId_; }
    set {
      configId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SacredVesselsPutOnReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SacredVesselsPutOnReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigId != other.ConfigId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ConfigId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SacredVesselsPutOnReq other) {
    if (other == null) {
      return;
    }
    if (other.ConfigId != 0) {
      ConfigId = other.ConfigId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ConfigId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SacredVesselsPutOnResp : pb::IMessage<SacredVesselsPutOnResp> {
  private static readonly pb::MessageParser<SacredVesselsPutOnResp> _parser = new pb::MessageParser<SacredVesselsPutOnResp>(() => new SacredVesselsPutOnResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SacredVesselsPutOnResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SacredvesselsReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsPutOnResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsPutOnResp(SacredVesselsPutOnResp other) : this() {
    isSucc_ = other.isSucc_;
    putOnConfigId_ = other.putOnConfigId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsPutOnResp Clone() {
    return new SacredVesselsPutOnResp(this);
  }

  /// <summary>Field number for the "isSucc" field.</summary>
  public const int IsSuccFieldNumber = 1;
  private int isSucc_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int IsSucc {
    get { return isSucc_; }
    set {
      isSucc_ = value;
    }
  }

  /// <summary>Field number for the "putOnConfigId" field.</summary>
  public const int PutOnConfigIdFieldNumber = 2;
  private int putOnConfigId_;
  /// <summary>
  /// 上阵圣器Id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PutOnConfigId {
    get { return putOnConfigId_; }
    set {
      putOnConfigId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SacredVesselsPutOnResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SacredVesselsPutOnResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IsSucc != other.IsSucc) return false;
    if (PutOnConfigId != other.PutOnConfigId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IsSucc != 0) hash ^= IsSucc.GetHashCode();
    if (PutOnConfigId != 0) hash ^= PutOnConfigId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IsSucc != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(IsSucc);
    }
    if (PutOnConfigId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(PutOnConfigId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IsSucc != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsSucc);
    }
    if (PutOnConfigId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PutOnConfigId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SacredVesselsPutOnResp other) {
    if (other == null) {
      return;
    }
    if (other.IsSucc != 0) {
      IsSucc = other.IsSucc;
    }
    if (other.PutOnConfigId != 0) {
      PutOnConfigId = other.PutOnConfigId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          IsSucc = input.ReadInt32();
          break;
        }
        case 16: {
          PutOnConfigId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// record
/// </summary>
public sealed partial class SacredVesselsRecordsReq : pb::IMessage<SacredVesselsRecordsReq> {
  private static readonly pb::MessageParser<SacredVesselsRecordsReq> _parser = new pb::MessageParser<SacredVesselsRecordsReq>(() => new SacredVesselsRecordsReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SacredVesselsRecordsReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SacredvesselsReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsRecordsReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsRecordsReq(SacredVesselsRecordsReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsRecordsReq Clone() {
    return new SacredVesselsRecordsReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SacredVesselsRecordsReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SacredVesselsRecordsReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SacredVesselsRecordsReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class SacredVesselsRecordsResp : pb::IMessage<SacredVesselsRecordsResp> {
  private static readonly pb::MessageParser<SacredVesselsRecordsResp> _parser = new pb::MessageParser<SacredVesselsRecordsResp>(() => new SacredVesselsRecordsResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SacredVesselsRecordsResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SacredvesselsReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsRecordsResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsRecordsResp(SacredVesselsRecordsResp other) : this() {
    records_ = other.records_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SacredVesselsRecordsResp Clone() {
    return new SacredVesselsRecordsResp(this);
  }

  /// <summary>Field number for the "records" field.</summary>
  public const int RecordsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SacredVesselsRecordPb> _repeated_records_codec
      = pb::FieldCodec.ForMessage(10, global::SacredVesselsRecordPb.Parser);
  private readonly pbc::RepeatedField<global::SacredVesselsRecordPb> records_ = new pbc::RepeatedField<global::SacredVesselsRecordPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SacredVesselsRecordPb> Records {
    get { return records_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SacredVesselsRecordsResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SacredVesselsRecordsResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!records_.Equals(other.records_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= records_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    records_.WriteTo(output, _repeated_records_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += records_.CalculateSize(_repeated_records_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SacredVesselsRecordsResp other) {
    if (other == null) {
      return;
    }
    records_.Add(other.records_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          records_.AddEntriesFrom(input, _repeated_records_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
