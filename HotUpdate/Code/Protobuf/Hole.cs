// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hole.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Hole.proto</summary>
public static partial class HoleReflection {

  #region Descriptor
  /// <summary>File descriptor for Hole.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static HoleReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpIb2xlLnByb3RvGgpiZWFuLnByb3RvIhkKC0hvbGVJbmZvUmVxEgoKAmlk",
          "GAEgASgFIiUKDEhvbGVJbmZvUmVzcBIVCgRob2xlGAEgASgLMgcuSG9sZVBi",
          "Ii8KDkhvbGVSZWZyZXNoUmVxEgwKBGNvc3QYASABKAUSDwoHYWR0aW1lcxgC",
          "IAEoBSK8AQoPSG9sZVJlZnJlc2hSZXNwEhUKBGhvbGUYASABKAsyBy5Ib2xl",
          "UGISEwoLYWRSZXNSVGltZXMYAiABKAUSFAoMaXRlbVJlc1JDb3N0GAMgASgF",
          "EjQKCmNoYW5nZUl0ZW0YBCADKAsyIC5Ib2xlUmVmcmVzaFJlc3AuQ2hhbmdl",
          "SXRlbUVudHJ5GjEKD0NoYW5nZUl0ZW1FbnRyeRILCgNrZXkYASABKAUSDQoF",
          "dmFsdWUYAiABKAU6AjgBIhQKEkhvbGVSZWZyZXNoQXV0b1JlcSIuChNIb2xl",
          "UmVmcmVzaEF1dG9SZXNwEhcKA3JlcxgBIAEoCzIKLkhvbGVSZXNQYiIsCgxS",
          "ZXNHYXRoZXJSZXESCwoDcG9zGAEgASgFEg8KB2NoaWxkaWQYAiADKAUiIwoN",
          "UmVzR2F0aGVyUmVzcBISCgpnYXRoZXJUaW1lGAEgASgFIh4KD1Jlc0dhdGhl",
          "ckVuZFJlcRILCgNwb3MYASABKAUiPAoQUmVzR2F0aGVyRW5kUmVzcBILCgNw",
          "b3MYASABKAUSDgoGaXRlbWlkGAIgASgFEgsKA251bRgDIAEoBSILCglTbmF0",
          "Y2hSZXEiQwoKU25hdGNoUmVzcBIZCghqb2luSG9sZRgBIAMoCzIHLkhvbGVQ",
          "YhIaCgllbmVteUhvbGUYAiADKAsyBy5Ib2xlUGIiEAoOSG9sZUxvZ0xpc3RS",
          "ZXEiKgoPSG9sZUxvZ0xpc3RSZXNwEhcKA2xvZxgBIAMoCzIKLkhvbGVMb2dQ",
          "YiIQCg5DaGlsZERldGFpbFJlcSIxCg9DaGlsZERldGFpbFJlc3ASHgoGZGV0",
          "YWlsGAEgASgLMg4uQ2hpbGREZXRhaWxQYiINCgtDaGlsZEJ1eVJlcSJFCgxD",
          "aGlsZEJ1eVJlc3ASHgoGZGV0YWlsGAEgASgLMg4uQ2hpbGREZXRhaWxQYhIV",
          "CgRpdGVtGAIgASgLMgcuSXRlbVBiQhQKCmNvbS5jYi5tc2dCBlBCSG9sZWIG",
          "cHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::HoleInfoReq), global::HoleInfoReq.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HoleInfoResp), global::HoleInfoResp.Parser, new[]{ "Hole" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HoleRefreshReq), global::HoleRefreshReq.Parser, new[]{ "Cost", "Adtimes" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HoleRefreshResp), global::HoleRefreshResp.Parser, new[]{ "Hole", "AdResRTimes", "ItemResRCost", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::HoleRefreshAutoReq), global::HoleRefreshAutoReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HoleRefreshAutoResp), global::HoleRefreshAutoResp.Parser, new[]{ "Res" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResGatherReq), global::ResGatherReq.Parser, new[]{ "Pos", "Childid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResGatherResp), global::ResGatherResp.Parser, new[]{ "GatherTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResGatherEndReq), global::ResGatherEndReq.Parser, new[]{ "Pos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResGatherEndResp), global::ResGatherEndResp.Parser, new[]{ "Pos", "Itemid", "Num" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SnatchReq), global::SnatchReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SnatchResp), global::SnatchResp.Parser, new[]{ "JoinHole", "EnemyHole" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HoleLogListReq), global::HoleLogListReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HoleLogListResp), global::HoleLogListResp.Parser, new[]{ "Log" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChildDetailReq), global::ChildDetailReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChildDetailResp), global::ChildDetailResp.Parser, new[]{ "Detail" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChildBuyReq), global::ChildBuyReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChildBuyResp), global::ChildBuyResp.Parser, new[]{ "Detail", "Item" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
///洞天信息
/// </summary>
public sealed partial class HoleInfoReq : pb::IMessage<HoleInfoReq> {
  private static readonly pb::MessageParser<HoleInfoReq> _parser = new pb::MessageParser<HoleInfoReq>(() => new HoleInfoReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HoleInfoReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleInfoReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleInfoReq(HoleInfoReq other) : this() {
    id_ = other.id_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleInfoReq Clone() {
    return new HoleInfoReq(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HoleInfoReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HoleInfoReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HoleInfoReq other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class HoleInfoResp : pb::IMessage<HoleInfoResp> {
  private static readonly pb::MessageParser<HoleInfoResp> _parser = new pb::MessageParser<HoleInfoResp>(() => new HoleInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HoleInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleInfoResp(HoleInfoResp other) : this() {
    Hole = other.hole_ != null ? other.Hole.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleInfoResp Clone() {
    return new HoleInfoResp(this);
  }

  /// <summary>Field number for the "hole" field.</summary>
  public const int HoleFieldNumber = 1;
  private global::HolePb hole_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HolePb Hole {
    get { return hole_; }
    set {
      hole_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HoleInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HoleInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Hole, other.Hole)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (hole_ != null) hash ^= Hole.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (hole_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Hole);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (hole_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hole);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HoleInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.hole_ != null) {
      if (hole_ == null) {
        hole_ = new global::HolePb();
      }
      Hole.MergeFrom(other.Hole);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (hole_ == null) {
            hole_ = new global::HolePb();
          }
          input.ReadMessage(hole_);
          break;
        }
      }
    }
  }

}

/// <summary>
///手动刷新
/// </summary>
public sealed partial class HoleRefreshReq : pb::IMessage<HoleRefreshReq> {
  private static readonly pb::MessageParser<HoleRefreshReq> _parser = new pb::MessageParser<HoleRefreshReq>(() => new HoleRefreshReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HoleRefreshReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleRefreshReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleRefreshReq(HoleRefreshReq other) : this() {
    cost_ = other.cost_;
    adtimes_ = other.adtimes_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleRefreshReq Clone() {
    return new HoleRefreshReq(this);
  }

  /// <summary>Field number for the "cost" field.</summary>
  public const int CostFieldNumber = 1;
  private int cost_;
  /// <summary>
  ///道具消耗
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cost {
    get { return cost_; }
    set {
      cost_ = value;
    }
  }

  /// <summary>Field number for the "adtimes" field.</summary>
  public const int AdtimesFieldNumber = 2;
  private int adtimes_;
  /// <summary>
  ///广告刷新次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Adtimes {
    get { return adtimes_; }
    set {
      adtimes_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HoleRefreshReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HoleRefreshReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Cost != other.Cost) return false;
    if (Adtimes != other.Adtimes) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Cost != 0) hash ^= Cost.GetHashCode();
    if (Adtimes != 0) hash ^= Adtimes.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Cost != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Cost);
    }
    if (Adtimes != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Adtimes);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Cost != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
    }
    if (Adtimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Adtimes);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HoleRefreshReq other) {
    if (other == null) {
      return;
    }
    if (other.Cost != 0) {
      Cost = other.Cost;
    }
    if (other.Adtimes != 0) {
      Adtimes = other.Adtimes;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Cost = input.ReadInt32();
          break;
        }
        case 16: {
          Adtimes = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class HoleRefreshResp : pb::IMessage<HoleRefreshResp> {
  private static readonly pb::MessageParser<HoleRefreshResp> _parser = new pb::MessageParser<HoleRefreshResp>(() => new HoleRefreshResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HoleRefreshResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleRefreshResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleRefreshResp(HoleRefreshResp other) : this() {
    Hole = other.hole_ != null ? other.Hole.Clone() : null;
    adResRTimes_ = other.adResRTimes_;
    itemResRCost_ = other.itemResRCost_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleRefreshResp Clone() {
    return new HoleRefreshResp(this);
  }

  /// <summary>Field number for the "hole" field.</summary>
  public const int HoleFieldNumber = 1;
  private global::HolePb hole_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HolePb Hole {
    get { return hole_; }
    set {
      hole_ = value;
    }
  }

  /// <summary>Field number for the "adResRTimes" field.</summary>
  public const int AdResRTimesFieldNumber = 2;
  private int adResRTimes_;
  /// <summary>
  ///广告刷新次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AdResRTimes {
    get { return adResRTimes_; }
    set {
      adResRTimes_ = value;
    }
  }

  /// <summary>Field number for the "itemResRCost" field.</summary>
  public const int ItemResRCostFieldNumber = 3;
  private int itemResRCost_;
  /// <summary>
  ///道具刷新资源消耗
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ItemResRCost {
    get { return itemResRCost_; }
    set {
      itemResRCost_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具，直接用kv覆盖道具列表即可,&lt;1001,10>说明经过一系列改动后，1001这个道具还剩10个
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HoleRefreshResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HoleRefreshResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Hole, other.Hole)) return false;
    if (AdResRTimes != other.AdResRTimes) return false;
    if (ItemResRCost != other.ItemResRCost) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (hole_ != null) hash ^= Hole.GetHashCode();
    if (AdResRTimes != 0) hash ^= AdResRTimes.GetHashCode();
    if (ItemResRCost != 0) hash ^= ItemResRCost.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (hole_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Hole);
    }
    if (AdResRTimes != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(AdResRTimes);
    }
    if (ItemResRCost != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ItemResRCost);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (hole_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hole);
    }
    if (AdResRTimes != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdResRTimes);
    }
    if (ItemResRCost != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemResRCost);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HoleRefreshResp other) {
    if (other == null) {
      return;
    }
    if (other.hole_ != null) {
      if (hole_ == null) {
        hole_ = new global::HolePb();
      }
      Hole.MergeFrom(other.Hole);
    }
    if (other.AdResRTimes != 0) {
      AdResRTimes = other.AdResRTimes;
    }
    if (other.ItemResRCost != 0) {
      ItemResRCost = other.ItemResRCost;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (hole_ == null) {
            hole_ = new global::HolePb();
          }
          input.ReadMessage(hole_);
          break;
        }
        case 16: {
          AdResRTimes = input.ReadInt32();
          break;
        }
        case 24: {
          ItemResRCost = input.ReadInt32();
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///自动刷新
/// </summary>
public sealed partial class HoleRefreshAutoReq : pb::IMessage<HoleRefreshAutoReq> {
  private static readonly pb::MessageParser<HoleRefreshAutoReq> _parser = new pb::MessageParser<HoleRefreshAutoReq>(() => new HoleRefreshAutoReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HoleRefreshAutoReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleRefreshAutoReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleRefreshAutoReq(HoleRefreshAutoReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleRefreshAutoReq Clone() {
    return new HoleRefreshAutoReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HoleRefreshAutoReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HoleRefreshAutoReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HoleRefreshAutoReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class HoleRefreshAutoResp : pb::IMessage<HoleRefreshAutoResp> {
  private static readonly pb::MessageParser<HoleRefreshAutoResp> _parser = new pb::MessageParser<HoleRefreshAutoResp>(() => new HoleRefreshAutoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HoleRefreshAutoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleRefreshAutoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleRefreshAutoResp(HoleRefreshAutoResp other) : this() {
    Res = other.res_ != null ? other.Res.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleRefreshAutoResp Clone() {
    return new HoleRefreshAutoResp(this);
  }

  /// <summary>Field number for the "res" field.</summary>
  public const int ResFieldNumber = 1;
  private global::HoleResPb res_;
  /// <summary>
  ///新刷出来的资源
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HoleResPb Res {
    get { return res_; }
    set {
      res_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HoleRefreshAutoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HoleRefreshAutoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Res, other.Res)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (res_ != null) hash ^= Res.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (res_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Res);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (res_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Res);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HoleRefreshAutoResp other) {
    if (other == null) {
      return;
    }
    if (other.res_ != null) {
      if (res_ == null) {
        res_ = new global::HoleResPb();
      }
      Res.MergeFrom(other.Res);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (res_ == null) {
            res_ = new global::HoleResPb();
          }
          input.ReadMessage(res_);
          break;
        }
      }
    }
  }

}

/// <summary>
///资源采集 (p0版本只采自己家)
/// </summary>
public sealed partial class ResGatherReq : pb::IMessage<ResGatherReq> {
  private static readonly pb::MessageParser<ResGatherReq> _parser = new pb::MessageParser<ResGatherReq>(() => new ResGatherReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ResGatherReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResGatherReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResGatherReq(ResGatherReq other) : this() {
    pos_ = other.pos_;
    childid_ = other.childid_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResGatherReq Clone() {
    return new ResGatherReq(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private int pos_;
  /// <summary>
  ///资源位置
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "childid" field.</summary>
  public const int ChildidFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_childid_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> childid_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///仙童id --如果为空代表取消采集
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Childid {
    get { return childid_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ResGatherReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ResGatherReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    if(!childid_.Equals(other.childid_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pos != 0) hash ^= Pos.GetHashCode();
    hash ^= childid_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pos != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
    childid_.WriteTo(output, _repeated_childid_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    size += childid_.CalculateSize(_repeated_childid_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ResGatherReq other) {
    if (other == null) {
      return;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    childid_.Add(other.childid_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          childid_.AddEntriesFrom(input, _repeated_childid_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ResGatherResp : pb::IMessage<ResGatherResp> {
  private static readonly pb::MessageParser<ResGatherResp> _parser = new pb::MessageParser<ResGatherResp>(() => new ResGatherResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ResGatherResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResGatherResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResGatherResp(ResGatherResp other) : this() {
    gatherTime_ = other.gatherTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResGatherResp Clone() {
    return new ResGatherResp(this);
  }

  /// <summary>Field number for the "gatherTime" field.</summary>
  public const int GatherTimeFieldNumber = 1;
  private int gatherTime_;
  /// <summary>
  ///采集结束时间 --如果=0代表资源回到空闲状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GatherTime {
    get { return gatherTime_; }
    set {
      gatherTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ResGatherResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ResGatherResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GatherTime != other.GatherTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GatherTime != 0) hash ^= GatherTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GatherTime != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(GatherTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GatherTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GatherTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ResGatherResp other) {
    if (other == null) {
      return;
    }
    if (other.GatherTime != 0) {
      GatherTime = other.GatherTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GatherTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///资源采集结束
/// </summary>
public sealed partial class ResGatherEndReq : pb::IMessage<ResGatherEndReq> {
  private static readonly pb::MessageParser<ResGatherEndReq> _parser = new pb::MessageParser<ResGatherEndReq>(() => new ResGatherEndReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ResGatherEndReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResGatherEndReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResGatherEndReq(ResGatherEndReq other) : this() {
    pos_ = other.pos_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResGatherEndReq Clone() {
    return new ResGatherEndReq(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private int pos_;
  /// <summary>
  ///资源位置
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ResGatherEndReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ResGatherEndReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pos != 0) hash ^= Pos.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pos != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ResGatherEndReq other) {
    if (other == null) {
      return;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ResGatherEndResp : pb::IMessage<ResGatherEndResp> {
  private static readonly pb::MessageParser<ResGatherEndResp> _parser = new pb::MessageParser<ResGatherEndResp>(() => new ResGatherEndResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ResGatherEndResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResGatherEndResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResGatherEndResp(ResGatherEndResp other) : this() {
    pos_ = other.pos_;
    itemid_ = other.itemid_;
    num_ = other.num_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResGatherEndResp Clone() {
    return new ResGatherEndResp(this);
  }

  /// <summary>Field number for the "pos" field.</summary>
  public const int PosFieldNumber = 1;
  private int pos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  /// <summary>Field number for the "itemid" field.</summary>
  public const int ItemidFieldNumber = 2;
  private int itemid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Itemid {
    get { return itemid_; }
    set {
      itemid_ = value;
    }
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 3;
  private int num_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ResGatherEndResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ResGatherEndResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pos != other.Pos) return false;
    if (Itemid != other.Itemid) return false;
    if (Num != other.Num) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Pos != 0) hash ^= Pos.GetHashCode();
    if (Itemid != 0) hash ^= Itemid.GetHashCode();
    if (Num != 0) hash ^= Num.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Pos != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pos);
    }
    if (Itemid != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Itemid);
    }
    if (Num != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Num);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Pos != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
    }
    if (Itemid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Itemid);
    }
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ResGatherEndResp other) {
    if (other == null) {
      return;
    }
    if (other.Pos != 0) {
      Pos = other.Pos;
    }
    if (other.Itemid != 0) {
      Itemid = other.Itemid;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pos = input.ReadInt32();
          break;
        }
        case 16: {
          Itemid = input.ReadInt32();
          break;
        }
        case 24: {
          Num = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///抢夺列表 （p1暂时不做）
/// </summary>
public sealed partial class SnatchReq : pb::IMessage<SnatchReq> {
  private static readonly pb::MessageParser<SnatchReq> _parser = new pb::MessageParser<SnatchReq>(() => new SnatchReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SnatchReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SnatchReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SnatchReq(SnatchReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SnatchReq Clone() {
    return new SnatchReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SnatchReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SnatchReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SnatchReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class SnatchResp : pb::IMessage<SnatchResp> {
  private static readonly pb::MessageParser<SnatchResp> _parser = new pb::MessageParser<SnatchResp>(() => new SnatchResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SnatchResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SnatchResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SnatchResp(SnatchResp other) : this() {
    joinHole_ = other.joinHole_.Clone();
    enemyHole_ = other.enemyHole_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SnatchResp Clone() {
    return new SnatchResp(this);
  }

  /// <summary>Field number for the "joinHole" field.</summary>
  public const int JoinHoleFieldNumber = 1;
  private static readonly pb::FieldCodec<global::HolePb> _repeated_joinHole_codec
      = pb::FieldCodec.ForMessage(10, global::HolePb.Parser);
  private readonly pbc::RepeatedField<global::HolePb> joinHole_ = new pbc::RepeatedField<global::HolePb>();
  /// <summary>
  ///相邻的洞天
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::HolePb> JoinHole {
    get { return joinHole_; }
  }

  /// <summary>Field number for the "enemyHole" field.</summary>
  public const int EnemyHoleFieldNumber = 2;
  private static readonly pb::FieldCodec<global::HolePb> _repeated_enemyHole_codec
      = pb::FieldCodec.ForMessage(18, global::HolePb.Parser);
  private readonly pbc::RepeatedField<global::HolePb> enemyHole_ = new pbc::RepeatedField<global::HolePb>();
  /// <summary>
  ///仇人的洞天
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::HolePb> EnemyHole {
    get { return enemyHole_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SnatchResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SnatchResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!joinHole_.Equals(other.joinHole_)) return false;
    if(!enemyHole_.Equals(other.enemyHole_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= joinHole_.GetHashCode();
    hash ^= enemyHole_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    joinHole_.WriteTo(output, _repeated_joinHole_codec);
    enemyHole_.WriteTo(output, _repeated_enemyHole_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += joinHole_.CalculateSize(_repeated_joinHole_codec);
    size += enemyHole_.CalculateSize(_repeated_enemyHole_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SnatchResp other) {
    if (other == null) {
      return;
    }
    joinHole_.Add(other.joinHole_);
    enemyHole_.Add(other.enemyHole_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          joinHole_.AddEntriesFrom(input, _repeated_joinHole_codec);
          break;
        }
        case 18: {
          enemyHole_.AddEntriesFrom(input, _repeated_enemyHole_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///洞天日志列表
/// </summary>
public sealed partial class HoleLogListReq : pb::IMessage<HoleLogListReq> {
  private static readonly pb::MessageParser<HoleLogListReq> _parser = new pb::MessageParser<HoleLogListReq>(() => new HoleLogListReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HoleLogListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleLogListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleLogListReq(HoleLogListReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleLogListReq Clone() {
    return new HoleLogListReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HoleLogListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HoleLogListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HoleLogListReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class HoleLogListResp : pb::IMessage<HoleLogListResp> {
  private static readonly pb::MessageParser<HoleLogListResp> _parser = new pb::MessageParser<HoleLogListResp>(() => new HoleLogListResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HoleLogListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleLogListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleLogListResp(HoleLogListResp other) : this() {
    log_ = other.log_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HoleLogListResp Clone() {
    return new HoleLogListResp(this);
  }

  /// <summary>Field number for the "log" field.</summary>
  public const int LogFieldNumber = 1;
  private static readonly pb::FieldCodec<global::HoleLogPb> _repeated_log_codec
      = pb::FieldCodec.ForMessage(10, global::HoleLogPb.Parser);
  private readonly pbc::RepeatedField<global::HoleLogPb> log_ = new pbc::RepeatedField<global::HoleLogPb>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::HoleLogPb> Log {
    get { return log_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HoleLogListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HoleLogListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!log_.Equals(other.log_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= log_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    log_.WriteTo(output, _repeated_log_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += log_.CalculateSize(_repeated_log_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HoleLogListResp other) {
    if (other == null) {
      return;
    }
    log_.Add(other.log_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          log_.AddEntriesFrom(input, _repeated_log_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///仙童详情
/// </summary>
public sealed partial class ChildDetailReq : pb::IMessage<ChildDetailReq> {
  private static readonly pb::MessageParser<ChildDetailReq> _parser = new pb::MessageParser<ChildDetailReq>(() => new ChildDetailReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChildDetailReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildDetailReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildDetailReq(ChildDetailReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildDetailReq Clone() {
    return new ChildDetailReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChildDetailReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChildDetailReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChildDetailReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class ChildDetailResp : pb::IMessage<ChildDetailResp> {
  private static readonly pb::MessageParser<ChildDetailResp> _parser = new pb::MessageParser<ChildDetailResp>(() => new ChildDetailResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChildDetailResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildDetailResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildDetailResp(ChildDetailResp other) : this() {
    Detail = other.detail_ != null ? other.Detail.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildDetailResp Clone() {
    return new ChildDetailResp(this);
  }

  /// <summary>Field number for the "detail" field.</summary>
  public const int DetailFieldNumber = 1;
  private global::ChildDetailPb detail_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ChildDetailPb Detail {
    get { return detail_; }
    set {
      detail_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChildDetailResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChildDetailResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Detail, other.Detail)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (detail_ != null) hash ^= Detail.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (detail_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Detail);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (detail_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Detail);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChildDetailResp other) {
    if (other == null) {
      return;
    }
    if (other.detail_ != null) {
      if (detail_ == null) {
        detail_ = new global::ChildDetailPb();
      }
      Detail.MergeFrom(other.Detail);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (detail_ == null) {
            detail_ = new global::ChildDetailPb();
          }
          input.ReadMessage(detail_);
          break;
        }
      }
    }
  }

}

/// <summary>
///仙童购买
/// </summary>
public sealed partial class ChildBuyReq : pb::IMessage<ChildBuyReq> {
  private static readonly pb::MessageParser<ChildBuyReq> _parser = new pb::MessageParser<ChildBuyReq>(() => new ChildBuyReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChildBuyReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildBuyReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildBuyReq(ChildBuyReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildBuyReq Clone() {
    return new ChildBuyReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChildBuyReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChildBuyReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChildBuyReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class ChildBuyResp : pb::IMessage<ChildBuyResp> {
  private static readonly pb::MessageParser<ChildBuyResp> _parser = new pb::MessageParser<ChildBuyResp>(() => new ChildBuyResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChildBuyResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::HoleReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildBuyResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildBuyResp(ChildBuyResp other) : this() {
    Detail = other.detail_ != null ? other.Detail.Clone() : null;
    Item = other.item_ != null ? other.Item.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChildBuyResp Clone() {
    return new ChildBuyResp(this);
  }

  /// <summary>Field number for the "detail" field.</summary>
  public const int DetailFieldNumber = 1;
  private global::ChildDetailPb detail_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ChildDetailPb Detail {
    get { return detail_; }
    set {
      detail_ = value;
    }
  }

  /// <summary>Field number for the "item" field.</summary>
  public const int ItemFieldNumber = 2;
  private global::ItemPb item_;
  /// <summary>
  ///当前所有道具
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ItemPb Item {
    get { return item_; }
    set {
      item_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChildBuyResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChildBuyResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Detail, other.Detail)) return false;
    if (!object.Equals(Item, other.Item)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (detail_ != null) hash ^= Detail.GetHashCode();
    if (item_ != null) hash ^= Item.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (detail_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Detail);
    }
    if (item_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Item);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (detail_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Detail);
    }
    if (item_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChildBuyResp other) {
    if (other == null) {
      return;
    }
    if (other.detail_ != null) {
      if (detail_ == null) {
        detail_ = new global::ChildDetailPb();
      }
      Detail.MergeFrom(other.Detail);
    }
    if (other.item_ != null) {
      if (item_ == null) {
        item_ = new global::ItemPb();
      }
      Item.MergeFrom(other.Item);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (detail_ == null) {
            detail_ = new global::ChildDetailPb();
          }
          input.ReadMessage(detail_);
          break;
        }
        case 18: {
          if (item_ == null) {
            item_ = new global::ItemPb();
          }
          input.ReadMessage(item_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
