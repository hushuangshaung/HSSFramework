// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pool.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from pool.proto</summary>
public static partial class PoolReflection {

  #region Descriptor
  /// <summary>File descriptor for pool.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PoolReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgpwb29sLnByb3RvGgpiZWFuLnByb3RvIowBCgpVcFBvb2xSZXNwEg0KBWxl",
          "dmVsGAEgASgFEgsKA2V4cBgCIAEoBRIvCgpjaGFuZ2VJdGVtGAMgAygLMhsu",
          "VXBQb29sUmVzcC5DaGFuZ2VJdGVtRW50cnkaMQoPQ2hhbmdlSXRlbUVudHJ5",
          "EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiIgoLQWR2YW5jZVJl",
          "c3ASEwoLYWR2YW5jZVRpbWUYASABKAMiLgoPQWR2YW5jZVNwZWVkUmVxEgwK",
          "BHR5cGUYASABKAUSDQoFcGFyYW0YAiABKAUivQEKEEFkdmFuY2VTcGVlZFJl",
          "c3ASDAoEdHlwZRgBIAEoBRITCgthZHZhbmNlVGltZRgCIAEoAxIMCgRoZWxw",
          "GAMgASgFEjUKCmNoYW5nZUl0ZW0YBCADKAsyIS5BZHZhbmNlU3BlZWRSZXNw",
          "LkNoYW5nZUl0ZW1FbnRyeRIOCgZjZFRpbWUYBSABKAUaMQoPQ2hhbmdlSXRl",
          "bUVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiDwoNQWR2",
          "YW5jZUVuZFJlcSIsCg5BZHZhbmNlRW5kUmVzcBINCgVsZXZlbBgBIAEoBRIL",
          "CgNleHAYAiABKAUiLQoRSGF0Y2hQb29sSW5mb1Jlc3ASGAoEcG9vbBgBIAEo",
          "CzIKLkhhdGNoUG9vbEIUCgpjb20uY2IubXNnQgZQQlBvb2xiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::BeanReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::UpPoolResp), global::UpPoolResp.Parser, new[]{ "Level", "Exp", "ChangeItem" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdvanceResp), global::AdvanceResp.Parser, new[]{ "AdvanceTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdvanceSpeedReq), global::AdvanceSpeedReq.Parser, new[]{ "Type", "Param" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdvanceSpeedResp), global::AdvanceSpeedResp.Parser, new[]{ "Type", "AdvanceTime", "Help", "ChangeItem", "CdTime" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdvanceEndReq), global::AdvanceEndReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AdvanceEndResp), global::AdvanceEndResp.Parser, new[]{ "Level", "Exp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HatchPoolInfoResp), global::HatchPoolInfoResp.Parser, new[]{ "Pool" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class UpPoolResp : pb::IMessage<UpPoolResp> {
  private static readonly pb::MessageParser<UpPoolResp> _parser = new pb::MessageParser<UpPoolResp>(() => new UpPoolResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpPoolResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PoolReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpPoolResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpPoolResp(UpPoolResp other) : this() {
    level_ = other.level_;
    exp_ = other.exp_;
    changeItem_ = other.changeItem_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpPoolResp Clone() {
    return new UpPoolResp(this);
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 1;
  private int level_;
  /// <summary>
  ///当前等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 2;
  private int exp_;
  /// <summary>
  ///当前格子
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 3;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpPoolResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpPoolResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Level != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Exp);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpPoolResp other) {
    if (other == null) {
      return;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    changeItem_.Add(other.changeItem_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Level = input.ReadInt32();
          break;
        }
        case 16: {
          Exp = input.ReadInt32();
          break;
        }
        case 26: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class AdvanceResp : pb::IMessage<AdvanceResp> {
  private static readonly pb::MessageParser<AdvanceResp> _parser = new pb::MessageParser<AdvanceResp>(() => new AdvanceResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdvanceResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PoolReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceResp(AdvanceResp other) : this() {
    advanceTime_ = other.advanceTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceResp Clone() {
    return new AdvanceResp(this);
  }

  /// <summary>Field number for the "advanceTime" field.</summary>
  public const int AdvanceTimeFieldNumber = 1;
  private long advanceTime_;
  /// <summary>
  ///晋级结束时间 毫秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long AdvanceTime {
    get { return advanceTime_; }
    set {
      advanceTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdvanceResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdvanceResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AdvanceTime != other.AdvanceTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AdvanceTime != 0L) hash ^= AdvanceTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AdvanceTime != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(AdvanceTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AdvanceTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AdvanceTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdvanceResp other) {
    if (other == null) {
      return;
    }
    if (other.AdvanceTime != 0L) {
      AdvanceTime = other.AdvanceTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          AdvanceTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///晋级加速
/// </summary>
public sealed partial class AdvanceSpeedReq : pb::IMessage<AdvanceSpeedReq> {
  private static readonly pb::MessageParser<AdvanceSpeedReq> _parser = new pb::MessageParser<AdvanceSpeedReq>(() => new AdvanceSpeedReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdvanceSpeedReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PoolReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceSpeedReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceSpeedReq(AdvanceSpeedReq other) : this() {
    type_ = other.type_;
    param_ = other.param_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceSpeedReq Clone() {
    return new AdvanceSpeedReq(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///1-求助  2-使用加速卷 3-广告
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "param" field.</summary>
  public const int ParamFieldNumber = 2;
  private int param_;
  /// <summary>
  ///使用加速卷的数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Param {
    get { return param_; }
    set {
      param_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdvanceSpeedReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdvanceSpeedReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Param != other.Param) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Param != 0) hash ^= Param.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (Param != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Param);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Param != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdvanceSpeedReq other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Param != 0) {
      Param = other.Param;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          Param = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AdvanceSpeedResp : pb::IMessage<AdvanceSpeedResp> {
  private static readonly pb::MessageParser<AdvanceSpeedResp> _parser = new pb::MessageParser<AdvanceSpeedResp>(() => new AdvanceSpeedResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdvanceSpeedResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PoolReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceSpeedResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceSpeedResp(AdvanceSpeedResp other) : this() {
    type_ = other.type_;
    advanceTime_ = other.advanceTime_;
    help_ = other.help_;
    changeItem_ = other.changeItem_.Clone();
    cdTime_ = other.cdTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceSpeedResp Clone() {
    return new AdvanceSpeedResp(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///必给字段 1-求助  2-使用加速卷 3-广告
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "advanceTime" field.</summary>
  public const int AdvanceTimeFieldNumber = 2;
  private long advanceTime_;
  /// <summary>
  ///必给字段 晋级结束时间 毫秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long AdvanceTime {
    get { return advanceTime_; }
    set {
      advanceTime_ = value;
    }
  }

  /// <summary>Field number for the "help" field.</summary>
  public const int HelpFieldNumber = 3;
  private int help_;
  /// <summary>
  ///当日求助次数 (type=1时给值)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Help {
    get { return help_; }
    set {
      help_ = value;
    }
  }

  /// <summary>Field number for the "changeItem" field.</summary>
  public const int ChangeItemFieldNumber = 4;
  private static readonly pbc::MapField<int, int>.Codec _map_changeItem_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
  private readonly pbc::MapField<int, int> changeItem_ = new pbc::MapField<int, int>();
  /// <summary>
  ///改变的道具 (type=2时给值)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> ChangeItem {
    get { return changeItem_; }
  }

  /// <summary>Field number for the "cdTime" field.</summary>
  public const int CdTimeFieldNumber = 5;
  private int cdTime_;
  /// <summary>
  ///广告冷却时间 （type=3时给值）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CdTime {
    get { return cdTime_; }
    set {
      cdTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdvanceSpeedResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdvanceSpeedResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (AdvanceTime != other.AdvanceTime) return false;
    if (Help != other.Help) return false;
    if (!ChangeItem.Equals(other.ChangeItem)) return false;
    if (CdTime != other.CdTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (AdvanceTime != 0L) hash ^= AdvanceTime.GetHashCode();
    if (Help != 0) hash ^= Help.GetHashCode();
    hash ^= ChangeItem.GetHashCode();
    if (CdTime != 0) hash ^= CdTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (AdvanceTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(AdvanceTime);
    }
    if (Help != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Help);
    }
    changeItem_.WriteTo(output, _map_changeItem_codec);
    if (CdTime != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CdTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (AdvanceTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AdvanceTime);
    }
    if (Help != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Help);
    }
    size += changeItem_.CalculateSize(_map_changeItem_codec);
    if (CdTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CdTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdvanceSpeedResp other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.AdvanceTime != 0L) {
      AdvanceTime = other.AdvanceTime;
    }
    if (other.Help != 0) {
      Help = other.Help;
    }
    changeItem_.Add(other.changeItem_);
    if (other.CdTime != 0) {
      CdTime = other.CdTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          AdvanceTime = input.ReadInt64();
          break;
        }
        case 24: {
          Help = input.ReadInt32();
          break;
        }
        case 34: {
          changeItem_.AddEntriesFrom(input, _map_changeItem_codec);
          break;
        }
        case 40: {
          CdTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///晋级结束, 当前时间>=advanceTime  发送
/// </summary>
public sealed partial class AdvanceEndReq : pb::IMessage<AdvanceEndReq> {
  private static readonly pb::MessageParser<AdvanceEndReq> _parser = new pb::MessageParser<AdvanceEndReq>(() => new AdvanceEndReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdvanceEndReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PoolReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceEndReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceEndReq(AdvanceEndReq other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceEndReq Clone() {
    return new AdvanceEndReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdvanceEndReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdvanceEndReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdvanceEndReq other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

public sealed partial class AdvanceEndResp : pb::IMessage<AdvanceEndResp> {
  private static readonly pb::MessageParser<AdvanceEndResp> _parser = new pb::MessageParser<AdvanceEndResp>(() => new AdvanceEndResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AdvanceEndResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PoolReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceEndResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceEndResp(AdvanceEndResp other) : this() {
    level_ = other.level_;
    exp_ = other.exp_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AdvanceEndResp Clone() {
    return new AdvanceEndResp(this);
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 1;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 2;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AdvanceEndResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AdvanceEndResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Level != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Exp);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AdvanceEndResp other) {
    if (other == null) {
      return;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Level = input.ReadInt32();
          break;
        }
        case 16: {
          Exp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///孵化池信息查看 --req nil
/// </summary>
public sealed partial class HatchPoolInfoResp : pb::IMessage<HatchPoolInfoResp> {
  private static readonly pb::MessageParser<HatchPoolInfoResp> _parser = new pb::MessageParser<HatchPoolInfoResp>(() => new HatchPoolInfoResp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HatchPoolInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PoolReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HatchPoolInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HatchPoolInfoResp(HatchPoolInfoResp other) : this() {
    Pool = other.pool_ != null ? other.Pool.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HatchPoolInfoResp Clone() {
    return new HatchPoolInfoResp(this);
  }

  /// <summary>Field number for the "pool" field.</summary>
  public const int PoolFieldNumber = 1;
  private global::HatchPool pool_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HatchPool Pool {
    get { return pool_; }
    set {
      pool_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HatchPoolInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HatchPoolInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Pool, other.Pool)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (pool_ != null) hash ^= Pool.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (pool_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Pool);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (pool_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pool);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HatchPoolInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.pool_ != null) {
      if (pool_ == null) {
        pool_ = new global::HatchPool();
      }
      Pool.MergeFrom(other.Pool);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (pool_ == null) {
            pool_ = new global::HatchPool();
          }
          input.ReadMessage(pool_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
